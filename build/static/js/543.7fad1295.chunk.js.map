{"version":3,"file":"static/js/543.7fad1295.chunk.js","mappings":"mSA0GA,UAjGc,WACV,IAAMA,GAAQC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,SAChD,GAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KASMC,EAAU,mCAAG,2FACVJ,GAAqC,SAAzB,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMK,KAAKC,MAAM,KAAK,IADpB,uBAEXH,GAAa,GAFF,2CAMLI,EAAW,IAAIC,UACZC,OAAO,OAAQT,GAPb,SAQYU,IAAAA,KAAA,UAAcC,EAAAA,EAAd,qBAA0CJ,EAAU,CACvEK,QAAS,CACLC,cAAe,UAAYlB,KAVxB,gBAQHmB,EARG,EAQHA,KAKRC,EAAAA,GAAAA,QAAcD,EAAKA,KAAKE,SACxBf,EAAQ,MAdG,kDAgBXgB,QAAQC,IAAR,MAhBW,0DAAH,qDAoBVC,EAAc,mCAAG,mCAAAC,EAAA,0FAEQV,IAAAA,IAAA,UAAaC,EAAAA,EAAb,kEAAsF,CACzGU,aAAc,OACdT,QAAS,CACLC,cAAc,UAAD,OAAYlB,MALlB,OAWf,IATM2B,EAFS,OAQTC,EAAiBC,KAAI,OAACF,QAAD,IAACA,GAAD,UAACA,EAAUR,YAAX,iBAAC,EAAgBA,YAAjB,aAAC,EAAsBW,SAC5CC,EAAc,IAAIC,MAAMJ,EAAeK,QAEpCC,EAAI,EAAGA,EAAIN,EAAeK,OAAQC,IACvCH,EAAYG,GAAKN,EAAeO,WAAWD,GAEzCE,EAAY,IAAIC,WAAWN,GAC3BO,EAAO,IAAIC,KAAK,CAACH,GAAY,CAAEI,KAAM,oBACrCC,EAAMC,OAAOC,IAAIC,gBAAgBN,IACjCb,EAAIoB,SAASC,cAAc,MAC/BC,MAAMC,QAAU,OAClBvB,EAAEwB,KAAOR,EACThB,EAAEyB,SAAWvB,EAASR,KAAKA,KAAKgC,SAChCN,SAASO,KAAKC,YAAY5B,GAC1BA,EAAE6B,QACFZ,OAAOC,IAAIY,gBAAgBd,GAvBZ,kDAyBfrB,EAAAA,GAAAA,MAAY,qCACZE,QAAQkC,MAAM,mCAAd,MA1Be,0DAAH,qDA8BpB,OACI,UAAC,KAAD,CAAMR,QAAQ,OAAOS,eAAgB,SAAUC,WAAY,SAAUC,IAAK,OAA1E,WACI,6BACI,oDAEA,SAAC,IAAD,CACIC,GAAI,CAAEC,UAAW,QACjBC,GAAG,gBACHpD,KAAK,gBACLqD,MAAM,cACNvB,KAAK,OAMLwB,aAAa,aACbC,SAAS,EACTT,MAAOjD,EACP2D,SA7EG,SAACC,GACoC,QAAhDA,EAAEC,cAAcC,MAAM,GAAG3D,KAAKC,MAAM,KAAK,KAG7CL,EAAQ6D,EAAEC,cAAcC,MAAM,IAC9B7D,GAAa,KAyED8D,WAAW,6BAEf,0BACI,SAAC,IAAD,CAAQC,QAAQ,YAAYC,KAAK,QAAQC,QAAShE,EAAYmD,GAAI,CAAEC,UAAW,QAA/E,0BAKR,SAAC,IAAD,CAAQU,QAAQ,YAAYC,KAAK,QAAQC,QAASjD,EAAlD","sources":["views/pages/plants/index.js"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, MenuItem, Grid } from '@mui/material';\r\nimport { useSelector } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport { API_URL } from '../../../utils/axios';\r\nimport { toast } from 'react-toastify';\r\n// import FileInput from \"./components/FileInput\";\r\n\r\nconst index = () => {\r\n    const token = useSelector((state) => state.auth.token);\r\n    const [file, setFile] = useState(null);\r\n    const [fileError, setFileError] = useState(false);\r\n    const handleFile = (e) => {\r\n        if (e.currentTarget.files[0].name.split('.')[1] !== 'csv') {\r\n            return;\r\n        }\r\n        setFile(e.currentTarget.files[0]);\r\n        setFileError(false);\r\n    };\r\n\r\n    const fileUpload = async () => {\r\n        if (!file || file?.name.split('.')[1] !== 'csv') {\r\n            setFileError(true);\r\n            return;\r\n        }\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            const { data } = await axios.post(`${API_URL}/admin/csv-upload`, formData, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n            toast.success(data.data.message);\r\n            setFile(null);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const handleDownload = async () => {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/admin/files/download-grasshopper-script?fileToDownload=plants`, {\r\n                responseType: 'json',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}` // Replace YOUR_BEARER_TOKEN with the actual token\r\n                }\r\n            });\r\n            const byteCharacters = atob(response?.data?.data?.pdfFile);\r\n            const byteNumbers = new Array(byteCharacters.length);\r\n\r\n            for (let i = 0; i < byteCharacters.length; i++) {\r\n                byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n            }\r\n            const byteArray = new Uint8Array(byteNumbers);\r\n            const blob = new Blob([byteArray], { type: 'application/pdf' });\r\n            const url = window.URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.style.display = 'none';\r\n            a.href = url;\r\n            a.download = response.data.data.fileName; \r\n            document.body.appendChild(a);\r\n            a.click();\r\n            window.URL.revokeObjectURL(url);\r\n        } catch (error) {\r\n            toast.error(\"Couldn't find the file on server!\");\r\n            console.error('Error downloading the .3dm file:', error);\r\n            // Handle the error, e.g., show an error message to the user\r\n        }\r\n    };\r\n    return (\r\n        <Grid display=\"flex\" justifyContent={'center'} alignItems={'center'} gap={'30px'}>\r\n            <form>\r\n                <h1>Update Plants Database</h1>\r\n                {/* <FileInput label=\"Attachment\" error={null} /> */}\r\n                <TextField\r\n                    sx={{ marginTop: '25px' }}\r\n                    id=\"walletAddress\"\r\n                    name=\"walletAddress\"\r\n                    label=\"Select file\"\r\n                    type=\"file\"\r\n                    // value={formik.values.walletAddress}\r\n                    // onChange={formik.handleChange}\r\n                    // error={formik.touched.walletAddress && Boolean(formik.errors.walletAddress)}\r\n                    // helperText={formik.touched.walletAddress && formik.errors.walletAddress}\r\n                    // fullWidth\r\n                    autoComplete=\"given-name\"\r\n                    focused={true}\r\n                    error={fileError}\r\n                    onChange={handleFile}\r\n                    helperText=\"only .csv files allowed\"\r\n                />\r\n                <div>\r\n                    <Button variant=\"contained\" size=\"small\" onClick={fileUpload} sx={{ marginTop: '25px' }}>\r\n                        Update\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n            <Button variant=\"contained\" size=\"large\" onClick={handleDownload}>\r\n                Download Current File\r\n            </Button>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default index;\r\n"],"names":["token","useSelector","state","auth","useState","file","setFile","fileError","setFileError","fileUpload","name","split","formData","FormData","append","axios","API_URL","headers","Authorization","data","toast","message","console","log","handleDownload","a","responseType","response","byteCharacters","atob","pdfFile","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","blob","Blob","type","url","window","URL","createObjectURL","document","createElement","style","display","href","download","fileName","body","appendChild","click","revokeObjectURL","error","justifyContent","alignItems","gap","sx","marginTop","id","label","autoComplete","focused","onChange","e","currentTarget","files","helperText","variant","size","onClick"],"sourceRoot":""}