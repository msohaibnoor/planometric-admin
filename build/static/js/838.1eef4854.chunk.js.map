{"version":3,"file":"static/js/838.1eef4854.chunk.js","mappings":"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","sources":["views/pages/marketPlace/brandManagement/index.js","views/pages/marketPlace/categories/component/deleteCategoryDialog.js","views/pages/marketPlace/categories/component/categoryTable.js","views/pages/marketPlace/categories/component/addUpdateCategory.js","views/pages/marketPlace/categories/index.js"],"sourcesContent":["import SubCategory from \"../subCategories/index\";\r\nimport Brands from \"../brands/index\";\r\nimport Categories from \"../categories/index\";\r\n\r\nconst BrandManagement = () => {\r\n\r\nreturn (\r\n    <>\r\n    <Brands/>\r\n    <Categories/>\r\n    <SubCategory/>\r\n    </>\r\n)\r\n\r\n}\r\n\r\nexport default BrandManagement;","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteCategory } from '../../../../../redux/marketPlace/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteCategoryDialog({ deleteOpen, setDeleteOpen,categoryData, categoryId, brandId,page, limit, search }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setDeleteOpen(false);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={deleteOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Category</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteCategory({\r\n                                    categoryId: categoryId,\r\n                                    brandId:categoryData.brandId,\r\n                                    handleClose: handleClose,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip,\r\n    Menu,\r\n    MenuItem\r\n} from '@mui/material';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport DeleteCategoryDialog from './deleteCategoryDialog';\r\nimport moment from 'moment';\r\nconst CategoryTable = ({\r\n    categoryList,\r\n    page,\r\n    limit,\r\n    search,\r\n    categoryData,\r\n    setCategoryData,\r\n    setAddUpdateOpen,\r\n    categoryId,\r\n    setCategoryId\r\n}) => {\r\n    const theme = useTheme();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [selectedRow, setSelectedRow] = useState(null);\r\n    const handleClick = (event, row) => {\r\n        setSelectedRow(row);\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    return (\r\n        <TableContainer>\r\n            <DeleteCategoryDialog\r\n                deleteOpen={deleteOpen}\r\n                setDeleteOpen={setDeleteOpen}\r\n                categoryId={categoryId}\r\n                categoryData={categoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Name</TableCell>\r\n                        <TableCell align=\"center\">Total NFT'S</TableCell>\r\n                        <TableCell align=\"center\">Brand</TableCell>\r\n                        <TableCell align=\"center\">Created / Updated</TableCell>\r\n                        {/* <TableCell align=\"center\">Updated At</TableCell> */}\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {categoryList &&\r\n                        categoryList.categories &&\r\n                        categoryList.categories.length > 0 &&\r\n                        categoryList.categories.map((row, index) => (\r\n                            <>\r\n                                <TableRow\r\n                                    onClick={() => {\r\n                                        console.log('nfts', row);\r\n                                    }}\r\n                                >\r\n                                    <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                        {row.name}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                        {row.Nfts && row.Nfts.length}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                        {row.Brand.name}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {moment(row.createdAt).format('DD-MM-YY')} / {moment(row.updatedAt).format('DD-MM-YY')}\r\n                                    </TableCell>\r\n                                    {/* <TableCell align=\"center\">{moment(row.updatedAt).format('DD-MM-YYYY')}</TableCell> */}\r\n                                    <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                        {/* <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                            <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                <IconButton\r\n                                                    disabled={row.Nfts && row.Nfts.length > 0 ? true : false}\r\n                                                    color=\"primary\"\r\n                                                    aria-label=\"Edit\"\r\n                                                    size=\"large\"\r\n                                                    onClick={() => {\r\n                                                        console.log('row', row);\r\n                                                        setCategoryData({\r\n                                                            name: row.name,\r\n                                                            brandId: row.BrandId\r\n                                                        });\r\n                                                        setCategoryId(row.id);\r\n                                                        setAddUpdateOpen(true);\r\n                                                    }}\r\n                                                >\r\n                                                    <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                            <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                <IconButton\r\n                                                    disabled={row.Nfts && row.Nfts.length > 0 ? true : false}\r\n                                                    color=\"primary\"\r\n                                                    sx={{\r\n                                                        color: theme.palette.orange.dark,\r\n                                                        borderColor: theme.palette.orange.main,\r\n                                                        '&:hover ': { background: theme.palette.orange.light }\r\n                                                    }}\r\n                                                    size=\"large\"\r\n                                                    onClick={() => {\r\n                                                        setDeleteOpen(true);\r\n                                                        setCategoryId(row.id);\r\n                                                        setCategoryData({\r\n                                                            name: row.name,\r\n                                                            brandId: row.BrandId\r\n                                                        });\r\n                                                    }}\r\n                                                >\r\n                                                    <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Stack> */}\r\n                                        <IconButton>\r\n                                            <MoreVertIcon\r\n                                                fontSize=\"large\"\r\n                                                color=\"black\"\r\n                                                aria-controls=\"menu-friend-card\"\r\n                                                aria-haspopup=\"true\"\r\n                                                sx={{ opacity: 1.6 }}\r\n                                                onClick={(e) => handleClick(e, row)}\r\n                                            />\r\n                                        </IconButton>\r\n                                        <Menu\r\n                                            id=\"menu-simple-card\"\r\n                                            anchorEl={anchorEl}\r\n                                            keepMounted\r\n                                            open={Boolean(anchorEl)}\r\n                                            onClose={handleClose}\r\n                                            variant=\"selectedMenu\"\r\n                                            anchorOrigin={{\r\n                                                vertical: 'left',\r\n                                                horizontal: 'left'\r\n                                            }}\r\n                                            transformOrigin={{\r\n                                                vertical: 'top',\r\n                                                horizontal: 'right'\r\n                                            }}\r\n                                            sx={{ padding: '0px 8px' }}\r\n                                            className=\"customMenuClass\"\r\n                                        >\r\n                                            {/* <Stack\r\n                                                direction=\"column\"\r\n                                                justifyContent=\"center\"\r\n                                                alignItems=\"center\"\r\n                                                gap={'5px'}\r\n                                                sx={{ padding: '0px 8px' }}\r\n                                            > */}\r\n                                            {/* <Tooltip placement=\"top\" title=\"Edit\"> */}\r\n                                            <MenuItem\r\n                                                onClick={() => {\r\n                                                    console.log('selectedRow', selectedRow);\r\n                                                    setCategoryData({\r\n                                                        name: selectedRow.name,\r\n                                                        brandId: selectedRow.BrandId\r\n                                                    });\r\n                                                    setCategoryId(selectedRow.id);\r\n                                                    setAddUpdateOpen(true);\r\n                                                    handleClose();\r\n                                                }}\r\n                                                disabled={selectedRow?.Nfts && selectedRow?.Nfts?.length > 0 ? true : false}\r\n                                            >\r\n                                                <div className=\"actionItem\">\r\n                                                    <IconButton color=\"primary\" aria-label=\"Edit\" size=\"large\" sx={{ padding: '0px' }}>\r\n                                                        <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                    <p>Edit</p>\r\n                                                </div>\r\n                                            </MenuItem>\r\n\r\n                                            {/* </Tooltip> */}\r\n                                            {/* <Tooltip placement=\"top\" title=\"Delete\"> */}\r\n                                            <MenuItem\r\n                                                onClick={() => {\r\n                                                    setDeleteOpen(true);\r\n                                                    setCategoryId(selectedRow.id);\r\n                                                    setCategoryData({\r\n                                                        name: selectedRow.name,\r\n                                                        brandId: selectedRow.BrandId\r\n                                                    });\r\n                                                    handleClose();\r\n                                                }}\r\n                                                disabled={selectedRow?.Nfts && selectedRow?.Nfts?.length > 0 ? true : false}\r\n                                            >\r\n                                                <div className=\"actionItem\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        sx={{\r\n                                                            color: theme.palette.orange.dark,\r\n                                                            borderColor: theme.palette.orange.main,\r\n                                                            '&:hover ': { background: theme.palette.orange.light },\r\n                                                            padding: '0px'\r\n                                                        }}\r\n                                                        size=\"large\"\r\n                                                    >\r\n                                                        <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                    <p>Delete</p>\r\n                                                </div>\r\n                                            </MenuItem>\r\n\r\n                                            {/* </Tooltip> */}\r\n                                            {/* </Stack> */}\r\n                                        </Menu>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default CategoryTable;\r\n","import { forwardRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Grid, MenuItem } from '@mui/material';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nimport { addCategory, updateCategory } from '../../../../../redux/marketPlace/actions';\r\n\r\nexport default function AddUpdateCategoryDialog({\r\n    brandArray,\r\n    addUpdateOpen,\r\n    setAddUpdateOpen,\r\n    page,\r\n    limit,\r\n    search,\r\n    categoryData,\r\n    setCategoryData,\r\n    categoryId,\r\n    mainBrandId\r\n}) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleBrandChange = (event) => {\r\n        setCategoryData({\r\n            name: categoryData.name,\r\n            brandId: event.target.value\r\n        });\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string()\r\n            .required('Category Name is required!')\r\n            .max(42, 'Category Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Category name')\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            name: categoryData.name\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (categoryData.name == '') {\r\n                dispatch(\r\n                    addCategory({\r\n                        name: values.name,\r\n                        brandId: categoryData.brandId,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        mainBrandId: mainBrandId,\r\n                        handleClose: handleClose,\r\n                        setCategoryData: setCategoryData\r\n                    })\r\n                );\r\n            } else {\r\n                dispatch(\r\n                    updateCategory({\r\n                        categoryId: categoryId,\r\n                        name: values.name,\r\n                        brandId: categoryData.brandId,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        handleClose: handleClose,\r\n                        setCategoryData: setCategoryData\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setAddUpdateOpen(false);\r\n        setCategoryData({\r\n            name: '',\r\n            brandId: 0\r\n        });\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className=\"responsiveDialog\"\r\n                open={addUpdateOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">{categoryData.name == '' ? 'Add Category' : 'Update Category'}</DialogTitle>\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid item xs={12} pt={4}>\r\n                            <TextField\r\n                                id=\"name\"\r\n                                name=\"name\"\r\n                                label=\"Enter Category Name\"\r\n                                value={formik.values.name}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                helperText={formik.touched.name && formik.errors.name}\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                            />\r\n                        </Grid>\r\n                        {categoryData.name == '' && (\r\n                            <Grid item xs={12} pt={4}>\r\n                                <TextField\r\n                                    className=\"brandSelectField\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Select Brand\"\r\n                                    value={categoryData.brandId}\r\n                                    onChange={handleBrandChange}\r\n                                >\r\n                                    <MenuItem value={0}>Choose Brand</MenuItem>\r\n                                    {brandArray &&\r\n                                        brandArray.brandList &&\r\n                                        brandArray.brandList.map((option, index) => (\r\n                                            <MenuItem key={index} value={option.value}>\r\n                                                {option.label}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                        )}\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={() => {\r\n                            handleClose();\r\n                        }}\r\n                        color=\"secondary\"\r\n                    >\r\n                        <FormattedMessage id=\"cancel\" />\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            formik.handleSubmit();\r\n                        }}\r\n                    >\r\n                        {categoryData.name == '' ? 'Add' : 'Update'}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport CategoryTable from './component/categoryTable';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    Typography,\r\n    Grid,\r\n    MenuItem,\r\n    Menu,\r\n    Pagination,\r\n    OutlinedInput,\r\n    TextField,\r\n    InputAdornment\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrands, getAllBrandList, getAllCategories } from '../../../../redux/marketPlace/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateCategoryDialog from './component/addUpdateCategory';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\n\r\nconst Categories = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const categoryList = useSelector((state) => state.marketPlace.categoryList);\r\n    const brandArray = useSelector((state) => state.marketPlace.brandArray);\r\n    const [brand, setBrand] = useState(0);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [categoryId, setCategoryId] = useState();\r\n    const [categoryData, setCategoryData] = useState({\r\n        name: '',\r\n        brandId: 0\r\n    });\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleBrandChange = (event) => {\r\n        setBrand(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllBrandList());\r\n    }, []);\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllCategories({\r\n                brandId: brand == 0 ? '' : brand,\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit, brand]);\r\n    return (\r\n        <>\r\n            <AddUpdateCategoryDialog\r\n                mainBrandId={brand}\r\n                brandArray={brandArray}\r\n                categoryId={categoryId}\r\n                categoryData={categoryData}\r\n                setCategoryData={setCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                addUpdateOpen={addUpdateOpen}\r\n                setAddUpdateOpen={setAddUpdateOpen}\r\n            />\r\n            <HeadingCard title=\"Category Management\" marginTop=\"20px\" />\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                                sx={{ height: '40px', width: '100%' }}\r\n                                className=\"customOutlinedInput\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <TextField\r\n                                className=\"selectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Brand\"\r\n                                value={brand}\r\n                                onChange={handleBrandChange}\r\n                                sx={{ height: '40px' }}\r\n                            >\r\n                                <MenuItem value={0}>All</MenuItem>\r\n                                {brandArray &&\r\n                                    brandArray.brandList &&\r\n                                    brandArray.brandList.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setCategoryData({\r\n                                        name: '',\r\n                                        brandId: 0\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Add Category\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                {categoryList && categoryList.categories && categoryList.categories.length > 0 ? (\r\n                    <>\r\n                        <CategoryTable\r\n                            categoryList={categoryList && categoryList}\r\n                            page={page}\r\n                            limit={limit}\r\n                            search={search}\r\n                            categoryId={categoryId}\r\n                            setCategoryId={setCategoryId}\r\n                            categoryData={categoryData}\r\n                            setCategoryData={setCategoryData}\r\n                            setAddUpdateOpen={setAddUpdateOpen}\r\n                        />\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                                <Grid item>\r\n                                    <Pagination\r\n                                        color=\"primary\"\r\n                                        showFirstButton\r\n                                        showLastButton\r\n                                        page={page}\r\n                                        count={categoryList && categoryList.pages}\r\n                                        // count={2}\r\n                                        onChange={(event, newPage) => {\r\n                                            setPage(newPage);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        sx={{ color: theme.palette.grey[900] }}\r\n                                        color=\"secondary\"\r\n                                        endIcon={<ExpandMoreRoundedIcon />}\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        {limit} Rows\r\n                                    </Button>\r\n                                    <Menu\r\n                                        id=\"menu-user-list-style1\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleCloseMenu}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem\r\n                                            value={10}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            10 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={25}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            25 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={50}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            50 Rows{' '}\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Categories;\r\n"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteCategoryDialog","deleteOpen","setDeleteOpen","categoryData","categoryId","page","brandId","limit","search","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","open","TransitionComponent","keepMounted","onClose","DialogTitle","id","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteCategory","categoryList","setCategoryData","setAddUpdateOpen","setCategoryId","useState","anchorEl","setAnchorEl","selectedRow","setSelectedRow","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","categories","length","map","row","index","console","log","padding","name","Nfts","Brand","moment","createdAt","format","updatedAt","IconButton","MoreVert","fontSize","opacity","e","event","currentTarget","handleClick","Menu","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","className","MenuItem","BrandId","disabled","EditOutlined","orange","main","background","light","DeleteOutlineOutlined","AddUpdateCategoryDialog","brandArray","addUpdateOpen","mainBrandId","validationSchema","Yup","required","max","matches","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","addCategory","updateCategory","resetForm","autoComplete","handleSubmit","Grid","item","xs","pt","TextField","label","value","onChange","handleChange","touched","errors","helperText","fullWidth","select","target","brandList","option","useSelector","state","marketPlace","brand","setBrand","setSearch","setPage","setLimit","handleCloseMenu","useEffect","getAllBrandList","getAllCategories","HeadingCard","title","marginTop","MainCard","container","spacing","gridSpacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","height","width","textAlign","content","p","justifyContent","Pagination","showFirstButton","showLastButton","count","pages","newPage","grey","endIcon","ExpandMoreRounded","style"],"sourceRoot":""}