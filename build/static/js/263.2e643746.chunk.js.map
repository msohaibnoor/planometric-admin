{"version":3,"file":"static/js/263.2e643746.chunk.js","mappings":"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","sources":["views/pages/RvtDwg/index.js"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { Grid, Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, MenuItem } from '@mui/material';\r\nimport { useSelector } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport { API_URL } from '../../../utils/axios';\r\nimport { toast } from 'react-toastify';\r\n// import FileInput from \"./components/FileInput\";\r\n\r\nconst index = () => {\r\n    const token = useSelector((state) => state.auth.token);\r\n    const [file, setFile] = useState(null);\r\n    const [dwgFile, setDwgFile] = useState(null);\r\n    const [fileError, setFileError] = useState(false);\r\n    const [dwgFileError, setDwgFileError] = useState(false);\r\n    const handleFile = (e) => {\r\n        if (e.currentTarget.files[0].name.split('.')[1] !== 'rvt') {\r\n            return;\r\n        }\r\n        setFile(e.currentTarget.files[0]);\r\n        setFileError(false);\r\n    };\r\n    const handleDwgFile = (e) => {\r\n        if (e.currentTarget.files[0].name.split('.')[1] !== 'dwg') {\r\n            return;\r\n        }\r\n        setDwgFile(e.currentTarget.files[0]);\r\n        setDwgFileError(false);\r\n    };\r\n\r\n    const revitFileUpload = async () => {\r\n        if (!file || file?.name.split('.')[1] !== 'rvt') {\r\n            setFileError(true);\r\n            return;\r\n        }\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            const { data } = await axios.post(`${API_URL}/admin/revit-upload`, formData, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n            toast.success(data.data.message);\r\n            setFile(null);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n    const dwgFileUpload = async () => {\r\n        console.log()\r\n        if (!dwgFile || dwgFile?.name.split('.')[1] !== 'dwg') {\r\n            setDwgFileError(true);\r\n            return;\r\n        }\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('file', dwgFile);\r\n            const { data } = await axios.post(`${API_URL}/admin/dwg-upload`, formData, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n            toast.success(data.data.message);\r\n            setDwgFile(null);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const handleDownload = async (fileName) => {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/admin/files/download-grasshopper-script?fileToDownload=${fileName}`, {\r\n                responseType: 'arraybuffer',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}` // Replace YOUR_BEARER_TOKEN with the actual token\r\n                }\r\n            });\r\n            console.log(response);\r\n            const blob = new Blob([response.data], { type: 'application/octet-stream' });\r\n\r\n            // Create a temporary URL for the blob\r\n            const url = window.URL.createObjectURL(blob);\r\n\r\n            // Create a hidden anchor tag and trigger the download\r\n            const a = document.createElement('a');\r\n            a.style.display = 'none';\r\n            a.href = url;\r\n            a.download = fileName == \"revitSample\" ? \"planometric-revit-sample.rvt\" : 'planometric-dwg-sample.dwg'; // Replace 'file.3dm' with the desired filename\r\n            document.body.appendChild(a);\r\n            a.click();\r\n\r\n            // Clean up the temporary URL\r\n            window.URL.revokeObjectURL(url);\r\n        } catch (error) {\r\n            toast.error(\"Couldn't find the file on server!\");\r\n\r\n            console.error('Error downloading the .3dm file:', error);\r\n            // Handle the error, e.g., show an error message to the user\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Grid display=\"flex\" justifyContent={'center'} alignItems={'center'} gap={'30px'}>\r\n                <form>\r\n                    <h1>Update Revit Sample file</h1>\r\n                    {/* <FileInput label=\"Attachment\" error={null} /> */}\r\n                    <TextField\r\n                        sx={{ marginTop: '25px' }}\r\n                        id=\"walletAddress\"\r\n                        name=\"walletAddress\"\r\n                        label=\"Select file\"\r\n                        type=\"file\"\r\n                        // value={formik.values.walletAddress}\r\n                        // onChange={formik.handleChange}\r\n                        // error={formik.touched.walletAddress && Boolean(formik.errors.walletAddress)}\r\n                        // helperText={formik.touched.walletAddress && formik.errors.walletAddress}\r\n                        // fullWidth\r\n                        autoComplete=\"given-name\"\r\n                        focused={true}\r\n                        error={fileError}\r\n                        onChange={handleFile}\r\n                        helperText=\"Only .rvt files allowed\"\r\n                    />\r\n                    <div>\r\n                        <Button variant=\"contained\" size=\"small\" onClick={revitFileUpload} sx={{ marginTop: '25px' }}>\r\n                            Update\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n                <Button variant=\"contained\" size=\"large\" onClick={() => handleDownload(\"revitSample\")}>\r\n                    Download Current File\r\n                </Button>\r\n            </Grid>\r\n            <Grid display=\"flex\" justifyContent={'center'} alignItems={'center'} gap={'30px'}>\r\n                <form>\r\n                    <h1>Update (.dwg) Sample file</h1>\r\n                    {/* <FileInput label=\"Attachment\" error={null} /> */}\r\n                    <TextField\r\n                        sx={{ marginTop: '25px' }}\r\n                        id=\"walletAddress\"\r\n                        name=\"walletAddress\"\r\n                        label=\"Select file\"\r\n                        type=\"file\"\r\n                        // value={formik.values.walletAddress}\r\n                        // onChange={formik.handleChange}\r\n                        // error={formik.touched.walletAddress && Boolean(formik.errors.walletAddress)}\r\n                        // helperText={formik.touched.walletAddress && formik.errors.walletAddress}\r\n                        // fullWidth\r\n                        autoComplete=\"given-name\"\r\n                        focused={true}\r\n                        error={dwgFileError}\r\n                        onChange={handleDwgFile}\r\n                        helperText=\"Only .dwg files allowed\"\r\n                    />\r\n                    <div>\r\n                        <Button variant=\"contained\" size=\"small\" onClick={dwgFileUpload} sx={{ marginTop: '25px' }}>\r\n                            Update\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n                <Button variant=\"contained\" size=\"large\" onClick={() => handleDownload('dwgSample')}>\r\n                    Download Current File\r\n                </Button>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default index;\r\n"],"names":["token","useSelector","state","auth","useState","file","setFile","dwgFile","setDwgFile","fileError","setFileError","dwgFileError","setDwgFileError","revitFileUpload","name","split","formData","FormData","append","axios","API_URL","headers","Authorization","data","toast","message","console","log","dwgFileUpload","handleDownload","fileName","a","responseType","response","blob","Blob","type","url","window","URL","createObjectURL","document","createElement","style","display","href","download","body","appendChild","click","revokeObjectURL","error","justifyContent","alignItems","gap","sx","marginTop","id","label","autoComplete","focused","onChange","e","currentTarget","files","helperText","variant","size","onClick"],"sourceRoot":""}