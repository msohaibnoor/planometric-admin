{"version":3,"file":"static/js/535.d25fcafa.chunk.js","mappings":"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","sources":["shared/Card/HeadingCard.js","views/pages/users/component/DeleteUserDialog.js","views/pages/users/component/AddUpdateNote.js","views/pages/users/component/userTable.js","views/pages/users/component/AddGuestUserDialog.js","views/pages/users/component/AddRestrictedUserDialog.js","views/pages/users/index.js","../node_modules/@mui/icons-material/Block.js","../node_modules/@mui/icons-material/Note.js","../node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js","../node_modules/@mui/material/InputAdornment/InputAdornment.js"],"sourcesContent":["import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options,marginTop }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n                border: '1px solid',\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default,\r\n                marginTop:marginTop ?? \"0px\"\r\n            }}\r\n        >\r\n            <Box sx={{ p: 2, pl: 2 }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {options && (role == 'teacher' || role == 'super_admin') && (\r\n                                <TextField\r\n                                    id=\"standard-select-currency\"\r\n                                    select\r\n                                    value={value}\r\n                                    onChange={(e) => setValue(e.target.value)}\r\n                                    sx={{ width: '150px' ,height:'44px'}}\r\n                                >\r\n                                    {options.map((option) => (\r\n                                        <MenuItem key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            )}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { FormattedMessage } from 'react-intl';\r\n// animation\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nimport { deleteUser } from '../../../../redux/users/actions';\r\n\r\nexport default function DeleteUserDialog({ open, setOpen, userId, page, limit, search,type }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete User</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this user?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteUser({\r\n                                    id: userId,\r\n                                    handleClose: handleClose,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    type:type\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Oval } from 'react-loader-spinner';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    TextareaAutosize,\r\n    Box,\r\n    Paper,\r\n    Typography,\r\n    Grid\r\n} from '@mui/material';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nimport { updateTestimonial, addTestimonial, addNoteAction, deleteNote } from '../../../../redux/testimonials/actions';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function AddUpdateNote({\r\n    openNotes,\r\n    setOpenNotes,\r\n    notes,\r\n    page,\r\n    limit,\r\n    search,\r\n    testimonialId,\r\n    testimonial,\r\n    feedbackText,\r\n    userId\r\n}) {\r\n    // console.log(notes);\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const [loader, setLoader] = useState(false);\r\n    const [addNote, setAddNote] = useState(false);\r\n    const [_notes, _setNotes] = useState([]);\r\n    console.log({ openNotes, addNote });\r\n    const validationSchema = Yup.object({\r\n        note: Yup.string().required('Feedback text is required!')\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            feedbackText: testimonial?.feedbackText,\r\n            clientName: testimonial?.clientName,\r\n            clientDesignation: testimonial?.clientDesignation,\r\n            clientImageUrl: testimonial?.clientImageUrl\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            console.log('values');\r\n            console.log(values);\r\n            setLoader(true);\r\n            if (!testimonial) {\r\n                dispatch(\r\n                    addTestimonial({\r\n                        feedbackText: values.feedbackText,\r\n                        clientDesignation: values.clientDesignation,\r\n                        clientName: values.clientName,\r\n                        clientImageUrl: values.clientImageUrl,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        handleClose: handleClose,\r\n                        setLoader: setLoader\r\n                    })\r\n                );\r\n            }\r\n            dispatch(\r\n                updateTestimonial({\r\n                    id: testimonialId,\r\n                    feedbackText: values.feedbackText,\r\n                    clientDesignation: values.clientDesignation,\r\n                    clientName: values.clientName,\r\n                    clientImageUrl: values.clientImageUrl,\r\n                    search: search,\r\n                    page: page,\r\n                    limit: limit,\r\n                    handleClose: handleClose,\r\n                    setLoader: setLoader\r\n                })\r\n            );\r\n        }\r\n    });\r\n    const noteFormik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            note: testimonial?.note\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            console.log('values');\r\n            console.log(values);\r\n            setLoader(true);\r\n            dispatch(\r\n                addNoteAction({\r\n                    note: values.note,\r\n                    userId: userId,\r\n                    handleClose: handleClose,\r\n                    setLoader: setLoader,\r\n                    setAddNote: setAddNote\r\n                })\r\n            );\r\n        }\r\n    });\r\n    // console.log(formik);\r\n    const handleClose = () => {\r\n        setLoader(false);\r\n        setOpenNotes(false);\r\n        setAddNote(false);\r\n        formik.resetForm();\r\n        noteFormik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className=\"responsiveDialog\"\r\n                open={openNotes || addNote}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <Grid display={'flex'} flexDirection={'row'} justifyContent={'space-between'} direction={'row'}>\r\n                    <DialogTitle id=\"alert-dialog-slide-title1\">Notes</DialogTitle>\r\n                    <Grid>\r\n                        <Button\r\n                            onClick={() => {\r\n                                setAddNote(true);\r\n                                setOpenNotes(false);\r\n                            }}\r\n                            sx={{ marginRight: '20px', marginBottom: '20px' }}\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                        >\r\n                            Add note\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleClose();\r\n                            }}\r\n                            sx={{ marginRight: '20px', marginBottom: '20px' }}\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            // color='red'\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                {openNotes && !addNote && (\r\n                    <DialogContent>\r\n                        {notes.map((item) => (\r\n                            <Box mt={3} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                                <Paper elevation={3} style={{ padding: '5px', maxWidth: '600px', width: '100%' }}>\r\n                                    <TextareaAutosize\r\n                                        id=\"note\"\r\n                                        name=\"note\"\r\n                                        minRows={4}\r\n                                        label=\"Enter feedback\"\r\n                                        aria-label=\"text area\"\r\n                                        rowsMin={4}\r\n                                        placeholder=\"Start typing here...\"\r\n                                        value={item.note}\r\n                                        // onChange={formik.handleChange}\r\n                                        style={{\r\n                                            width: '100%',\r\n                                            resize: 'vertical',\r\n                                            marginBottom: '10px',\r\n                                            border: '2px solid #2196f3',\r\n                                            borderRadius: '10px',\r\n                                            padding: '10px'\r\n                                        }}\r\n                                    />\r\n                                    <DialogActions sx={{ pr: 2.5 }}>\r\n                                        {loader ? (\r\n                                            <Button variant=\"contained\" size=\"small\">\r\n                                                <Oval\r\n                                                    ariaLabel=\"loading-indicator\"\r\n                                                    height={20}\r\n                                                    width={20}\r\n                                                    strokeWidth={5}\r\n                                                    strokeWidthSecondary={1}\r\n                                                    color=\"blue\"\r\n                                                    secondaryColor=\"white\"\r\n                                                />\r\n                                            </Button>\r\n                                        ) : (\r\n                                            <>\r\n                                                <Button\r\n                                                    sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                                                    onClick={() => {\r\n                                                        dispatch(deleteNote({ noteId: item.id, handleClose: handleClose }));\r\n                                                    }}\r\n                                                    color=\"secondary\"\r\n                                                >\r\n                                                    Delete\r\n                                                </Button>\r\n\r\n                                                {/* <Button variant=\"contained\" size=\"small\" onClick={formik.handleSubmit}>\r\n                                                    {feedbackText == '' ? 'Add' : 'Update'}\r\n                                                </Button> */}\r\n                                            </>\r\n                                        )}\r\n                                    </DialogActions>\r\n                                </Paper>\r\n                            </Box>\r\n                        ))}\r\n                    </DialogContent>\r\n                )}\r\n\r\n                {addNote && !openNotes && (\r\n                    <DialogContent>\r\n                        <form onSubmit={noteFormik.handleSubmit}>\r\n                            <TextareaAutosize\r\n                                id=\"note\"\r\n                                name=\"note\"\r\n                                minRows={4}\r\n                                label=\"Write your note here\"\r\n                                aria-label=\"text area\"\r\n                                rowsMin={4}\r\n                                placeholder=\"Start typing here...\"\r\n                                value={noteFormik.values.feedbackText}\r\n                                onChange={noteFormik.handleChange}\r\n                                // onError={()=>}\r\n                                style={{\r\n                                    width: '100%',\r\n                                    resize: 'vertical',\r\n                                    marginBottom: '10px',\r\n                                    border: '2px solid #2196f3',\r\n                                    borderRadius: '10px',\r\n                                    padding: '10px'\r\n                                }}\r\n                            />\r\n                        </form>\r\n                        <DialogActions sx={{ pr: 2.5 }}>\r\n                            {loader ? (\r\n                                <Button variant=\"contained\" size=\"small\">\r\n                                    <Oval\r\n                                        ariaLabel=\"loading-indicator\"\r\n                                        height={20}\r\n                                        width={20}\r\n                                        strokeWidth={5}\r\n                                        strokeWidthSecondary={1}\r\n                                        color=\"blue\"\r\n                                        secondaryColor=\"white\"\r\n                                    />\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button\r\n                                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                                        onClick={() => {\r\n                                            setAddNote(false);\r\n                                            setOpenNotes(true);\r\n                                        }}\r\n                                        color=\"secondary\"\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n\r\n                                    <Button variant=\"contained\" size=\"small\" onClick={noteFormik.handleSubmit}>\r\n                                        {'Add'}\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n                        </DialogActions>\r\n                    </DialogContent>\r\n                )}\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip,\r\n    Typography,\r\n    Menu,\r\n    MenuItem,\r\n    Link\r\n} from '@mui/material';\r\nimport BlockIcon from '@mui/icons-material/Block';\r\nimport NoteIcon from '@mui/icons-material/Note';\r\nimport ContentCopyRoundedIcon from '@mui/icons-material/ContentCopyRounded';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport DeleteUserDialog from './DeleteUserDialog';\r\nimport AddUpdateNoteDialog from './AddUpdateNote';\r\nimport moment from 'moment';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n// import IconButton from '@mui/material/IconButton';\r\n// import Tooltip from '@mui/material/Tooltip';\r\nimport { changeUserStatus } from 'redux/users/actions';\r\nimport { padding } from '@mui/system';\r\n\r\nconst UserTable = ({ usersList, page, limit, search, type }) => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const [open, setOpen] = useState(false);\r\n    const [openNotes, setOpenNotes] = useState(false);\r\n    const [notes, setNotes] = useState([]);\r\n    const [copied, setCopied] = useState(false);\r\n    const [userId, setUserId] = useState();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [selectedRow, setSelectedRow] = useState(null);\r\n    const handleClick = (event, row) => {\r\n        console.log('row');\r\n        console.log(row);\r\n        setSelectedRow(row);\r\n        setNotes(row.Notes);\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleCopyToClipboard = (address) => {\r\n        navigator.clipboard.writeText(address);\r\n        setCopied(true);\r\n    };\r\n    return (\r\n        <TableContainer>\r\n            <DeleteUserDialog setOpen={setOpen} open={open} userId={userId} page={page} limit={limit} search={search} type={type} />\r\n            <AddUpdateNoteDialog\r\n                openNotes={openNotes}\r\n                setOpenNotes={setOpenNotes}\r\n                notes={notes}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                type={type}\r\n                userId={userId}\r\n            />\r\n\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {/* <TableCell sx={{ pl: 3 }}>ID</TableCell> */}\r\n                        <TableCell sx={{ pl: 3 }}>Username</TableCell>\r\n                        <TableCell>Email</TableCell>\r\n                        <TableCell>Company name</TableCell>\r\n                        <TableCell>Payment method</TableCell>\r\n                        <TableCell>Projects</TableCell>\r\n                        {/* <TableCell>User Type</TableCell> */}\r\n                        {/* <TableCell>Status</TableCell> */}\r\n                        <TableCell>Created At</TableCell>\r\n                        <TableCell align=\"center\" sx={{ pr: 3 }}>\r\n                            Actions\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {usersList &&\r\n                        usersList.users &&\r\n                        usersList.users.length > 0 &&\r\n                        usersList.users.map((row, index) => (\r\n                            <>\r\n                                <TableRow hover key={row.id}>\r\n                                    {/* <TableCell\r\n                                        sx={{ pl: 3 }}\r\n                                        onClick={() => {\r\n                                            console.log('row', row);\r\n                                        }}\r\n                                    >\r\n                                        {row.id}{' '}\r\n                                    </TableCell> */}\r\n                                    <TableCell>{row?.firstName}</TableCell>\r\n                                    <TableCell>{row?.email}</TableCell>\r\n                                    <TableCell>{row?.companyName}</TableCell>\r\n                                    <TableCell>{row.paymentMethod}</TableCell>\r\n                                    <TableCell>{row.Projects.length}</TableCell>\r\n\r\n                                    <TableCell>{moment(row.createdAt).format('DD-MM-YYYY')}</TableCell>\r\n\r\n                                    <TableCell align=\"center\" sx={{ pr: 3 }}>\r\n                                        {/* <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                            <Tooltip placement=\"top\" title={row.isActive ? 'Block' : 'Unblock'}>\r\n                                                <IconButton\r\n                                                    disabled={row.isRestricted}\r\n                                                    color={row.isActive ? 'primary' : 'error'}\r\n                                                    aria-label=\"delete\"\r\n                                                    size=\"large\"\r\n                                                    onClick={() => {\r\n                                                        dispatch(\r\n                                                            changeUserStatus({\r\n                                                                id: row.id,\r\n                                                                page: page,\r\n                                                                limit: limit,\r\n                                                                search: search,\r\n                                                                type: type\r\n                                                            })\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    <BlockIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                            <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                <IconButton\r\n                                                    color=\"primary\"\r\n                                                    sx={{\r\n                                                        color: theme.palette.orange.dark,\r\n                                                        borderColor: theme.palette.orange.main,\r\n                                                        '&:hover ': { background: theme.palette.orange.light }\r\n                                                    }}\r\n                                                    size=\"large\"\r\n                                                    onClick={() => {\r\n                                                        setOpen(true);\r\n                                                        setUserId(row.id);\r\n                                                    }}\r\n                                                >\r\n                                                    <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Stack> */}\r\n                                        <IconButton>\r\n                                            <MoreVertIcon\r\n                                                fontSize=\"large\"\r\n                                                color=\"black\"\r\n                                                aria-controls=\"menu-friend-card\"\r\n                                                aria-haspopup=\"true\"\r\n                                                sx={{ opacity: 1.6 }}\r\n                                                onClick={(e) => handleClick(e, row)}\r\n                                            />\r\n                                        </IconButton>\r\n                                        <Menu\r\n                                            id=\"menu-simple-card\"\r\n                                            anchorEl={anchorEl}\r\n                                            keepMounted\r\n                                            open={Boolean(anchorEl)}\r\n                                            onClose={handleClose}\r\n                                            variant=\"selectedMenu\"\r\n                                            anchorOrigin={{\r\n                                                vertical: 'left',\r\n                                                horizontal: 'left'\r\n                                            }}\r\n                                            transformOrigin={{\r\n                                                vertical: 'top',\r\n                                                horizontal: 'right'\r\n                                            }}\r\n                                            sx={{ padding: '0px 8px', boxShadow: 'none' }}\r\n                                            className=\"customMenuClass\"\r\n                                        >\r\n                                            {/* <Stack\r\n                                                direction=\"column\"\r\n                                                justifyContent=\"center\"\r\n                                                alignItems=\"center\"\r\n                                                gap={'5px'}\r\n                                                sx={{ padding: '0px 8px' }}\r\n                                            > */}\r\n                                            <MenuItem\r\n                                                onClick={() => {\r\n                                                    setOpenNotes(true);\r\n                                                    setUserId(selectedRow.id);\r\n                                                }}\r\n                                            >\r\n                                                <div className=\"actionItem\">\r\n                                                    <IconButton\r\n                                                        disabled={selectedRow?.isRestricted}\r\n                                                        color={selectedRow?.isActive ? 'primary' : 'error'}\r\n                                                        aria-label=\"delete\"\r\n                                                        size=\"large\"\r\n                                                        sx={{ padding: '0px' }}\r\n                                                    >\r\n                                                        <NoteIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                    <p>Notes</p>\r\n                                                </div>\r\n                                            </MenuItem>\r\n                                            <MenuItem\r\n                                                onClick={() => {\r\n                                                    dispatch(\r\n                                                        changeUserStatus({\r\n                                                            id: selectedRow.id,\r\n                                                            page: page,\r\n                                                            limit: limit,\r\n                                                            search: search,\r\n                                                            type: type\r\n                                                        })\r\n                                                    );\r\n                                                    handleClose();\r\n                                                }}\r\n                                            >\r\n                                                {/* <Tooltip placement=\"top\" title={selectedRow?.isActive ? 'Block' : 'Unblock'}> */}\r\n                                                <div className=\"actionItem\">\r\n                                                    <IconButton\r\n                                                        disabled={selectedRow?.isRestricted}\r\n                                                        color={selectedRow?.isActive ? 'primary' : 'error'}\r\n                                                        aria-label=\"delete\"\r\n                                                        size=\"large\"\r\n                                                        sx={{ padding: '0px' }}\r\n                                                    >\r\n                                                        <BlockIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                    <p>{selectedRow?.isActive ? 'Block' : 'Unblock'}</p>\r\n                                                </div>\r\n                                                {/* </Tooltip> */}\r\n                                                {/* <Tooltip placement=\"top\" title=\"Delete\"> */}\r\n                                            </MenuItem>\r\n                                            <MenuItem\r\n                                                onClick={() => {\r\n                                                    setOpen(true);\r\n                                                    setUserId(selectedRow.id);\r\n                                                    handleClose();\r\n                                                }}\r\n                                            >\r\n                                                <div className=\"actionItem\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        sx={{\r\n                                                            color: theme.palette.orange.dark,\r\n                                                            borderColor: theme.palette.orange.main,\r\n                                                            '&:hover ': { background: theme.palette.orange.light },\r\n                                                            padding: '0px'\r\n                                                        }}\r\n                                                        size=\"large\"\r\n                                                    >\r\n                                                        <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                    <p>Delete</p>\r\n                                                </div>\r\n                                                {/* </Tooltip> */}\r\n                                            </MenuItem>\r\n                                        </Menu>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default UserTable;\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, MenuItem } from '@mui/material';\r\n\r\n// animation\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nimport { addGuestUser } from '../../../../redux/users/actions';\r\n\r\nexport default function AddGuestUserDialog({ open, setOpen,page,limit,search ,type}) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const validationSchema = Yup.object({\r\n        walletAddress: Yup.string().required('Wallet Address is required!').min(42,\"Invalid Wallet Address\").max(42,\"Invalid Wallet Address\")\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            walletAddress: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            console.log(\"values\",formik.values)\r\n            dispatch(\r\n                addGuestUser({\r\n                    walletAddress: values.walletAddress,\r\n                    search: search,\r\n                    page: page,\r\n                    limit: limit,\r\n                    type:type,\r\n                    handleClose: handleClose,\r\n                    \r\n                })\r\n            );\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className=\"responsiveDialog\"\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Add Guest User</DialogTitle>\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <TextField\r\n                            sx={{ marginTop: '25px' }}\r\n                            id=\"walletAddress\"\r\n                            name=\"walletAddress\"\r\n                            label=\"Enter Wallet Address\"\r\n                            value={formik.values.walletAddress}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.walletAddress && Boolean(formik.errors.walletAddress)}\r\n                            helperText={formik.touched.walletAddress && formik.errors.walletAddress}\r\n                            fullWidth\r\n                            autoComplete=\"given-name\"\r\n                        />\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={() => {\r\n                            handleClose();\r\n                        }}\r\n                        color=\"secondary\"\r\n                    >\r\n                        <FormattedMessage id=\"cancel\" />\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            formik.handleSubmit();\r\n                        }}\r\n                    >\r\n                        Add Guest User\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, MenuItem } from '@mui/material';\r\n\r\n// animation\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nimport { addRestrictedUser } from '../../../../redux/users/actions';\r\n\r\nexport default function AddRestrictedUserDialog({ open, setOpen,page,limit,search, type}) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const validationSchema = Yup.object({\r\n        walletAddress: Yup.string().required('Wallet Address is required!').min(42,\"Invalid Wallet Address\").max(42,\"Invalid Wallet Address\")\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            walletAddress: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n         \r\n            dispatch(\r\n                addRestrictedUser({\r\n                    walletAddress: values.walletAddress,\r\n                    search: search,\r\n                    page: page,\r\n                    limit: limit,\r\n                    type:type,\r\n                    handleClose: handleClose,\r\n                    \r\n                })\r\n            );\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className=\"responsiveDialog\"\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Add Restricted User</DialogTitle>\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <TextField\r\n                            sx={{ marginTop: '25px' }}\r\n                            id=\"walletAddress\"\r\n                            name=\"walletAddress\"\r\n                            label=\"Enter Wallet Address\"\r\n                            value={formik.values.walletAddress}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.walletAddress && Boolean(formik.errors.walletAddress)}\r\n                            helperText={formik.touched.walletAddress && formik.errors.walletAddress}\r\n                            fullWidth\r\n                            autoComplete=\"given-name\"\r\n                        />\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={() => {\r\n                            handleClose();\r\n                        }}\r\n                        color=\"secondary\"\r\n                    >\r\n                        <FormattedMessage id=\"cancel\" />\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            formik.handleSubmit();\r\n                        }}\r\n                    >\r\n                        Add To Black List\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { OutlinedInput, InputAdornment, Button, Grid, Typography, Pagination, Menu, MenuItem, TextField } from '@mui/material';\r\nimport UserTable from './component/userTable';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport AddGuestUserDialog from './component/AddGuestUserDialog';\r\nimport AddRestrictedUserDialog from './component/AddRestrictedUserDialog';\r\nimport { getAllUsers } from '../../../redux/users/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: 'All Users'\r\n    },\r\n    {\r\n        value: 'regularUser',\r\n        label: 'Regular User List'\r\n    },\r\n    {\r\n        value: 'whiteListUser',\r\n        label: 'White List'\r\n    },\r\n    {\r\n        value: 'blackListUser',\r\n        label: 'Black List'\r\n    }\r\n];\r\n\r\nconst Users = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const usersList = useSelector((state) => state.users.usersList);\r\n    const [open, setOpen] = useState(false);\r\n    const [openRestricted, setRestrictedOpen] = useState(false);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [type, setType] = useState('all');\r\n\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n    };\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllUsers({\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                type: type\r\n            })\r\n        );\r\n    }, [search, page, limit, type]);\r\n\r\n    return (\r\n        <>\r\n            <AddGuestUserDialog setOpen={setOpen} open={open} search={search} page={page} limit={limit} type={type} />\r\n            <AddRestrictedUserDialog\r\n                setOpen={setRestrictedOpen}\r\n                open={openRestricted}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                type={type}\r\n            />\r\n            <HeadingCard title=\"Users\" />\r\n\r\n            <MainCard\r\n                title={\r\n                    <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            {' '}\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                                sx={{ height: '40px', width: '100%' }}\r\n                                className=\"customOutlinedInput\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            {/* <TextField\r\n                                className=\"selectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Type\"\r\n                                value={type}\r\n                                onChange={handleType}\r\n                                sx={{ height: '40px' }}\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField> */}\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            {/* <Button\r\n                                sx={{\r\n                                    ':hover': {\r\n                                        boxShadow: 'none'\r\n                                    },\r\n                                    marginRight: '10px'\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={() => {\r\n                                    setOpen(true);\r\n                                }}\r\n                            >\r\n                                Add Guest User\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    ':hover': {\r\n                                        boxShadow: 'none'\r\n                                    }\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={() => {\r\n                                    setRestrictedOpen(true);\r\n                                }}\r\n                            >\r\n                                Restrict User\r\n                            </Button> */}\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                {usersList && usersList.users && usersList.users.length > 0 ? (\r\n                    <>\r\n                        <UserTable usersList={usersList && usersList} page={page} limit={limit} search={search} type={type} />\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                                <Grid item>\r\n                                    <Pagination\r\n                                        color=\"primary\"\r\n                                        showFirstButton\r\n                                        showLastButton\r\n                                        page={page}\r\n                                        count={usersList && usersList.pages}\r\n                                        onChange={(event, newPage) => {\r\n                                            setPage(newPage);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        sx={{ color: theme.palette.grey[900] }}\r\n                                        color=\"secondary\"\r\n                                        endIcon={<ExpandMoreRoundedIcon />}\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        {limit} Rows\r\n                                    </Button>\r\n                                    <Menu\r\n                                        id=\"menu-user-list-style1\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleClose}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem\r\n                                            value={10}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            10 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={25}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            25 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={50}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            50 Rows{' '}\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Users;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69 16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z\"\n}), 'Block');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m22 10-6-6H4c-1.1 0-2 .9-2 2v12.01c0 1.1.9 1.99 2 1.99l16-.01c1.1 0 2-.89 2-1.99v-8zm-7-4.5 5.5 5.5H15V5.5z\"\n}), 'Note');\n\nexports.default = _default;","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getInputAdornmentUtilityClass(slot) {\n  return generateUtilityClass('MuiInputAdornment', slot);\n}\nconst inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);\nexport default inputAdornmentClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport capitalize from '../utils/capitalize';\nimport Typography from '../Typography';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport useFormControl from '../FormControl/useFormControl';\nimport styled from '../styles/styled';\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from './inputAdornmentClasses';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\n\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'flex',\n  height: '0.01em',\n  // Fix IE11 flexbox alignment. To remove at some point.\n  maxHeight: '2em',\n  alignItems: 'center',\n  whiteSpace: 'nowrap',\n  color: theme.palette.action.active\n}, ownerState.variant === 'filled' && {\n  // Styles applied to the root element if `variant=\"filled\"`.\n  [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n    marginTop: 16\n  }\n}, ownerState.position === 'start' && {\n  // Styles applied to the root element if `position=\"start\"`.\n  marginRight: 8\n}, ownerState.position === 'end' && {\n  // Styles applied to the root element if `position=\"end\"`.\n  marginLeft: 8\n}, ownerState.disablePointerEvents === true && {\n  // Styles applied to the root element if `disablePointerEvents={true}`.\n  pointerEvents: 'none'\n}));\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n\n  const {\n    children,\n    className,\n    component = 'div',\n    disablePointerEvents = false,\n    disableTypography = false,\n    position,\n    variant: variantProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  const ownerState = _extends({}, props, {\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, _extends({\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref\n    }, other, {\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"text.secondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ?\n        /*#__PURE__*/\n\n        /* notranslate needed while Google Translate will not fix zero-width space issue */\n\n        /* eslint-disable-next-line react/no-danger */\n        _jsx(\"span\", {\n          className: \"notranslate\",\n          dangerouslySetInnerHTML: {\n            __html: '&#8203;'\n          }\n        }) : null, children]\n      })\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;"],"names":["HeadingCard","forwardRef","title","role","value","setValue","options","marginTop","theme","useTheme","sx","marginBottom","spacing","gridSpacing","border","borderColor","palette","primary","background","default","p","pl","container","alignItems","justifyContent","item","variant","fontWeight","color","undefined","id","select","onChange","e","target","width","height","map","option","label","Transition","props","ref","Slide","direction","DeleteUserDialog","open","setOpen","userId","page","limit","search","type","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","Typography","component","DialogActions","pr","Button","error","dark","onClick","size","deleteUser","AddUpdateNote","openNotes","setOpenNotes","notes","testimonialId","testimonial","feedbackText","useState","loader","setLoader","addNote","setAddNote","console","log","validationSchema","Yup","note","required","formik","useFormik","enableReinitialize","initialValues","clientName","clientDesignation","clientImageUrl","onSubmit","values","addTestimonial","updateTestimonial","noteFormik","addNoteAction","resetForm","className","Grid","display","flexDirection","marginRight","Box","mt","Paper","elevation","style","padding","maxWidth","TextareaAutosize","name","minRows","rowsMin","placeholder","resize","borderRadius","ariaLabel","strokeWidth","strokeWidthSecondary","secondaryColor","deleteNote","noteId","handleSubmit","handleChange","usersList","useNavigate","setNotes","setUserId","anchorEl","setAnchorEl","selectedRow","setSelectedRow","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","users","length","row","index","hover","firstName","email","companyName","paymentMethod","Projects","moment","createdAt","format","IconButton","MoreVert","fontSize","opacity","event","Notes","currentTarget","handleClick","Menu","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","boxShadow","MenuItem","disabled","isRestricted","isActive","Note","changeUserStatus","Block","orange","main","light","DeleteOutlineOutlined","AddGuestUserDialog","walletAddress","min","max","addGuestUser","autoComplete","TextField","touched","errors","helperText","fullWidth","AddRestrictedUserDialog","addRestrictedUser","useSelector","state","openRestricted","setRestrictedOpen","setSearch","setPage","setLimit","useEffect","getAllUsers","MainCard","xs","OutlinedInput","startAdornment","InputAdornment","position","stroke","textAlign","content","Pagination","showFirstButton","showLastButton","count","pages","newPage","grey","endIcon","ExpandMoreRounded","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","jsx","d","getInputAdornmentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","InputAdornmentRoot","styled","overridesResolver","styles","ownerState","root","capitalize","disablePointerEvents","_extends","maxHeight","whiteSpace","action","active","inputAdornmentClasses","marginLeft","pointerEvents","React","inProps","useThemeProps","children","disableTypography","variantProp","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","hiddenLabel","classes","slots","composeClasses","useUtilityClasses","_jsx","FormControlContext","as","clsx","_jsxs","dangerouslySetInnerHTML","__html"],"sourceRoot":""}