{"version":3,"file":"static/js/417.5864bb3e.chunk.js","mappings":"2TAkGA,UAzFgB,YACEA,EAAAA,EAAAA,MACGC,EAAAA,EAAAA,MADjB,IAEMC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KACMC,GADN,MACiBC,EAAAA,EAAAA,QAEjBC,EAAAA,EAAAA,YAAU,cAAU,IAEpB,IAAMC,EAAkBC,EAAAA,KAAaC,MAAM,CACvCC,IAAKF,EAAAA,OAGHG,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXH,IAAK,IAETI,oBAAoB,EACpBC,iBAAkBR,EAClBS,SAAS,WAAD,wBAAE,WAAOC,GAAP,qGAAF,mDAAC,KAGb,OACI,+BACI,SAAC,IAAD,CACIC,OACI,UAAC,IAAD,CAAYC,QAAQ,KAAKC,GAAI,CAAEC,WAAY,IAAKC,MAAO,aAAvD,2CACmCtB,EAASuB,MAAMC,aAGtDC,WACI,SAAC,IAAD,CACIN,QAAQ,YACRO,KAAK,QACLC,QAAS,WACLvB,EAAS,YAJjB,kBAUJwB,SAAS,EAjBb,UAmBI,kBAAMC,aAAa,MAAMb,SAAUL,EAAOmB,aAA1C,WACI,SAAC,KAAD,CAAMC,WAAS,EAACC,eAAe,SAASC,MAAO,CAAEC,QAAS,QAA1D,UACI,SAAC,IAAD,CACId,GAAI,CAAEe,UAAW,QACjBC,GAAG,MACHC,KAAK,MACLC,MAAM,oBACNC,MAAO5B,EAAOM,OAAOP,IACrB8B,SAAU7B,EAAO8B,aACjBC,MAAO/B,EAAOgC,QAAQjC,KAAOkC,QAAQjC,EAAOkC,OAAOnC,KACnDoC,WAAYnC,EAAOgC,QAAQjC,KAAOC,EAAOkC,OAAOnC,IAChDqC,WAAS,EACTlB,aAAa,kBAGrB,SAAC,KAAD,CAAMmB,UAAU,SAASd,QAAS,EAAlC,UACI,SAAC,IAAD,CACIf,QAAQ,YACRO,KAAK,SACLC,QAAS,WACAxB,GACDQ,EAAOmB,gBALnB,SASK3B,GACG,SAAC8C,KAAD,CACIC,UAAU,oBACVC,OAAQ,GACRC,MAAO,GACPC,YAAa,EACbC,qBAAsB,EACtBhC,MAAM,OACNiC,eAAe,UAGnB","sources":["views/pages/theater/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography,TextField  } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useLocation } from 'react-router-dom';\r\nconst Theater = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const [loader, setLoader] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {}, []);\r\n\r\n    const uploadNftSchema = Yup.object().shape({\r\n        url: Yup.mixed()\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            url: []\r\n        },\r\n        enableReinitialize: true,\r\n        validationSchema: uploadNftSchema,\r\n        onSubmit: async (values) => {}\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <MainCard\r\n                title={\r\n                    <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue' }}>\r\n                        Theater Management of Event : {location.state.eventName}\r\n                    </Typography>\r\n                }\r\n                secondary={\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            navigate('/events');\r\n                        }}\r\n                    >\r\n                        back\r\n                    </Button>\r\n                }\r\n                content={false}\r\n            >\r\n                <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                    <Grid container justifyContent=\"center\" style={{ padding: '20px' }}>\r\n                        <TextField\r\n                            sx={{ marginTop: '25px' }}\r\n                            id=\"url\"\r\n                            name=\"url\"\r\n                            label=\"Enter URL Address\"\r\n                            value={formik.values.url}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.url && Boolean(formik.errors.url)}\r\n                            helperText={formik.touched.url && formik.errors.url}\r\n                            fullWidth\r\n                            autoComplete=\"given-name\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid textAlign=\"center\" padding={2}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"medium\"\r\n                            onClick={() => {\r\n                                if (!loader) {\r\n                                    formik.handleSubmit();\r\n                                }\r\n                            }}\r\n                        >\r\n                            {loader ? (\r\n                                <Oval\r\n                                    ariaLabel=\"loading-indicator\"\r\n                                    height={20}\r\n                                    width={20}\r\n                                    strokeWidth={5}\r\n                                    strokeWidthSecondary={1}\r\n                                    color=\"blue\"\r\n                                    secondaryColor=\"white\"\r\n                                />\r\n                            ) : (\r\n                                'Add Content'\r\n                            )}\r\n                        </Button>\r\n                    </Grid>\r\n                </form>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Theater;\r\n"],"names":["useTheme","useDispatch","location","useLocation","useState","loader","navigate","useNavigate","useEffect","uploadNftSchema","Yup","shape","url","formik","useFormik","initialValues","enableReinitialize","validationSchema","onSubmit","values","title","variant","sx","fontWeight","color","state","eventName","secondary","size","onClick","content","autoComplete","handleSubmit","container","justifyContent","style","padding","marginTop","id","name","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","fullWidth","textAlign","Oval","ariaLabel","height","width","strokeWidth","strokeWidthSecondary","secondaryColor"],"sourceRoot":""}