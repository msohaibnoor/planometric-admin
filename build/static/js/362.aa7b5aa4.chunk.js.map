{"version":3,"file":"static/js/362.aa7b5aa4.chunk.js","mappings":"kUAyCkBA,EAAAA,EAAAA,KAAO,SAACC,GAAD,MAAY,CACjCC,MAAO,CACH,oCAAqC,CACjCC,MAAOF,EAAMG,QAAQC,KAAKC,YAGlCC,OAAQ,CACJC,MAAO,OACPC,OAAQ,OACRC,SAAU,c,qBCiElB,EA1Gc,WACV,IAAMC,GAAQC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,SAChD,GAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KASMC,EAAU,mCAAG,2FACVJ,GAAqC,QAAzB,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMK,KAAKC,MAAM,KAAK,IADpB,uBAEXH,GAAa,GAFF,2CAMLI,EAAW,IAAIC,UACZC,OAAO,OAAQT,GAPb,SAQYU,IAAAA,KAAA,UAAcC,EAAAA,EAAd,oBAAyCJ,EAAU,CACtEK,QAAS,CACLC,cAAe,UAAYlB,KAVxB,gBAQHmB,EARG,EAQHA,KAKRC,EAAAA,GAAAA,QAAcD,EAAKA,KAAKE,SACxBf,EAAQ,MAdG,kDAgBXgB,QAAQC,IAAR,MAhBW,0DAAH,qDAoBVC,EAAc,mCAAG,mCAAAC,EAAA,0FAEQV,IAAAA,IAAA,UAAaC,EAAAA,EAAb,uEAA2F,CAC9GU,aAAc,OACdT,QAAS,CACLC,cAAc,UAAD,OAAYlB,MALlB,OAYf,IAVM2B,EAFS,OASTC,EAAiBC,KAAI,OAACF,QAAD,IAACA,GAAD,UAACA,EAAUR,YAAX,iBAAC,EAAgBA,YAAjB,aAAC,EAAsBW,SAC5CC,EAAc,IAAIC,MAAMJ,EAAeK,QAEpCC,EAAI,EAAGA,EAAIN,EAAeK,OAAQC,IACvCH,EAAYG,GAAKN,EAAeO,WAAWD,GAEzCE,EAAY,IAAIC,WAAWN,GAC3BO,EAAO,IAAIC,KAAK,CAACH,GAAY,CAAEI,KAAM,oBACrCC,EAAMC,OAAOC,IAAIC,gBAAgBN,IACjCb,EAAIoB,SAASC,cAAc,MAC/BC,MAAMC,QAAU,OAClBvB,EAAEwB,KAAOR,EACThB,EAAEyB,SAAWvB,EAASR,KAAKA,KAAKgC,SAChCN,SAASO,KAAKC,YAAY5B,GAC1BA,EAAE6B,QACFZ,OAAOC,IAAIY,gBAAgBd,GAxBZ,kDA0BfrB,EAAAA,GAAAA,MAAY,qCACZE,QAAQkC,MAAM,mCAAd,MA3Be,0DAAH,qDA8BpB,OACI,UAACC,EAAA,GAAD,CAAMT,QAAQ,OAAOU,eAAgB,SAAUC,WAAY,SAAUC,IAAK,OAA1E,WAEI,6BACI,uDACA,SAAC,IAAD,CACIC,GAAI,CAAEC,UAAW,QACjBC,GAAG,gBACHrD,KAAK,gBACLsD,MAAM,gBACNxB,KAAK,OAMLgB,MAAOjD,EACP0D,aAAa,aACbC,SAAS,EACTC,SA7EG,SAACC,GAAO,IAAD,IACgC,QAAlD,UAAAA,EAAEC,cAAcC,MAAM,UAAtB,mBAA0B5D,YAA1B,eAAgCC,MAAM,KAAK,MAG/CL,EAAQ8D,EAAEC,cAAcC,MAAM,IAC9B9D,GAAa,KAyED+D,WAAW,4BAGf,0BACI,SAACC,EAAA,EAAD,CACIC,QAAQ,YACRC,KAAK,QAILC,QAASlE,EACToD,GAAI,CAAEC,UAAW,QAPrB,0BAaR,SAACU,EAAA,EAAD,CAAQC,QAAQ,YAAYC,KAAK,QAAQC,QAASnD,EAAlD","sources":["views/pages/grasshopper/components/FileInput.js","views/pages/grasshopper/index.js"],"sourcesContent":["import { useRef, useState } from 'react';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\nimport { Box, ButtonBase, TextField } from '@mui/material';\r\n\r\nconst FileInput = ({ label, onChange, error }) => {\r\n    const ref = useRef();\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const [attachment, setAttachment] = useState(null);\r\n\r\n    const handleChange = (event) => {\r\n        const files = Array.from(event.target.files);\r\n        const [file] = files;\r\n        setAttachment(file);\r\n        if (!!onChange) onChange({ target: { value: file } });\r\n    };\r\n\r\n    return (\r\n        <Box position=\"relative\" height={98} color={!!error ? theme.palette.error.main : theme.palette.background.paper} borderBottom={4}>\r\n            <Box position=\"absolute\" top={0} bottom={0} left={0} right={0} mx={2}>\r\n                <TextField\r\n                    variant=\"standard\"\r\n                    className={classes.field}\r\n                    InputProps={{ disableUnderline: true }}\r\n                    margin=\"normal\"\r\n                    fullWidth\r\n                    // disabled\r\n                    label={label}\r\n                    value={attachment?.name || ''}\r\n                    error={!!error}\r\n                    helperText={error?.message || ' '}\r\n                />\r\n            </Box>\r\n            <ButtonBase className={classes.button} component=\"label\" onKeyDown={(e) => e.keyCode === 32 && ref.current?.click()}>\r\n                <input ref={ref} type=\"file\" accept=\"image/*\" hidden onChange={handleChange} />\r\n            </ButtonBase>\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst useStyles = styled((theme) => ({\r\n    field: {\r\n        '& .MuiFormLabel-root.Mui-disabled': {\r\n            color: theme.palette.text.secondary\r\n        }\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden'\r\n    }\r\n}));\r\n\r\nexport default FileInput;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { API_URL } from '../../../utils/axios';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, MenuItem, Input, Grid } from '@mui/material';\r\nimport FileInput from './components/FileInput';\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst index = () => {\r\n    const token = useSelector((state) => state.auth.token);\r\n    const [file, setFile] = useState(null);\r\n    const [fileError, setFileError] = useState(false);\r\n    const handleFile = (e) => {\r\n        if (e.currentTarget.files[0]?.name?.split('.')[1] !== 'gh') {\r\n            return;\r\n        }\r\n        setFile(e.currentTarget.files[0]);\r\n        setFileError(false);\r\n    };\r\n\r\n    const fileUpload = async () => {\r\n        if (!file || file?.name.split('.')[1] !== 'gh') {\r\n            setFileError(true);\r\n            return;\r\n        }\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            const { data } = await axios.post(`${API_URL}/admin/gh-upload`, formData, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n            toast.success(data.data.message);\r\n            setFile(null);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const handleDownload = async () => {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/admin/files/download-grasshopper-script?fileToDownload=grasshopper`, {\r\n                responseType: 'json',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}` // Replace YOUR_BEARER_TOKEN with the actual token\r\n                }\r\n            });\r\n           \r\n            const byteCharacters = atob(response?.data?.data?.pdfFile);\r\n            const byteNumbers = new Array(byteCharacters.length);\r\n\r\n            for (let i = 0; i < byteCharacters.length; i++) {\r\n                byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n            }\r\n            const byteArray = new Uint8Array(byteNumbers);\r\n            const blob = new Blob([byteArray], { type: 'application/pdf' });\r\n            const url = window.URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.style.display = 'none';\r\n            a.href = url;\r\n            a.download = response.data.data.fileName; \r\n            document.body.appendChild(a);\r\n            a.click();\r\n            window.URL.revokeObjectURL(url);\r\n        } catch (error) {\r\n            toast.error(\"Couldn't find the file on server!\");\r\n            console.error('Error downloading the .3dm file:', error);\r\n        }\r\n    };\r\n    return (\r\n        <Grid display=\"flex\" justifyContent={'center'} alignItems={'center'} gap={'30px'}>\r\n            {/* <FileInput label={'Select file'} onChange={handleFile} error={fileError} /> */}\r\n            <form>\r\n                <h1>Update Grasshopper script</h1>\r\n                <TextField\r\n                    sx={{ marginTop: '25px' }}\r\n                    id=\"walletAddress\"\r\n                    name=\"walletAddress\"\r\n                    label=\"Select script\"\r\n                    type=\"file\"\r\n                    // value={formik.values.walletAddress}\r\n                    // onChange={formik.handleChange}\r\n                    // error={formik.touched.walletAddress && Boolean(formik.errors.walletAddress)}\r\n                    // helperText={formik.touched.walletAddress && formik.errors.walletAddress}\r\n                    // fullWidth\r\n                    error={fileError}\r\n                    autoComplete=\"given-name\"\r\n                    focused={true}\r\n                    onChange={handleFile}\r\n                    helperText=\"only .gh files allowed\"\r\n                />\r\n\r\n                <div>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        // onClick={() => {\r\n                        //     formik.handleSubmit();\r\n                        // }}\r\n                        onClick={fileUpload}\r\n                        sx={{ marginTop: '25px' }}\r\n                    >\r\n                        Update\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n            <Button variant=\"contained\" size=\"large\" onClick={handleDownload}>\r\n                Download Current File\r\n            </Button>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default index;\r\n"],"names":["styled","theme","field","color","palette","text","secondary","button","width","height","overflow","token","useSelector","state","auth","useState","file","setFile","fileError","setFileError","fileUpload","name","split","formData","FormData","append","axios","API_URL","headers","Authorization","data","toast","message","console","log","handleDownload","a","responseType","response","byteCharacters","atob","pdfFile","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","blob","Blob","type","url","window","URL","createObjectURL","document","createElement","style","display","href","download","fileName","body","appendChild","click","revokeObjectURL","error","Grid","justifyContent","alignItems","gap","sx","marginTop","id","label","autoComplete","focused","onChange","e","currentTarget","files","helperText","Button","variant","size","onClick"],"sourceRoot":""}