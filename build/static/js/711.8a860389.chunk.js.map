{"version":3,"file":"static/js/711.8a860389.chunk.js","mappings":"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","sources":["utils/formatNumber.js","assets/images/icons/image-upload.svg","views/pages/marketPlace/nfts/component/quantitySelector.js","views/pages/marketPlace/nfts/component/addNft.js"],"sourcesContent":["import { replace } from 'lodash';\r\nimport numeral from 'numeral';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function fCurrency(number) {\r\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\r\n}\r\n\r\nexport function fPercent(number) {\r\n  return numeral(number / 100).format('0.0%');\r\n}\r\n\r\nexport function fNumber(number) {\r\n  return numeral(number).format();\r\n}\r\n\r\nexport function fShortenNumber(number) {\r\n  return replace(numeral(number).format('0.00a'), '.00', '');\r\n}\r\n\r\nexport function fData(number) {\r\n  return numeral(number).format('0.0 b');\r\n}\r\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgImageUpload(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 63,\n    height: 63,\n    viewBox: \"0 0 63 63\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.25 0H6.75C2.925 0 0 2.925 0 6.75V56.25C0 60.075 2.925 63 6.75 63H56.25C60.075 63 63 60.075 63 56.25V6.75C63 2.925 60.075 0 56.25 0ZM6.75 4.5H56.25C57.6 4.5 58.5 5.4 58.5 6.75V26.775L54.225 23.4C51.525 21.15 47.25 21.6 45 24.3L32.4 38.475L24.975 32.4C22.275 30.15 18 30.375 15.75 33.075L4.5 45.675V6.75C4.5 5.4 5.4 4.5 6.75 4.5ZM4.5 56.25V52.875L19.125 36.225C20.025 35.325 21.375 35.325 22.275 36L29.475 41.85L14.85 58.5H6.75C5.4 58.5 4.5 57.6 4.5 56.25ZM56.25 58.5H20.7L34.425 42.975L48.375 27.225C49.275 26.325 50.625 26.325 51.525 27L58.5 32.625V56.25C58.5 57.6 57.6 58.5 56.25 58.5ZM15.75 22.5C19.575 22.5 22.5 19.575 22.5 15.75C22.5 11.925 19.575 9 15.75 9C11.925 9 9 11.925 9 15.75C9 19.575 11.925 22.5 15.75 22.5ZM15.75 13.5C17.1 13.5 18 14.4 18 15.75C18 17.1 17.1 18 15.75 18C14.4 18 13.5 17.1 13.5 15.75C13.5 14.4 14.4 13.5 15.75 13.5Z\",\n    fill: \"#108DAA\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgImageUpload);\nexport default __webpack_public_path__ + \"static/media/image-upload.54137b053c15fea11a0932f712ddb0b6.svg\";\nexport { ForwardRef as ReactComponent };","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { IconButton, Typography, TextField } from '@mui/material';\r\n\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\nconst QuantitySelector = ({ formik, fileArray, index }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (value) => {\r\n        fileArray[index].quantity = value;\r\n        formik.setFieldValue('images', fileArray);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', marginRight: '10px' }}>\r\n                <Typography style={{ marginTop: '12px', marginRight: '5px' }}>Quantity : </Typography>\r\n\r\n                <TextField\r\n                \r\n                    type=\"number\"\r\n                    className=\"quantityField\"\r\n                    id=\"outlined-select-currency-native\"\r\n                    value={fileArray[index].quantity}\r\n                    onChange={(e) => {\r\n                        handleChange(e.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuantitySelector;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { fData } from '../../../../../utils/formatNumber';\r\nimport {\r\n    Grid,\r\n    Box,\r\n    Typography,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    ListItemSecondaryAction,\r\n    IconButton,\r\n    Button,\r\n    TextField,\r\n    MenuItem\r\n} from '@mui/material';\r\nimport { Icon } from '@iconify/react';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport clsx from 'clsx';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Oval } from 'react-loader-spinner';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { getAllBrandList, getAllCategoriesByBrand, getAllSubCategoriesByBrandAndCategory } from '../../../../../redux/marketPlace/actions';\r\nimport { addNft } from '../../../../../redux/nft/actions';\r\nimport QuantitySelector from './quantitySelector';\r\n\r\nconst AddNft = () => {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const brandArray = useSelector((state) => state.marketPlace.brandArray);\r\n    const categoryArray = useSelector((state) => state.marketPlace.categoryArray);\r\n    const subCategoryArray = useSelector((state) => state.marketPlace.subCategoryArray);\r\n    const [brand, setBrand] = useState(0);\r\n    const [category, setCategory] = useState(0);\r\n    const [subCategory, setSubCategory] = useState(0);\r\n    const [loader, setLoader] = useState(false);\r\n    const handleClose = () => {\r\n        formik.resetForm();\r\n        setLoader(false);\r\n        setUploadedImages([]);\r\n        setBrand(0);\r\n        setCategory(0);\r\n        setSubCategory(0);\r\n    };\r\n\r\n    const uploadNftSchema = Yup.object().shape({\r\n        images: Yup.mixed()\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            images: []\r\n        },\r\n        enableReinitialize: true,\r\n        validationSchema: uploadNftSchema,\r\n        onSubmit: async (values) => {\r\n            let checkFiles;\r\n            values.images.length > 0 &&\r\n                values.images.map((image) => {\r\n                    if (\r\n                        image.image.name.split('.').pop() == 'jpg' ||\r\n                        image.image.name.split('.').pop() == 'jpeg' ||\r\n                        image.image.name.split('.').pop() == 'png' ||\r\n                        image.image.name.split('.').pop() == 'gif'\r\n                    ) {\r\n                        checkFiles = true;\r\n                    } else {\r\n                        checkFiles = false;\r\n                    }\r\n                });\r\n            let filesArray =\r\n                values.images.length > 0 &&\r\n                values.images.map((image) => {\r\n                    return image.image;\r\n                });\r\n\r\n            let quantityCounter = 0;\r\n            let quantityValidator = true;\r\n            let quantityArray =\r\n                values.images.length > 0 &&\r\n                values.images.map((image) => {\r\n                    if (image.quantity < 1) {\r\n                        toast.error('NFT Quantity must be greater than zero');\r\n                        quantityValidator = false;\r\n                    } else {\r\n                        if (image.quantity < 1) {\r\n                            toast.error('NFT Quantity must be greater than zero');\r\n                            quantityValidator = false;\r\n                        } else {\r\n                            quantityCounter = parseInt(quantityCounter) + parseInt(image.quantity);\r\n                            return parseInt(image.quantity);\r\n                        }\r\n                    }\r\n                });\r\n\r\n            if (quantityValidator) {\r\n                if (checkFiles) {\r\n                    setLoader(true);\r\n                    dispatch(\r\n                        addNft({\r\n                            assets: filesArray,\r\n                            quantityArray: quantityArray,\r\n                            brandId: brand,\r\n                            categoryId: category,\r\n                            subCategoryId: subCategory,\r\n                            navigate: navigate,\r\n                            setLoader: setLoader,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                } else {\r\n                    toast.error('Upload the files with these extensions: PNG, JPG, GIF');\r\n                }\r\n            }\r\n        }\r\n    });\r\n    console.log(formik.values);\r\n    const hasFile = formik.values.images.length > 0;\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (file, index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleBrandChange = (event) => {\r\n        setBrand(event.target.value);\r\n    };\r\n    const handleCategoryChange = (event) => {\r\n        setCategory(event.target.value);\r\n    };\r\n    const handleSubCategoryChange = (event) => {\r\n        setSubCategory(event.target.value);\r\n    };\r\n    useEffect(() => {\r\n        dispatch(getAllBrandList());\r\n    }, []);\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllCategoriesByBrand({\r\n                brandId: brand\r\n            })\r\n        );\r\n    }, [brand]);\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllSubCategoriesByBrandAndCategory({\r\n                categoryId: category\r\n            })\r\n        );\r\n    }, [category]);\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={6}>\r\n                            <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue', paddingTop: '10px' }}>\r\n                                Add NFT\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{ textAlign: 'end' }}>\r\n                            <Button variant=\"contained\" size=\"small\" onClick={() => navigate(-1)} sx={{ marginRight: '10px' }}>\r\n                                Back\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                    <Grid container justifyContent=\"center\" style={{ padding: '20px' }}>\r\n                        <Grid item xs={12} sm={4} pt={4} pr={4}>\r\n                            <TextField\r\n                                className=\"brandSelectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Brand\"\r\n                                value={brand}\r\n                                onChange={handleBrandChange}\r\n                            >\r\n                                <MenuItem value={0}>Choose Brand</MenuItem>\r\n                                {brandArray &&\r\n                                    brandArray.brandList &&\r\n                                    brandArray.brandList.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} pt={4} pr={4}>\r\n                            <TextField\r\n                                className=\"brandSelectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Category\"\r\n                                value={category}\r\n                                onChange={handleCategoryChange}\r\n                            >\r\n                                <MenuItem value={0}>Choose Category</MenuItem>\r\n                                {categoryArray &&\r\n                                    categoryArray.categoryList &&\r\n                                    categoryArray.categoryList.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} pt={4} pr={4}>\r\n                            <TextField\r\n                                className=\"selectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Subcategory\"\r\n                                value={subCategory}\r\n                                onChange={handleSubCategoryChange}\r\n                            >\r\n                                <MenuItem value={0}>Choose Subcategory</MenuItem>\r\n                                {subCategoryArray &&\r\n                                    subCategoryArray.subCategoriesList &&\r\n                                    subCategoryArray.subCategoriesList.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                            </TextField>\r\n                        </Grid>\r\n\r\n                        <Grid item lg={12} mt={3}>\r\n                            <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                <div\r\n                                    className={clsx('dropZone', {\r\n                                        isDragActive: isDragActive,\r\n                                        isDragAccept: isDragAccept,\r\n                                        isDragReject: isDragReject\r\n                                    })}\r\n                                    {...getRootProps()}\r\n                                >\r\n                                    <input {...getInputProps()} />\r\n\r\n                                    <Grid container direction=\"column\">\r\n                                        <Box textAlign=\"center\" component=\"img\" alt=\"Select File\" src={UploadImage} sx={{ height: 60 }} />\r\n\r\n                                        <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                            <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                Drop your image or&nbsp;\r\n                                                <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                            </Typography>\r\n                                        </Box>\r\n                                    </Grid>\r\n                                </div>\r\n\r\n                                <List disablePadding className={clsx({ list: hasFile })}>\r\n                                    <AnimatePresence>\r\n                                        {formik.values.images &&\r\n                                            formik.values.images.map((file, index) => (\r\n                                                <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                                    <ListItemIcon>\r\n                                                        {/* <Icon icon={fileFill} width={32} height={32} /> */}\r\n                                                        <img\r\n                                                            src={URL.createObjectURL(file.image)}\r\n                                                            width={40}\r\n                                                            height={40}\r\n                                                            style={{ borderRadius: '50%', marginRight: '8px' }}\r\n                                                        />\r\n                                                    </ListItemIcon>\r\n                                                    <ListItemText\r\n                                                        primary={file.image.name ? file.image.name : ''}\r\n                                                        secondary={fData(file.image.size) ? fData(file.image.size) : ''}\r\n                                                        primaryTypographyProps={{\r\n                                                            variant: 'subtitle2'\r\n                                                        }}\r\n                                                    />\r\n                                                    <ListItemSecondaryAction style={{ display: 'flex' }}>\r\n                                                        <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n\r\n                                                        <IconButton\r\n                                                            color=\"error\"\r\n                                                            edge=\"end\"\r\n                                                            size=\"small\"\r\n                                                            onClick={() => handleRemoveFile(file.image, index)}\r\n                                                        >\r\n                                                            <Icon icon={closeFill} width={28} height={28} />\r\n                                                        </IconButton>\r\n                                                    </ListItemSecondaryAction>\r\n                                                </ListItem>\r\n                                            ))}\r\n                                    </AnimatePresence>\r\n                                </List>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid textAlign=\"center\" padding={2}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"medium\"\r\n                            onClick={() => {\r\n                                if (!loader) {\r\n                                    formik.handleSubmit();\r\n                                }\r\n                            }}\r\n                        >\r\n                            {loader ? (\r\n                                <Oval\r\n                                    ariaLabel=\"loading-indicator\"\r\n                                    height={20}\r\n                                    width={20}\r\n                                    strokeWidth={5}\r\n                                    strokeWidthSecondary={1}\r\n                                    color=\"blue\"\r\n                                    secondaryColor=\"white\"\r\n                                />\r\n                            ) : (\r\n                                'Add NFT'\r\n                            )}\r\n                        </Button>\r\n                    </Grid>\r\n                </form>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddNft;\r\n"],"names":["fData","number","numeral","format","formik","fileArray","index","useDispatch","style","display","marginRight","Typography","marginTop","TextField","type","className","id","value","quantity","onChange","e","target","setFieldValue","dispatch","navigate","useNavigate","brandArray","useSelector","state","marketPlace","categoryArray","subCategoryArray","useState","brand","setBrand","category","setCategory","subCategory","setSubCategory","loader","setLoader","handleClose","resetForm","setUploadedImages","uploadNftSchema","Yup","shape","images","useFormik","initialValues","enableReinitialize","validationSchema","onSubmit","values","length","map","image","checkFiles","name","split","pop","filesArray","quantityCounter","quantityValidator","quantityArray","toast","parseInt","addNft","assets","brandId","categoryId","subCategoryId","console","log","hasFile","uploadedImages","handleDrop","useCallback","acceptedFiles","newUploadedImages","acceptedFile","data","useDropzone","accept","onDrop","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","useEffect","getAllBrandList","getAllCategoriesByBrand","getAllSubCategoriesByBrandAndCategory","window","scrollTo","MainCard","title","Grid","container","spacing","gridSpacing","item","xs","variant","sx","fontWeight","color","paddingTop","textAlign","Button","size","onClick","content","autoComplete","handleSubmit","justifyContent","padding","sm","pt","pr","select","fullWidth","label","event","MenuItem","brandList","option","categoryList","subCategoriesList","lg","mt","clsx","direction","Box","component","alt","src","UploadImage","height","ml","md","Link","underline","List","disablePadding","list","AnimatePresence","file","ListItem","motion","ListItemIcon","URL","createObjectURL","width","borderRadius","ListItemText","primary","secondary","primaryTypographyProps","ListItemSecondaryAction","IconButton","edge","newFiles","splice","handleRemoveFile","icon","closeFill","ariaLabel","strokeWidth","strokeWidthSecondary","secondaryColor"],"sourceRoot":""}