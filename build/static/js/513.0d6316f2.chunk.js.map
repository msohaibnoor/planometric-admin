{"version":3,"file":"static/js/513.0d6316f2.chunk.js","mappings":"+TAAaA,EAAU,YCQjBC,EAAS,IAAIC,EAAAA,GAAOF,GA+BnB,IAAeG,EAAtB,WAmBI,WAAYC,EAAcC,EAAcC,EAAmBC,IAAgB,eAEvEC,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EACZG,KAAKF,UAAYA,EACjBE,KAAKD,QAAUA,EAxBvB,0CA2BI,SAAYE,EAAiBC,GACzBT,EAAOU,mBAAmBF,EAASD,KAAKF,UAAWI,OA5B3D,KAqCaE,EAAb,WAOI,WAAYC,IAAiB,gBACzBC,EAAAA,EAAAA,IAAeN,KAAM,WAAYK,GAAY,IAC7CL,KAAKO,MAAQ,GACbP,KAAKQ,YAAc,EACnBR,KAAKS,SAAW,IAAIC,WAAWL,GAXvC,iCAcI,WACI,OAAOM,EAAAA,EAAAA,IAAUX,KAAKO,SAf9B,kBAiBI,WAAuB,OAAOP,KAAKQ,cAjBvC,wBAmBI,SAAWI,GAGP,OAFAZ,KAAKO,MAAMM,KAAKD,GAChBZ,KAAKQ,aAAeI,EAAKE,OAClBF,EAAKE,SAtBpB,0BAyBI,SAAaC,GACT,OAAOf,KAAKgB,YAAWC,EAAAA,EAAAA,IAAOF,EAAOR,UA1B7C,wBA8BI,SAAWL,GACP,IAAIgB,GAAQC,EAAAA,EAAAA,IAASjB,GACfkB,EAAgBF,EAAMJ,OAASd,KAAKK,SAI1C,OAHIe,IACAF,GAAQD,EAAAA,EAAAA,IAAO,CAAEC,EAAOlB,KAAKS,SAASY,MAAMD,MAEzCpB,KAAKgB,WAAWE,KApC/B,uBAuCI,SAAUhB,GACN,IAAIgB,GAAQC,EAAAA,EAAAA,IAASG,EAAAA,GAAAA,KAAepB,IAUpC,OATIgB,EAAMJ,OAASd,KAAKK,UACpBZ,EAAO8B,WAAW,sBAAuB7B,EAAAA,GAAAA,OAAAA,eAA8B,CACnEoB,OAAQd,KAAKK,SACbmB,OAAQN,EAAMJ,SAGlBI,EAAMJ,OAASd,KAAKK,WACpBa,GAAQD,EAAAA,EAAAA,IAAO,CAAEjB,KAAKS,SAASY,MAAMH,EAAMJ,OAASd,KAAKK,UAAWa,KAEjEA,IAlDf,wBAsDI,SAAWhB,GACP,OAAOF,KAAKgB,WAAWhB,KAAKyB,UAAUvB,MAvD9C,iCA0DI,WAAmB,WACTsB,EAASxB,KAAKO,MAAMO,OAG1B,OAFAd,KAAKO,MAAMM,KAAKb,KAAKS,UACrBT,KAAKQ,aAAeR,KAAKK,SAClB,SAACH,GACJ,EAAKK,MAAMiB,GAAU,EAAKC,UAAUvB,QA/DhD,KAoEawB,EAAb,WASI,WAAYd,EAAiBP,EAAmBsB,EAAyBC,IAAoB,gBACzFtB,EAAAA,EAAAA,IAAeN,KAAM,SAASmB,EAAAA,EAAAA,IAASP,KACvCN,EAAAA,EAAAA,IAAeN,KAAM,WAAYK,GAAY,KAC7CC,EAAAA,EAAAA,IAAeN,KAAM,cAAe2B,IACpCrB,EAAAA,EAAAA,IAAeN,KAAM,aAAc4B,GAEnC5B,KAAK6B,QAAU,EAfvB,iCAkBI,WAAqB,OAAOC,EAAAA,EAAAA,IAAQ9B,KAAKO,SAlB7C,oBAmBI,WAAyB,OAAOP,KAAK6B,UAnBzC,oBA4BI,SAAOjC,EAAcM,GACjB,OAAIF,KAAK+B,YAAsB/B,KAAK+B,YAAYnC,EAAMM,GAC/CwB,EAAOM,OAAOpC,EAAMM,KA9BnC,wBAiCI,SAAWsB,EAAgBV,EAAgBmB,GACvC,IAAIC,EAAgBC,KAAKC,KAAKtB,EAASd,KAAKK,UAAYL,KAAKK,SAW7D,OAVIL,KAAK6B,QAAUK,EAAgBlC,KAAKO,MAAMO,SACtCd,KAAK4B,YAAcK,GAASjC,KAAK6B,QAAUf,GAAUd,KAAKO,MAAMO,OAChEoB,EAAgBpB,EAEhBrB,EAAO8B,WAAW,qBAAsB7B,EAAAA,GAAAA,OAAAA,eAA8B,CAClEoB,OAAQd,KAAKO,MAAMO,OACnBU,OAAQxB,KAAK6B,QAAUK,KAI5BlC,KAAKO,MAAMc,MAAMrB,KAAK6B,QAAS7B,KAAK6B,QAAUK,KA7C7D,uBAgDI,SAAUV,GACN,OAAO,IAAIE,EAAO1B,KAAKO,MAAMc,MAAMrB,KAAK6B,QAAUL,GAASxB,KAAKK,SAAUL,KAAK+B,YAAa/B,KAAK4B,cAjDzG,uBAoDI,SAAUd,EAAgBmB,GACtB,IAAIf,EAAQlB,KAAKqC,WAAW,EAAGvB,IAAUmB,GAGzC,OAFAjC,KAAK6B,SAAWX,EAAMJ,OAEfI,EAAMG,MAAM,EAAGP,KAxD9B,uBA2DI,WACI,OAAOQ,EAAAA,GAAAA,KAAetB,KAAKsC,UAAUtC,KAAKK,cA5DlD,qBAsBI,SAAcT,EAAcM,GACxB,IAAIqC,EAAQ3C,EAAK2C,MAAM,mBAEvB,OADIA,GAASC,SAASD,EAAM,KAAO,KAAMrC,EAASA,EAAMuC,YACjDvC,MAzBf,K,iCCzIawC,EAAb,0CAEI,WAAY5C,GAAiB,kCACnB,UAAW,UAAWA,GAAW,GAH/C,2CAMI,WACI,MAAO,+CAPf,oBAUI,SAAOiB,EAAgBb,GACnB,IACIA,GAAQyC,EAAAA,EAAAA,IAAWzC,GACrB,MAAO0C,GACL5C,KAAK6C,YAAYD,EAAM3C,QAASC,GAEpC,OAAOa,EAAO+B,WAAW5C,KAhBjC,oBAmBI,SAAO6C,GACH,OAAOJ,EAAAA,EAAAA,KAAWK,EAAAA,EAAAA,IAAWD,EAAOE,YAAYC,cAAe,SApBvE,GAAkCvD,GCFrBwD,EAAb,0CAGI,WAAYC,GAAY,6BACpB,cAAMA,EAAMxD,KAAMwD,EAAMvD,UAAMwD,EAAWD,EAAMrD,UAC1CqD,MAAQA,EAFO,EAH5B,2CAQI,WACI,OAAOpD,KAAKoD,MAAME,iBAT1B,oBAYI,SAAOvC,EAAgBb,GACnB,OAAOF,KAAKoD,MAAMG,OAAOxC,EAAQb,KAbzC,oBAgBI,SAAO6C,GACH,OAAO/C,KAAKoD,MAAMI,OAAOT,OAjBjC,GAAoCpD,GCD9BF,EAAS,IAAIC,EAAAA,GAAOF,GAKpB,SAAUiE,EAAK1C,EAAgB2C,EAA8BC,GAC/D,IAAIC,EAA0B,KAE9B,GAAIC,MAAMC,QAAQH,GACfC,EAAcD,OAEV,GAAIA,GAA6B,kBAAZA,EAAsB,CAC9C,IAAII,EAAwC,GAE5CH,EAAcF,EAAOM,KAAI,SAACZ,GACtB,IAAMxD,EAAOwD,EAAMtD,UAmBnB,OAlBKF,GACDH,EAAO8B,WAAW,wDAAyD7B,EAAAA,GAAAA,OAAAA,iBAAgC,CACvGuE,SAAU,SACVb,MAAOA,EACPlD,MAAOyD,IAIXI,EAAOnE,IACPH,EAAO8B,WAAW,0DAA2D7B,EAAAA,GAAAA,OAAAA,iBAAgC,CACzGuE,SAAU,SACVb,MAAOA,EACPlD,MAAOyD,IAIfI,EAAOnE,IAAQ,EAER+D,EAAO/D,WAIlBH,EAAOU,mBAAmB,sBAAuB,QAASwD,GAG1DD,EAAO5C,SAAW8C,EAAY9C,QAC9BrB,EAAOU,mBAAmB,8BAA+B,QAASwD,GAGtE,IAAIO,EAAe,IAAI9D,EAAOW,EAAOV,UACjC8D,EAAgB,IAAI/D,EAAOW,EAAOV,UAElC+D,EAAmD,GACvDV,EAAOW,SAAQ,SAACjB,EAAOkB,GACnB,IAAIpE,EAAQ0D,EAAYU,GAExB,GAAIlB,EAAMrD,QAAS,CAEf,IAAIwE,EAAgBJ,EAAcrD,OAGlCsC,EAAMG,OAAOY,EAAejE,GAG5B,IAAIsE,EAAaN,EAAaO,sBAC9BL,EAAYvD,MAAK,SAAC6D,GACdF,EAAWE,EAAaH,WAI5BnB,EAAMG,OAAOW,EAAchE,MAKnCkE,EAAYC,SAAQ,SAACM,GAAWA,EAAKT,EAAapD,WAElD,IAAIA,EAASC,EAAO6D,aAAaV,GAEjC,OADApD,GAAUC,EAAO6D,aAAaT,GAI5B,SAAUU,EAAO9B,EAAgBW,GACnC,IAAIC,EAAc,GAGdmB,EAAa/B,EAAOgC,UAAU,GAElCrB,EAAOW,SAAQ,SAACjB,GACZ,IAAIlD,EAAa,KAEjB,GAAIkD,EAAMrD,QAAS,CACf,IAAIyB,EAASuB,EAAOE,YAChB+B,EAAeF,EAAWC,UAAUvD,EAAOiB,YAC/C,IACIvC,EAAQkD,EAAMI,OAAOwB,GACvB,MAAOpC,GAEL,GAAIA,EAAMqC,OAASvF,EAAAA,GAAAA,OAAAA,eAAgC,MAAMkD,GACzD1C,EAAQ0C,GACFsC,SAAW9B,EAAMxD,KACvBM,EAAMN,KAAOwD,EAAMtD,UACnBI,EAAML,KAAOuD,EAAMvD,WAIvB,IACIK,EAAQkD,EAAMI,OAAOT,GACvB,MAAOH,GAEL,GAAIA,EAAMqC,OAASvF,EAAAA,GAAAA,OAAAA,eAAgC,MAAMkD,GACzD1C,EAAQ0C,GACFsC,SAAW9B,EAAMxD,KACvBM,EAAMN,KAAOwD,EAAMtD,UACnBI,EAAML,KAAOuD,EAAMvD,UAIdwD,GAATnD,GACAyD,EAAO9C,KAAKX,MAKpB,IAAMiF,EAAczB,EAAO0B,QAAO,SAACC,EAAOjC,GACtC,IAAMxD,EAAOwD,EAAMtD,UAKnB,OAJIF,IACKyF,EAAMzF,KAASyF,EAAMzF,GAAQ,GAClCyF,EAAMzF,MAEHyF,IACsB,IAGjC3B,EAAOW,SAAQ,SAACjB,EAAckB,GAC1B,IAAI1E,EAAOwD,EAAMtD,UACjB,GAAKF,GAA8B,IAAtBuF,EAAYvF,KAEZ,WAATA,IAAqBA,EAAO,WAEZ,MAAhB+D,EAAO/D,IAAX,CAEA,IAAMM,EAAQyD,EAAOW,GAEjBpE,aAAiBoF,MACjBC,OAAOC,eAAe7B,EAAQ/D,EAAM,CAChC6F,YAAY,EACZC,IAAK,WAAQ,MAAMxF,KAGvByD,EAAO/D,GAAQM,MAIvB,IAxEuD,eAwE9CyF,GACL,IAAMzF,EAAQyD,EAAOgC,GACjBzF,aAAiBoF,OACjBC,OAAOC,eAAe7B,EAAQgC,EAAG,CAC7BF,YAAY,EACZC,IAAK,WAAQ,MAAMxF,MALtByF,EAAI,EAAGA,EAAIhC,EAAO7C,OAAQ6E,IAAK,EAA/BA,GAUT,OAAOJ,OAAOK,OAAOjC,GAIlB,IAAMkC,EAAb,0CAII,WAAYzC,EAActC,EAAgBhB,GAAiB,sBACvD,IAAMD,EAAQuD,EAAMvD,KAAO,KAAOiB,GAAU,EAAIA,EAAQ,IAAM,IACxDf,GAAuB,IAAZe,GAAiBsC,EAAMrD,QAFe,OAGvD,cAAM,QAASF,EAAMC,EAAWC,IAE3BqD,MAAQA,EACb,EAAKtC,OAASA,EANyC,EAJ/D,2CAaI,WAKI,IAHA,IAAMgF,EAAe9F,KAAKoD,MAAME,eAE1ByC,EAAqB,GAClBJ,EAAI,EAAGA,EAAI3F,KAAKc,OAAQ6E,IAC7BI,EAAOlF,KAAKiF,GAEhB,OAAOC,IArBf,oBAwBI,SAAOhF,EAAgBb,GACd2D,MAAMC,QAAQ5D,IACfF,KAAK6C,YAAY,uBAAwB3C,GAG7C,IAAI8F,EAAQhG,KAAKc,QAEF,IAAXkF,IACAA,EAAQ9F,EAAMY,OACdC,EAAO+B,WAAW5C,EAAMY,SAG5BrB,EAAOwG,mBAAmB/F,EAAMY,OAAQkF,EAAO,eAAiBhG,KAAKF,UAAY,IAAKE,KAAKF,UAAY,KAGvG,IADA,IAAI4D,EAAS,GACJiC,EAAI,EAAGA,EAAIzF,EAAMY,OAAQ6E,IAAOjC,EAAO7C,KAAKb,KAAKoD,OAE1D,OAAOK,EAAK1C,EAAQ2C,EAAQxD,KAzCpC,oBA4CI,SAAO6C,GACH,IAAIiD,EAAQhG,KAAKc,QACF,IAAXkF,GAQY,IAPZA,EAAQjD,EAAOE,YAAYR,YAOVM,EAAOxC,MAAMO,QAC1BrB,EAAO8B,WAAW,2BAA4B7B,EAAAA,GAAAA,OAAAA,eAA8B,CACxEoB,OAAQiC,EAAOxC,MAAMO,OACrBkF,MAAOA,IAKnB,IADA,IAAItC,EAAS,GACJiC,EAAI,EAAGA,EAAIK,EAAOL,IAAOjC,EAAO7C,KAAK,IAAIsC,EAAenD,KAAKoD,QAEtE,OAAOL,EAAOf,OAAOhC,KAAKJ,KAAMiF,EAAO9B,EAAQW,QAhEvD,GAAgC/D,GCpKnBuG,EAAb,0CAEI,WAAYpG,GAAiB,kCACnB,OAAQ,OAAQA,GAAW,GAHzC,2CAMI,WACI,OAAO,IAPf,oBAUI,SAAOiB,EAAgBb,GACnB,OAAOa,EAAO+B,WAAW5C,EAAQ,EAAG,KAX5C,oBAcI,SAAO6C,GACH,OAAOA,EAAOf,OAAOhC,KAAKH,MAAOkD,EAAOE,YAAYkD,cAf5D,GAAkCxG,GCErByG,EAAb,0CACI,WAAYvG,EAAcC,GAAiB,kCAClCD,EAAMA,EAAMC,GAAW,GAFpC,2CAKI,WACI,MAAO,OANf,oBASI,SAAOiB,EAAgBb,GACnBA,GAAQiB,EAAAA,EAAAA,IAASjB,GACjB,IAAIY,EAASC,EAAO+B,WAAW5C,EAAMY,QAErC,OADAA,GAAUC,EAAOsF,WAAWnG,KAZpC,oBAgBI,SAAO6C,GACH,OAAOA,EAAOT,UAAUS,EAAOE,YAAYR,YAAY,OAjB/D,GAAuC9C,GAqB1B2G,EAAb,0CACI,WAAYxG,GAAiB,kCACnB,QAASA,GAFvB,qCAKI,SAAOiD,GACH,OAAOA,EAAOf,OAAOhC,KAAKJ,MAAMkC,EAAAA,EAAAA,KAAQ,qDAAaiB,SAN7D,GAAgCqD,GCpBnBG,EAAb,0CAGI,WAAYC,EAAc1G,GAAiB,sBACvC,IAAIF,EAAO,QAAU6G,OAAOD,GADW,OAEvC,cAAM5G,EAAMA,EAAME,GAAW,IACxB0G,KAAOA,EAH2B,EAH/C,2CASI,WACI,MAAQ,qEAAsEE,UAAU,EAAG,EAAgB,EAAZ1G,KAAKwG,QAV5G,oBAaI,SAAOzF,EAAgBb,GACnB,IAAIU,GAAOO,EAAAA,EAAAA,IAASjB,GAEpB,OADIU,EAAKE,SAAWd,KAAKwG,MAAQxG,KAAK6C,YAAY,wBAAyB3C,GACpEa,EAAOsF,WAAWzF,KAhBjC,oBAmBI,SAAOmC,GACH,OAAOA,EAAOf,OAAOhC,KAAKJ,MAAMkC,EAAAA,EAAAA,IAAQiB,EAAOT,UAAUtC,KAAKwG,YApBtE,GAAqC7G,GCHxBgH,EAAb,0CAEI,WAAY7G,GAAiB,kCACnB,OAAQ,GAAIA,GAAW,GAHrC,2CAMI,WACI,OAAO,OAPf,oBAUI,SAAOiB,EAAgBb,GAEnB,OADa,MAATA,GAAiBF,KAAK6C,YAAY,WAAY3C,GAC3Ca,EAAOsF,WAAW,MAZjC,oBAeI,SAAOtD,GAEH,OADAA,EAAOT,UAAU,GACVS,EAAOf,OAAOhC,KAAKJ,KAAM,UAjBxC,GAA+BD,G,WCGlBiH,EAAb,0CAII,WAAYJ,EAAcK,EAAiB/G,GAAiB,sBACxD,IAAMF,GAASiH,EAAS,MAAO,QAAkB,EAAPL,EADc,OAExD,cAAM5G,EAAMA,EAAME,GAAW,IAExB0G,KAAOA,EACZ,EAAKK,OAASA,EAL0C,EAJhE,2CAYI,WACI,OAAO,IAbf,oBAgBI,SAAO9F,EAAgBb,GACnB,IAAI4G,EAAIxF,EAAAA,GAAAA,KAAepB,GAGnB6G,EAAeC,EAAAA,GAAAA,KAAkC,EAAlBjG,EAAOV,UAC1C,GAAIL,KAAK6G,OAAQ,CACb,IAAII,EAASF,EAAaG,KAAiB,EAAZlH,KAAKwG,KAAW,IAC3CM,EAAEK,GAAGF,IAAWH,EAAEM,GAAGH,EAAOI,IAAIC,EAAAA,IAAKC,IAAIC,EAAAA,OACzCxH,KAAK6C,YAAY,sBAAuB3C,QAErC4G,EAAEM,GAAGK,EAAAA,KAASX,EAAEK,GAAGJ,EAAaG,KAAiB,EAAZlH,KAAKwG,SACjDxG,KAAK6C,YAAY,sBAAuB3C,GAS5C,OANA4G,EAAIA,EAAEY,OAAmB,EAAZ1H,KAAKwG,MAAUU,KAAiB,EAAZlH,KAAKwG,MAElCxG,KAAK6G,SACLC,EAAIA,EAAEa,SAAqB,EAAZ3H,KAAKwG,MAAUkB,OAAO,EAAI3G,EAAOV,WAG7CU,EAAO+B,WAAWgE,KApCjC,oBAuCI,SAAO/D,GACH,IAAI7C,EAAQ6C,EAAOE,YAAYiE,KAAiB,EAAZlH,KAAKwG,MAMzC,OAJIxG,KAAK6G,SACL3G,EAAQA,EAAMyH,SAAqB,EAAZ3H,KAAKwG,OAGzBzD,EAAOf,OAAOhC,KAAKJ,KAAMM,OA9CxC,GAAiCP,G,WCApBiI,EAAb,0CAEI,WAAY9H,GAAiB,kCACnB,SAAUA,GAHxB,2CAMI,WACI,MAAO,KAPf,oBAUI,SAAOiB,EAAgBb,GACnB,4DAAoBa,GAAQ8G,EAAAA,EAAAA,IAAY3H,MAXhD,oBAcI,SAAO6C,GACH,OAAO+E,EAAAA,EAAAA,KAAa,qDAAa/E,QAfzC,GAAiCqD,GCFpB2B,EAAb,0CAGI,WAAYrE,EAAsB5D,GAAiB,sBAC/C,IAAIC,GAAU,EACRiI,EAAuB,GAC7BtE,EAAOW,SAAQ,SAACjB,GACRA,EAAMrD,UAAWA,GAAU,GAC/BiI,EAAMnH,KAAKuC,EAAMvD,SAErB,IAAMA,EAAQ,SAAWmI,EAAMC,KAAK,KAAO,IAPI,OAS/C,cAAM,QAASpI,EAAMC,EAAWC,IAC3B2D,OAASA,EAViC,EAHvD,2CAgBI,WACI,IAAMC,EAAc,GACpB3D,KAAK0D,OAAOW,SAAQ,SAACjB,GACjBO,EAAO9C,KAAKuC,EAAME,mBAItB,IAAM6B,EAAcnF,KAAK0D,OAAO0B,QAAO,SAACC,EAAOjC,GAC3C,IAAMxD,EAAOwD,EAAMtD,UAKnB,OAJIF,IACKyF,EAAMzF,KAASyF,EAAMzF,GAAQ,GAClCyF,EAAMzF,MAEHyF,IACsB,IAcjC,OAXArF,KAAK0D,OAAOW,SAAQ,SAACjB,EAAckB,GAC/B,IAAI1E,EAAOwD,EAAMtD,UACZF,GAA8B,IAAtBuF,EAAYvF,KAEZ,WAATA,IAAqBA,EAAO,WAEZ,MAAhB+D,EAAO/D,KAEX+D,EAAO/D,GAAQ+D,EAAOW,QAGnBiB,OAAOK,OAAOjC,KA5C7B,oBA+CI,SAAO5C,EAAgBb,GACnB,OAAOuD,EAAK1C,EAAQf,KAAK0D,OAAQxD,KAhDzC,oBAmDI,SAAO6C,GACH,OAAOA,EAAOf,OAAOhC,KAAKJ,KAAMiF,EAAO9B,EAAQ/C,KAAK0D,aApD5D,GAAgC/D,GCE1BF,EAAS,IAAIC,EAAAA,GAAOF,GA0BpB0I,EAAoB,GAqBtBC,EAAgD,CAAEC,UAAU,EAAMC,QAAQ,EAAMC,SAAS,GACzFC,EAA+C,CAAEH,UAAU,EAAMC,QAAQ,GAC7E,SAASG,EAAc3I,EAAcD,GACjC,GAAa,UAATC,GAA6B,WAATA,GACpB,GAAIsI,EAAevI,GAAS,OAAO,OAChC,GAAa,YAATC,GACP,GAAa,YAATD,EAAsB,OAAO,OAC9B,IAAIC,EAAK4I,QAAQ,MAAQ,GAAc,UAAT5I,IAC7B0I,EAAc3I,GAAS,OAAO,EAKtC,OAHIuI,EAAevI,IAAkB,YAATA,IACxBH,EAAOU,mBAAmB,mBAAoB,OAAQP,IAEnD,EAmKX,SAAS8I,EAASC,EAAaC,GAC3B,IAAK,IAAIC,KAAOD,GAAUtI,EAAAA,EAAAA,IAAeqI,EAAQE,EAAKD,EAAOC,IAG1D,IAAMC,EAA4CvD,OAAOK,OAAO,CAEnEmD,QAAS,UAGTC,QAAS,UAGTC,KAAM,OAGNC,KAAM,SAGJC,EAAiB,IAAIC,OAAO,sBAErBC,EAAb,WA0BI,WAAYC,EAAuBV,IAAW,eACtCU,IAAqBpB,GAAqBzI,EAAO8B,WAAW,iBAAkB7B,EAAAA,GAAAA,OAAAA,sBAAqC,CACnH6J,UAAW,oBAEfb,EAAS1I,KAAM4I,GAEf,IAAIrG,EAAQvC,KAAKH,KAAK0C,MAAM4G,GAExBT,EAAS1I,KADTuC,EACe,CACXiH,YAAahH,SAASD,EAAM,IAAM,MAClCkH,cAAeJ,EAAUK,WAAW,CAChC7J,KAAM0C,EAAM,GACZoH,WAAY3J,KAAK2J,aAErBzE,SAAU,SAGC,CACXsE,YAAa,KACbC,cAAe,KACfvE,SAA+B,MAAnBlF,KAAK2J,WAAsB,QAAS3J,KAAKH,OAI7DG,KAAK4J,cAAe,EAEpBrE,OAAOK,OAAO5F,MApDtB,qCA2DI,SAAO6J,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACbpK,EAAOU,mBAAmB,sBAAuB,SAAU0J,GAG3DA,IAAWf,EAAYI,KAAM,CAC7B,IAAInD,EAAc,CACdlG,KAA0B,UAAlBG,KAAKkF,SAAwB,QAASlF,KAAKH,KACnDD,KAAOI,KAAKJ,WAAQyD,GAMxB,MAJ6B,mBAAlBrD,KAAK8J,UAA0B/D,EAAO+D,QAAU9J,KAAK8J,SAC5D9J,KAAK2J,aACL5D,EAAO4D,WAAa3J,KAAK2J,WAAW3F,KAAI,SAAC+F,GAAD,OAAUC,KAAKC,MAAMF,EAAKF,OAAOA,QAEtEG,KAAKE,UAAUnE,GAG1B,IAAIA,EAAS,GA0Bb,MAvBsB,UAAlB/F,KAAKkF,UACLa,GAAU/F,KAAKyJ,cAAcI,OAAOA,GACpC9D,GAAU,KAAO/F,KAAKwJ,YAAc,EAAI,GAAI/C,OAAOzG,KAAKwJ,cAAgB,KAElD,UAAlBxJ,KAAKkF,UACD2E,IAAWf,EAAYC,UACvBhD,GAAU/F,KAAKH,MAEnBkG,GAAU,IAAM/F,KAAK2J,WAAW3F,KAC5B,SAAC+F,GAAD,OAAUA,EAAKF,OAAOA,MACxB5B,KAAM4B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,KAEpDlD,GAAU/F,KAAKH,KAInBgK,IAAWf,EAAYC,WACF,IAAjB/I,KAAK8J,UAAoB/D,GAAU,YACnC8D,IAAWf,EAAYG,MAAQjJ,KAAKJ,OACpCmG,GAAU,IAAM/F,KAAKJ,OAItBmG,KAvGf,mBA0GI,SAAY7F,EAA8CiK,GACtD,MAAsB,kBAAXjK,EACAmJ,EAAUe,WAAWlK,EAAOiK,GAEhCd,EAAUK,WAAWxJ,KA9GpC,wBAiHI,SAAkBA,GACd,OAAImJ,EAAUgB,YAAYnK,GAAiBA,EAEpC,IAAImJ,EAAUnB,EAAmB,CACpCtI,KAAOM,EAAMN,MAAQ,KACrBC,KAAMyK,GAAWpK,EAAML,MACvBiK,QAA4B,MAAjB5J,EAAM4J,QAAmB,OAAQ5J,EAAM4J,QAClDH,WAAazJ,EAAMyJ,WAAazJ,EAAMyJ,WAAW3F,IAAIqF,EAAUK,YAAa,SAxHxF,wBA4HI,SAAkBxJ,EAAeiK,GAU7B,OATqBI,EAhT7B,SAAwBC,EAAeL,GAEnC,IAAIM,EAAgBD,EACpB,SAASjJ,EAAWoE,GAChBlG,EAAOU,mBAAP,2CAA+DwF,GAAM,QAAS6E,GAIlF,SAASE,EAAQC,GACb,IAAIJ,EAAkB,CAAE1K,KAAM,GAAID,KAAM,GAAI+K,OAAQA,EAAQC,MAAO,CAAEC,WAAW,IAEhF,OADIV,IAAgBI,EAAKT,SAAU,GAC5BS,EALXC,EAAQA,EAAMM,QAAQ,MAAO,KAW7B,IAHA,IAAIH,EAAoB,CAAE9K,KAAM,GAAID,KAAM,GAAIgL,MAAO,CAAEC,WAAW,IAC9DN,EAAOI,EAEFhF,EAAI,EAAGA,EAAI6E,EAAM1J,OAAQ6E,IAAK,CACnC,IAAIoF,EAAIP,EAAM7E,GACd,OAAQoF,GACJ,IAAK,IACGR,EAAKK,MAAMC,WAA2B,KAAdN,EAAK1K,KAC7B0K,EAAK1K,KAAO,QACJ0K,EAAKK,MAAMI,aACnBzJ,EAAWoE,GAEf4E,EAAKK,MAAMC,WAAY,EACvBN,EAAK1K,KAAOyK,GAAWC,EAAK1K,MAC5B0K,EAAKZ,WAAa,CAAEe,EAAQH,IAC5BA,EAAOA,EAAKZ,WAAW,GACvB,MAEJ,IAAK,WACMY,EAAKK,MAEM,YAAdL,EAAK3K,OACAuK,GAAgB5I,EAAWoE,GAChC4E,EAAKT,SAAU,EACfS,EAAK3K,KAAO,IAGZ4I,EAAc+B,EAAK1K,KAAM0K,EAAK3K,QAAS2K,EAAK3K,KAAO,IAEvD2K,EAAK1K,KAAOyK,GAAWC,EAAK1K,MAE5B,IAAIoL,EAAQV,GACZA,EAAOA,EAAKI,SACCpJ,EAAWoE,UACjBsF,EAAMN,OACbJ,EAAKK,MAAMI,aAAc,EACzBT,EAAKK,MAAMM,WAAY,EACvBX,EAAKK,MAAMO,YAAa,EACxB,MAEJ,IAAK,WACMZ,EAAKK,MAEM,YAAdL,EAAK3K,OACAuK,GAAgB5I,EAAWoE,GAChC4E,EAAKT,SAAU,EACfS,EAAK3K,KAAO,IAGZ4I,EAAc+B,EAAK1K,KAAM0K,EAAK3K,QAAS2K,EAAK3K,KAAO,IAEvD2K,EAAK1K,KAAOyK,GAAWC,EAAK1K,MAE5B,IAAIuL,EAAqBV,EAAQH,EAAKI,QAEtCJ,EAAKI,OAAOhB,WAAW9I,KAAKuK,UACrBb,EAAKI,OACZJ,EAAOa,EACP,MAGJ,IAAK,IAGGb,EAAKK,MAAMC,WACO,KAAdN,EAAK1K,OACL0K,EAAK1K,KAAOyK,GAAWC,EAAK1K,aACrB0K,EAAKK,MAAMC,UAClBN,EAAKK,MAAMM,WAAY,EACvBX,EAAKK,MAAMI,aAAc,GAK7BT,EAAKK,MAAMM,WACO,KAAdX,EAAK3K,OACa,YAAd2K,EAAK3K,MACAuK,GAAgB5I,EAAWoE,GAC5B4E,EAAKT,SAAWvI,EAAWoE,GAC/B4E,EAAKT,SAAU,EACfS,EAAK3K,KAAO,IACL4I,EAAc+B,EAAK1K,KAAM0K,EAAK3K,MACrC2K,EAAK3K,KAAO,GAEZ2K,EAAKK,MAAMM,WAAY,GAKnC,MAEJ,IAAK,IACIX,EAAKK,MAAMO,YAAc5J,EAAWoE,GAEzC4E,EAAK1K,MAAQkL,EAEbR,EAAKK,MAAMO,YAAa,EACxBZ,EAAKK,MAAMM,WAAY,EACvBX,EAAKK,MAAMS,WAAY,EACvB,MAEJ,IAAK,IACId,EAAKK,MAAMS,WAAa9J,EAAWoE,GAExC4E,EAAK1K,MAAQkL,EAEbR,EAAKK,MAAMS,WAAY,EACvBd,EAAKK,MAAMO,YAAa,EACxBZ,EAAKK,MAAMM,WAAY,EACvB,MAEJ,QACQX,EAAKK,MAAMC,WACXN,EAAK1K,MAAQkL,EACbR,EAAKK,MAAMI,aAAc,EACzBT,EAAKK,MAAMO,YAAa,GACjBZ,EAAKK,MAAMM,WAClBX,EAAK3K,MAAQmL,SACNR,EAAKK,MAAMO,YACXZ,EAAKK,MAAMS,UAClBd,EAAK1K,MAAQkL,EAEbxJ,EAAWoE,IAoB3B,OAfI4E,EAAKI,QAAUlL,EAAOU,mBAAmB,iBAAkB,QAASqK,UAEjEG,EAAOC,MAEI,YAAdL,EAAK3K,MACAuK,GAAgB5I,EAAWkJ,EAAc3J,OAAS,GACnDyJ,EAAKT,SAAWvI,EAAWkJ,EAAc3J,OAAS,GACtDyJ,EAAKT,SAAU,EACfS,EAAK3K,KAAO,IACL4I,EAAc+B,EAAK1K,KAAM0K,EAAK3K,QACrC2K,EAAK3K,KAAO,IAGhB+K,EAAO9K,KAAOyK,GAAWK,EAAO9K,MAEzB8K,EA6JgBW,CAAepL,IAASiK,GARhCd,EAAUK,WAAW,CACxB9J,KAAM2K,EAAK3K,KACXC,KAAM0K,EAAK1K,KACXiK,QAASS,EAAKT,QACdH,WAAYY,EAAKZ,aALzB,IAAqBY,IA7H7B,yBAyII,SAAmBrK,GACf,QAAmB,MAATA,IAAiBA,EAAM0J,kBA1IzC,KA8IA,SAAS2B,EAAYrL,EAAesL,GAChC,OAyoBJ,SAAsBtL,GAClBA,EAAQA,EAAMuL,OAKd,IAHA,IAAI1F,EAAS,GACTV,EAAQ,GACRqG,EAAQ,EACHlK,EAAS,EAAGA,EAAStB,EAAMY,OAAQU,IAAU,CAClD,IAAIuJ,EAAI7K,EAAMsB,GACJ,MAANuJ,GAAuB,IAAVW,GACb3F,EAAOlF,KAAKwE,GACZA,EAAQ,KAERA,GAAS0F,EACC,MAANA,EACAW,IACa,MAANX,IAEQ,MADfW,GAEIjM,EAAOU,mBAAmB,yBAA0B,QAASD,IAKzEmF,GAASU,EAAOlF,KAAKwE,GAEzB,OAAOU,EAlqBA4F,CAAazL,GAAO8D,KAAI,SAACwG,GAAD,OAAWnB,EAAUe,WAAWI,EAAOgB,MAWnE,IAAeI,EAAtB,WAQI,WAAYtC,EAAuBV,IAAW,eACtCU,IAAqBpB,GACrBzI,EAAO8B,WAAW,2BAA4B7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAC/E6J,UAAW,mBAGnBb,EAAS1I,KAAM4I,GAEf5I,KAAK6L,aAAc,EAEnBtG,OAAOK,OAAO5F,MAlBtB,wCAuBI,SAAYE,GACR,OAAI0L,EAASE,WAAW5L,GAAiBA,EAEnB,kBAAXA,EACA0L,EAASxB,WAAWlK,GAGxB0L,EAASlC,WAAWxJ,KA9BnC,wBAiCI,SAAkBA,GACd,GAAI0L,EAASE,WAAW5L,GAAU,OAAOA,EAEzC,OAAQA,EAAML,MACV,IAAK,WACD,OAAOkM,GAAiBrC,WAAWxJ,GACvC,IAAK,QACD,OAAO8L,EAActC,WAAWxJ,GACpC,IAAK,cACD,OAAO+L,GAAoBvC,WAAWxJ,GAC1C,IAAK,QACD,OAAOgM,GAAcxC,WAAWxJ,GACpC,IAAK,WACL,IAAK,UAED,OAAO,KAGf,OAAOT,EAAOU,mBAAmB,0BAA2B,QAASD,KAnD7E,wBAsDI,SAAkBA,GAMd,MAA4B,WAF5BA,GADAA,GADAA,EAAQA,EAAM4K,QAAQ,MAAO,MACfA,QAAQ,MAAO,MAAMA,QAAQ,MAAO,MAAMA,QAAQ,OAAQ,MAC1DW,QAEJU,MAAM,KAAK,GACXH,EAAc5B,WAAWlK,EAAMwG,UAAU,GAAG+E,QACnB,aAAxBvL,EAAMiM,MAAM,KAAK,GACjBJ,GAAiB3B,WAAWlK,EAAMwG,UAAU,GAAG+E,QAChB,gBAA/BvL,EAAMiM,MAAM,KAAK,GAAGV,OACpBQ,GAAoB7B,WAAWlK,EAAMuL,QACb,UAAxBvL,EAAMiM,MAAM,KAAK,GAClBD,GAAc9B,WAAWlK,EAAMwG,UAAU,GAAG+E,QAG/ChM,EAAOU,mBAAmB,uBAAwB,QAASD,KAtE1E,wBAyEI,SAAkBA,GACd,SAAUA,IAASA,EAAM2L,iBA1EjC,KAkFaG,EAAb,0IAGI,SAAOnC,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACbpK,EAAOU,mBAAmB,sBAAuB,SAAU0J,GAG3DA,IAAWf,EAAYI,KACvB,OAAOc,KAAKE,UAAU,CAClBrK,KAAM,QACNuM,UAAWpM,KAAKoM,UAChBxM,KAAMI,KAAKJ,KACXyM,OAAQrM,KAAKqM,OAAOrI,KAAI,SAACsI,GAAD,OAAWtC,KAAKC,MAAMqC,EAAMzC,OAAOA,SAInE,IAAI9D,EAAS,GAgBb,OAdI8D,IAAWf,EAAYC,UACvBhD,GAAU,UAGdA,GAAU/F,KAAKJ,KAAO,IAAMI,KAAKqM,OAAOrI,KACpC,SAACsI,GAAD,OAAWA,EAAMzC,OAAOA,MAC1B5B,KAAM4B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,KAEhDY,IAAWf,EAAYC,SACnB/I,KAAKoM,YACLrG,GAAU,cAIXA,EAAO0F,UAlCtB,mBAqCI,SAAYvL,GACR,MAAsB,kBAAXA,EACA8L,EAAc5B,WAAWlK,GAE7B8L,EAActC,WAAWxJ,KAzCxC,wBA4CI,SAAkBA,GACd,GAAI8L,EAAcO,gBAAgBrM,GAAU,OAAOA,EAEhC,UAAfA,EAAML,MACNJ,EAAOU,mBAAmB,uBAAwB,QAASD,GAG/D,IAAM0I,EAAoC,CACtChJ,KAAM4M,GAAiBtM,EAAMN,MAC7BwM,UAAWlM,EAAMkM,UACjBC,OAASnM,EAAMmM,OAASnM,EAAMmM,OAAOrI,IAAIqF,EAAUK,YAAc,GACjE7J,KAAM,SAGV,OAAO,IAAImM,EAAc9D,EAAmBU,KA1DpD,wBA6DI,SAAkB1I,GAEd,IAAIqC,EAAQrC,EAAMqC,MAAMkK,IACnBlK,GACD9C,EAAOU,mBAAmB,uBAAwB,QAASD,GAG/D,IAAIkM,GAAY,EAahB,OAZA7J,EAAM,GAAG4J,MAAM,KAAK9H,SAAQ,SAACqI,GACzB,OAAOA,EAASjB,QACZ,IAAK,YACDW,GAAY,EACZ,MACJ,IAAK,GACD,MACJ,QACI3M,EAAOkN,KAAK,qBAAuBD,OAIxCV,EAActC,WAAW,CAC5B9J,KAAM2C,EAAM,GAAGkJ,OACfW,UAAWA,EACXC,OAAQd,EAAYhJ,EAAM,IAAI,GAC9B1C,KAAM,YArFlB,6BAyFI,SAAuBK,GACnB,OAAQA,GAASA,EAAM2L,aAA8B,UAAf3L,EAAML,SA1FpD,GAAmC+L,GA8FnC,SAASgB,EAAS1M,EAAe0I,GAC7BA,EAAOiE,IAAM,KAEb,IAAIC,EAAQ5M,EAAMiM,MAAM,KACxB,OAAqB,IAAjBW,EAAMhM,QACFgM,EAAMhM,OAAS,GACfrB,EAAOU,mBAAmB,uCAAwC,QAASD,GAE1E4M,EAAM,GAAGvK,MAAM,aAChB9C,EAAOU,mBAAmB,2CAA4C,QAASD,GAEnF0I,EAAOiE,IAAMvL,EAAAA,GAAAA,KAAewL,EAAM,IAC3BA,EAAM,IAGV5M,EAGX,SAAS6M,GAAe7M,EAAe0I,GACnCA,EAAOoE,UAAW,EAClBpE,EAAOqE,SAAU,EACjBrE,EAAOsE,gBAAkB,aAEzBhN,EAAMiM,MAAM,KAAK9H,SAAQ,SAACqI,GACtB,OAAQA,EAASjB,QACb,IAAK,WACD7C,EAAOoE,UAAW,EAClB,MACJ,IAAK,UACDpE,EAAOqE,SAAU,EACjBrE,EAAOsE,gBAAkB,UACzB,MACJ,IAAK,aACDtE,EAAOqE,SAAU,EACjBrE,EAAOsE,gBAAkB,aACzB,MACJ,IAAK,OACDtE,EAAOoE,UAAW,EAClBpE,EAAOsE,gBAAkB,OACzB,MACJ,IAAK,OACDtE,EAAOoE,UAAW,EAClBpE,EAAOsE,gBAAkB,OACzB,MACJ,IAAK,WACL,IAAK,SACL,IAAK,GACD,MACJ,QACIC,QAAQC,IAAI,qBAAuBV,OAkBnD,SAASW,GAAYnN,GACjB,IAAI6F,EAAc,CACdiH,UAAU,EACVC,SAAS,EACTC,gBAAiB,WAmDrB,OAhD6B,MAAzBhN,EAAMgN,iBACNnH,EAAOmH,gBAAkBhN,EAAMgN,gBAG/BnH,EAAOiH,SAAuC,SAA3BjH,EAAOmH,iBAAyD,SAA3BnH,EAAOmH,gBACzC,MAAlBhN,EAAM8M,YACC9M,EAAM8M,WAAcjH,EAAOiH,UAC9BvN,EAAOU,mBAAmB,iDAAmD4F,EAAOmH,gBAAiB,QAAShN,GAKtH6F,EAAOkH,QAAsC,YAA3BlH,EAAOmH,gBACJ,MAAjBhN,EAAM+M,WACC/M,EAAM+M,UAAalH,EAAOkH,SAC7BxN,EAAOU,mBAAmB,gDAAkD4F,EAAOmH,gBAAiB,QAAShN,IAI7F,MAAjBA,EAAM+M,SACblH,EAAOkH,UAAY/M,EAAM+M,QAGH,MAAlB/M,EAAM8M,UAAqBjH,EAAOkH,SAA0B,gBAAf/M,EAAML,MACnDJ,EAAOU,mBAAmB,sCAAuC,QAASD,GAG9E6F,EAAOiH,WAAa9M,EAAM8M,SAEtBjH,EAAOiH,SACPjH,EAAOmH,gBAAkB,OAEzBnH,EAAOmH,gBAAmBnH,EAAOkH,QAAU,UAAW,aAGtDlH,EAAOkH,SAAWlH,EAAOiH,UACzBvN,EAAOU,mBAAmB,wCAAyC,QAASD,IAGvD,MAAlBA,EAAM8M,UACbjH,EAAOiH,WAAa9M,EAAM8M,SAC1BjH,EAAOkH,SAAWlH,EAAOiH,SACzBjH,EAAOmH,gBAAmBnH,EAAOiH,SAAW,OAAQ,WAE9B,gBAAf9M,EAAML,MACbJ,EAAOU,mBAAmB,sCAAuC,QAASD,GAGvE6F,EASJ,IAAMkG,GAAb,0IAKI,SAAOpC,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACbpK,EAAOU,mBAAmB,sBAAuB,SAAU0J,GAG3DA,IAAWf,EAAYI,KACvB,OAAOc,KAAKE,UAAU,CAClBrK,KAAM,cACNqN,gBAA4C,eAAzBlN,KAAKkN,gBAAoClN,KAAKkN,qBAAiB7J,EAClF4J,QAASjN,KAAKiN,QACdJ,IAAM7M,KAAK6M,IAAM7M,KAAK6M,IAAIpK,gBAAYY,EACtCgJ,OAAQrM,KAAKqM,OAAOrI,KAAI,SAACsI,GAAD,OAAWtC,KAAKC,MAAMqC,EAAMzC,OAAOA,SAI/DA,IAAWf,EAAYC,SACvBtJ,EAAO8B,WAAW,0CAA2C7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAC9F6J,UAAW,oBAInB,IAAIxD,EAAS,eAAiB/F,KAAKqM,OAAOrI,KACtC,SAACsI,GAAD,OAAWA,EAAMzC,OAAOA,MAC1B5B,KAAM4B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,KAMpD,OAJIjJ,KAAKkN,iBAA4C,eAAzBlN,KAAKkN,kBAC7BnH,GAAU/F,KAAKkN,gBAAkB,KAG9BnH,EAAO0F,UAnCtB,mBAsCI,SAAYvL,GACR,MAAsB,kBAAXA,EACA+L,EAAoB7B,WAAWlK,GAEnC+L,EAAoBvC,WAAWxJ,KA1C9C,wBA6CI,SAAkBA,GACd,GAAI+L,EAAoBqB,sBAAsBpN,GAAU,OAAOA,EAE5C,gBAAfA,EAAML,MACNJ,EAAOU,mBAAmB,6BAA8B,QAASD,GAGrE,IAAI0K,EAAQyC,GAAYnN,GACpB0K,EAAMoC,UACNvN,EAAOU,mBAAmB,iCAAkC,QAASD,GAGzE,IAAM0I,EAA0C,CAC5ChJ,KAAM,KACNC,KAAMK,EAAML,KACZwM,OAASnM,EAAMmM,OAASnM,EAAMmM,OAAOrI,IAAIqF,EAAUK,YAAa,GAChEuD,QAASrC,EAAMqC,QACfC,gBAAiBtC,EAAMsC,gBACvBL,IAAM3M,EAAM2M,IAAMvL,EAAAA,GAAAA,KAAepB,EAAM2M,KAAM,MAGjD,OAAO,IAAIZ,EAAoB/D,EAAmBU,KAlE1D,wBAqEI,SAAkB1I,GACd,IAAI0I,EAAc,CAAE/I,KAAM,eAItB0N,GAFJrN,EAAQ0M,EAAS1M,EAAO0I,IAELrG,MAAMkK,IASzB,OARKc,GAA+B,gBAArBA,EAAO,GAAG9B,QACrBhM,EAAOU,mBAAmB,6BAA8B,QAASD,GAGrE0I,EAAOyD,OAASd,EAAYgC,EAAO,GAAG9B,QAAQ,GAE9CsB,GAAeQ,EAAO,GAAG9B,OAAQ7C,GAE1BqD,EAAoBvC,WAAWd,KAnF9C,mCAsFI,SAA6B1I,GACzB,OAAQA,GAASA,EAAM2L,aAA8B,gBAAf3L,EAAML,SAvFpD,GAAyC+L,GAgG5BG,GAAb,0IAII,SAAOlC,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACbpK,EAAOU,mBAAmB,sBAAuB,SAAU0J,GAG3DA,IAAWf,EAAYI,KACvB,OAAOc,KAAKE,UAAU,CAClBrK,KAAM,WACND,KAAMI,KAAKJ,KACXoN,SAAUhN,KAAKgN,SACfE,gBAA4C,eAAzBlN,KAAKkN,gBAAoClN,KAAKkN,qBAAiB7J,EAClF4J,QAASjN,KAAKiN,QACdJ,IAAM7M,KAAK6M,IAAM7M,KAAK6M,IAAIpK,gBAAYY,EACtCgJ,OAAQrM,KAAKqM,OAAOrI,KAAI,SAACsI,GAAD,OAAWtC,KAAKC,MAAMqC,EAAMzC,OAAOA,OAC3D2D,QAASxN,KAAKwN,QAAQxJ,KAAI,SAACyJ,GAAD,OAAYzD,KAAKC,MAAMwD,EAAO5D,OAAOA,SAIvE,IAAI9D,EAAS,GA8Bb,OA5BI8D,IAAWf,EAAYC,UACvBhD,GAAU,aAGdA,GAAU/F,KAAKJ,KAAO,IAAMI,KAAKqM,OAAOrI,KACpC,SAACsI,GAAD,OAAWA,EAAMzC,OAAOA,MAC1B5B,KAAM4B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,KAEhDY,IAAWf,EAAYC,UACnB/I,KAAKkN,gBACwB,eAAzBlN,KAAKkN,kBACLnH,GAAW/F,KAAKkN,gBAAkB,KAE/BlN,KAAKgN,WACZjH,GAAU,SAGV/F,KAAKwN,SAAWxN,KAAKwN,QAAQ1M,SAC7BiF,GAAU,YAAc/F,KAAKwN,QAAQxJ,KACjC,SAACyJ,GAAD,OAAYA,EAAO5D,OAAOA,MAC5B5B,KAAK,MAAQ,MAGH,MAAZjI,KAAK6M,MACL9G,GAAU,IAAM/F,KAAK6M,IAAIa,WAAa,MAIvC3H,EAAO0F,UArDtB,mBAwDI,SAAYvL,GACR,MAAsB,kBAAXA,EACA6L,EAAiB3B,WAAWlK,GAEhC6L,EAAiBrC,WAAWxJ,KA5D3C,wBA+DI,SAAkBA,GACd,GAAI6L,EAAiB4B,mBAAmBzN,GAAU,OAAOA,EAEtC,aAAfA,EAAML,MACNJ,EAAOU,mBAAmB,0BAA2B,QAASD,GAGlE,IAAI0K,EAAQyC,GAAYnN,GAElB0I,EAAuC,CACzC/I,KAAMK,EAAML,KACZD,KAAM4M,GAAiBtM,EAAMN,MAC7BoN,SAAUpC,EAAMoC,SAChBX,OAASnM,EAAMmM,OAASnM,EAAMmM,OAAOrI,IAAIqF,EAAUK,YAAa,GAChE8D,QAAUtN,EAAMsN,QAAUtN,EAAMsN,QAAQxJ,IAAIqF,EAAUK,YAAa,GACnEuD,QAASrC,EAAMqC,QACfC,gBAAiBtC,EAAMsC,gBACvBL,IAAM3M,EAAM2M,IAAMvL,EAAAA,GAAAA,KAAepB,EAAM2M,KAAM,MAGjD,OAAO,IAAId,EAAiB7D,EAAmBU,KAnFvD,wBAsFI,SAAkB1I,GACd,IAAI0I,EAAc,CAAE/I,KAAM,YAGtBiN,GAFJ5M,EAAQ0M,EAAS1M,EAAO0I,IAENuD,MAAM,aACpBW,EAAMhM,OAAS,GACfrB,EAAOU,mBAAmB,0BAA2B,QAASD,GAGlE,IAAIqN,EAAST,EAAM,GAAGvK,MAAMkK,IAa5B,GAZKc,GACD9N,EAAOU,mBAAmB,6BAA8B,QAASD,GAGrE0I,EAAOhJ,KAAO2N,EAAO,GAAG9B,OACpB7C,EAAOhJ,MAAQ4M,GAAiB5D,EAAOhJ,MAE3CgJ,EAAOyD,OAASd,EAAYgC,EAAO,IAAI,GAEvCR,GAAeQ,EAAO,GAAG9B,OAAQ7C,GAG7BkE,EAAMhM,OAAS,EAAG,CACnB,IAAI8M,EAAUd,EAAM,GAAGvK,MAAMkK,IACH,IAArBmB,EAAQ,GAAGnC,QAAqC,IAArBmC,EAAQ,GAAGnC,QACtChM,EAAOU,mBAAmB,oBAAqB,QAASD,GAE5D0I,EAAO4E,QAAUjC,EAAYqC,EAAQ,IAAI,QAEzChF,EAAO4E,QAAU,GAGrB,OAAOzB,EAAiBrC,WAAWd,KAtH3C,gCAyHI,SAA0B1I,GACtB,OAAQA,GAASA,EAAM2L,aAA8B,aAAf3L,EAAML,SA1HpD,GAAsCoM,IAiItC,SAAS4B,GAAeC,GACpB,IAAMC,EAAMD,EAASjE,SAIrB,MAHY,kBAARkE,GAAmC,mBAARA,GAC3BtO,EAAOU,mBAAP,sCAA0D4N,EAA1D,UAAwE,WAAYD,GAEjFA,EAGJ,IAAM5B,GAAb,0IAEI,SAAOrC,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACbpK,EAAOU,mBAAmB,sBAAuB,SAAU0J,GAG3DA,IAAWf,EAAYI,KACvB,OAAOc,KAAKE,UAAU,CAClBrK,KAAM,QACND,KAAMI,KAAKJ,KACXyM,OAAQrM,KAAKqM,OAAOrI,KAAI,SAACsI,GAAD,OAAWtC,KAAKC,MAAMqC,EAAMzC,OAAOA,SAInE,IAAI9D,EAAS,GAUb,OARI8D,IAAWf,EAAYC,UACvBhD,GAAU,WAGdA,GAAU/F,KAAKJ,KAAO,IAAMI,KAAKqM,OAAOrI,KACpC,SAACsI,GAAD,OAAWA,EAAMzC,OAAOA,MAC1B5B,KAAM4B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,MAEtCwC,UA1BtB,mBA6BI,SAAYvL,GACR,MAAsB,kBAAXA,EACAgM,EAAc9B,WAAWlK,GAE7BgM,EAAcxC,WAAWxJ,KAjCxC,wBAoCI,SAAkBA,GACd,GAAIgM,EAAc8B,gBAAgB9N,GAAU,OAAOA,EAEhC,UAAfA,EAAML,MACNJ,EAAOU,mBAAmB,uBAAwB,QAASD,GAG/D,IAAM0I,EAA+B,CACjC/I,KAAMK,EAAML,KACZD,KAAM4M,GAAiBtM,EAAMN,MAC7ByM,OAASnM,EAAMmM,OAASnM,EAAMmM,OAAOrI,IAAIqF,EAAUK,YAAa,IAGpE,OAAOmE,GAAe,IAAI3B,EAAchE,EAAmBU,MAjDnE,wBAoDI,SAAkB1I,GACd,IAAI0I,EAAc,CAAE/I,KAAM,SAEtB0N,EAASrN,EAAMqC,MAAMkK,IAUzB,OATKc,GACD9N,EAAOU,mBAAmB,0BAA2B,QAASD,GAGlE0I,EAAOhJ,KAAO2N,EAAO,GAAG9B,OACpB7C,EAAOhJ,MAAQ4M,GAAiB5D,EAAOhJ,MAE3CgJ,EAAOyD,OAASd,EAAYgC,EAAO,IAAI,GAEhCM,GAAe3B,EAAcxC,WAAWd,MAjEvD,6BAoEI,SAAuB1I,GACnB,OAAQA,GAASA,EAAM2L,aAA8B,UAAf3L,EAAML,SArEpD,GAAmC+L,GAyEnC,SAAStB,GAAWzK,GAWhB,OARIA,EAAK0C,MAAM,mBACX1C,EAAO,UAAYA,EAAK6G,UAAU,GAC3B7G,EAAK0C,MAAM,oBAClB1C,EAAO,SAAWA,EAAK6G,UAAU,IAK9B7G,EAIX,IAAMoO,GAAkB,IAAI7E,OAAO,8BACnC,SAASoD,GAAiBtM,GAItB,OAHKA,GAAUA,EAAMqC,MAAM0L,KACvBxO,EAAOU,mBAAP,8BAAkDD,EAAlD,KAA6D,QAASA,GAEnEA,EAGX,IAAMuM,GAAa,IAAIrD,OAAO,gCCvgC9B,IAAM3J,GAAS,IAAIC,EAAAA,GAAOF,GAgBpB0O,GAAiB,IAAI9E,OAAO,mBAC5B+E,GAAkB,IAAI/E,OAAO,qBA+FtBgF,GAA4B,IA1FzC,WAGI,WAAYzM,IAAuB,gBAC/BrB,EAAAA,EAAAA,IAAeN,KAAM,aAAc2B,GAAc,MAJzD,wCAOI,SAAU6I,GAAgB,WAEtB,OAAQA,EAAMtF,UACV,IAAK,UACD,OAAO,IAAIxC,EAAa8H,EAAM5K,MAClC,IAAK,OACD,OAAO,IAAIsG,EAAasE,EAAM5K,MAClC,IAAK,SACD,OAAO,IAAIgI,EAAY4C,EAAM5K,MACjC,IAAK,QACD,OAAO,IAAI0G,EAAWkE,EAAM5K,MAChC,IAAK,QACD,OAAO,IAAIiG,EAAW7F,KAAKqO,UAAU7D,EAAMf,eAAgBe,EAAMhB,YAAagB,EAAM5K,MACxF,IAAK,QACD,OAAO,IAAImI,GAAYyC,EAAMb,YAAc,IAAI3F,KAAI,SAACsK,GAChD,OAAO,EAAKD,UAAUC,MACtB9D,EAAM5K,MACd,IAAK,GACD,OAAO,IAAI+G,EAAU6D,EAAM5K,MAInC,IAAI2C,EAAQiI,EAAM3K,KAAK0C,MAAM4L,IAC7B,GAAI5L,EAAO,CACP,IAAIiE,EAAOhE,SAASD,EAAM,IAAM,OAIhC,OAHa,IAATiE,GAAcA,EAAO,KAAQA,EAAO,IAAO,IAC3C/G,GAAOU,mBAAmB,WAAaoC,EAAM,GAAK,cAAe,QAASiI,GAEvE,IAAI5D,EAAYJ,EAAO,EAAiB,QAAbjE,EAAM,GAAeiI,EAAM5K,MAKjE,GADA2C,EAAQiI,EAAM3K,KAAK0C,MAAM2L,IACd,CACP,IAAI1H,EAAOhE,SAASD,EAAM,IAI1B,OAHa,IAATiE,GAAcA,EAAO,KACrB/G,GAAOU,mBAAmB,uBAAwB,QAASqK,GAExD,IAAIjE,EAAgBC,EAAMgE,EAAM5K,MAG3C,OAAOH,GAAOU,mBAAmB,eAAgB,OAAQqK,EAAM3K,QAhDvE,0BAmDI,WAAyB,OAAO,KAnDpC,wBAqDI,SAAWe,EAAkBgB,GACzB,OAAO,IAAIF,EAAOd,EAAMZ,KAAKuO,eAAgBvO,KAAK2B,WAAYC,KAtDtE,wBAyDI,WACI,OAAO,IAAIxB,EAAOJ,KAAKuO,kBA1D/B,6BA6DI,SAAgBvG,GAAwC,WAC9CtE,EAAuBsE,EAAMhE,KAAI,SAACnE,GAAD,OAAU,EAAKwO,UAAUhF,EAAUmF,KAAK3O,OAE/E,OADc,IAAIkI,EAAWrE,EAAQ,KACxBJ,iBAhErB,oBAmEI,SAAO0E,EAA0CrE,GAA0B,WACnEqE,EAAMlH,SAAW6C,EAAO7C,QACxBrB,GAAO8B,WAAW,+BAAgC7B,EAAAA,GAAAA,OAAAA,iBAAgC,CAC9EsG,MAAO,CAAEgC,MAAOA,EAAMlH,OAAQ6C,OAAQA,EAAO7C,QAC7CZ,MAAO,CAAE8H,MAAOA,EAAOrE,OAAQA,KAIvC,IAAMD,EAASsE,EAAMhE,KAAI,SAACnE,GAAD,OAAU,EAAKwO,UAAUhF,EAAUmF,KAAK3O,OAC3DuD,EAAS,IAAI2E,EAAWrE,EAAQ,KAEhC3C,EAASf,KAAKyO,aAEpB,OADArL,EAAMG,OAAOxC,EAAQ4C,GACd5C,EAAOH,OAhFtB,oBAmFI,SAAOoH,EAA0CpH,EAAiBqB,GAAe,WACvEyB,EAAuBsE,EAAMhE,KAAI,SAACnE,GAAD,OAAU,EAAKwO,UAAUhF,EAAUmF,KAAK3O,OAE/E,OADc,IAAIkI,EAAWrE,EAAQ,KACxBF,OAAOxD,KAAK0O,YAAWvN,EAAAA,EAAAA,IAASP,GAAOqB,QAtF5D,MChBMxC,GAAS,IAAIC,EAAAA,GAAOF,GAIbmP,GAAb,uHAAoCC,EAAAA,IAQvBC,GAAb,uHAA4CD,EAAAA,IAS/BE,GAAb,uHAAsCF,EAAAA,IAQzBG,GAAb,kJAII,SAAiB7O,GACb,SAAUA,IAASA,EAAM8O,gBALjC,GAA6BJ,EAAAA,IASvBK,GAA8G,CAChH,aAAc,CAAEC,UAAW,gBAAiBtP,KAAM,QAASyM,OAAQ,CAAE,UAAY8C,QAAQ,GACzF,aAAc,CAAED,UAAW,iBAAkBtP,KAAM,QAASyM,OAAQ,CAAE,aAG1E,SAAS+C,GAAgBC,EAAkBzM,GACvC,IAAM0M,EAAO,IAAIhK,MAAJ,iEAAqE+J,IAElF,OADMC,EAAM1M,MAAQA,EACb0M,EAgBJ,IAAMC,GAAb,WAcI,WAAYC,GAAmE,2BAC3E,IAAIC,EAAuD,GAEvDA,EADsB,kBAAfD,EACDxF,KAAKC,MAAMuF,GAEXA,GAGVlP,EAAAA,EAAAA,IAAeN,KAAM,YAAayP,EAAIzL,KAAI,SAAC8J,GACvC,OAAOlC,EAAS4C,KAAKV,MACtB4B,QAAO,SAAC5B,GAAD,OAA2B,MAAZA,OAEzBxN,EAAAA,EAAAA,IAAeN,KAAM,aAAa2P,EAAAA,EAAAA,IAAS,0CAA6B,cAAtCA,KAElCrP,EAAAA,EAAAA,IAAeN,KAAM,YAAa,KAClCM,EAAAA,EAAAA,IAAeN,KAAM,SAAU,KAC/BM,EAAAA,EAAAA,IAAeN,KAAM,SAAU,KAC/BM,EAAAA,EAAAA,IAAeN,KAAM,UAAW,IAGhCA,KAAKwP,UAAUnL,SAAQ,SAACyJ,GACpB,IAAI8B,EAAyC,KAC7C,OAAQ9B,EAASjO,MACb,IAAK,cACD,OAAI,EAAKgQ,YACLpQ,GAAOkN,KAAK,2CAIhBrM,EAAAA,EAAAA,IAAe,EAAM,SAA+BwN,GAExD,IAAK,WAGD8B,EAAS,EAAKE,UACd,MACJ,IAAK,QAEDF,EAAS,EAAKG,OACd,MACJ,IAAK,QACDH,EAAS,EAAKI,OACd,MACJ,QACI,OAGR,IAAId,EAAYpB,EAASjE,SACrB+F,EAAOV,GACPzP,GAAOkN,KAAK,0BAA4BuC,GAI5CU,EAAOV,GAAapB,KAInB9N,KAAK6P,SACNvP,EAAAA,EAAAA,IAAeN,KAAM,SAAUiM,GAAoBuC,KAAK,CACpDvB,SAAS,EACTpN,KAAM,kBAIdS,EAAAA,EAAAA,IAAeN,KAAM,gBAAgB,GA9E7C,qCAiFI,SAAO6J,GACEA,IAAUA,EAASf,EAAYG,MAChCY,IAAWf,EAAYC,SACvBtJ,GAAOU,mBAAmB,gDAAiD,SAAU0J,GAGzF,IAAM4F,EAAMzP,KAAKwP,UAAUxL,KAAI,SAAC8J,GAAD,OAAcA,EAASjE,OAAOA,MAG7D,OAAIA,IAAWf,EAAYI,KACfc,KAAKE,UAAUuF,EAAIzL,KAAI,SAACiM,GAAD,OAAOjG,KAAKC,MAAMgG,OAG9CR,IA9Ff,yBAmHI,SAAYS,GACR,IAAIC,EAAAA,EAAAA,IAAYD,GAA2B,CACvC,IAAK,IAAMtQ,KAAQI,KAAK8P,UACpB,GAAII,IAA6BlQ,KAAKoQ,WAAWxQ,GAC7C,OAAOI,KAAK8P,UAAUlQ,GAG9BH,GAAOU,mBAAmB,uBAAwB,UAAW+P,GAIjE,IAA+C,IAA3CA,EAAyBzH,QAAQ,KAAa,CAC9C,IAAM7I,EAAOsQ,EAAyBzE,OAChC4E,EAAW9K,OAAO+K,KAAKtQ,KAAK8P,WAAWJ,QAAO,SAACa,GAAD,OAAQA,EAAEpE,MAAM,KAAgB,KAAOvM,KAO3F,OANwB,IAApByQ,EAASvP,OACTrB,GAAOU,mBAAmB,uBAAwB,OAAQP,GACnDyQ,EAASvP,OAAS,GACzBrB,GAAOU,mBAAmB,8BAA+B,OAAQP,GAG9DI,KAAK8P,UAAUO,EAAS,IAInC,IAAMtK,EAAS/F,KAAK8P,UAAU/D,GAAiB3B,WAAW8F,GAA0BrG,UAIpF,OAHK9D,GACDtG,GAAOU,mBAAmB,uBAAwB,YAAa+P,GAE5DnK,IA/If,sBAmJI,SAASyK,GACL,IAAIL,EAAAA,EAAAA,IAAYK,GAAyB,CACrC,IAAMC,EAAYD,EAAuBE,cACzC,IAAK,IAAM9Q,KAAQI,KAAK+P,OACpB,GAAIU,IAAczQ,KAAK2Q,cAAc/Q,GACjC,OAAOI,KAAK+P,OAAOnQ,GAG3BH,GAAOU,mBAAmB,oBAAqB,YAAasQ,GAIhE,IAA6C,IAAzCD,EAAuB/H,QAAQ,KAAa,CAC5C,IAAM7I,EAAO4Q,EAAuB/E,OAC9B4E,EAAW9K,OAAO+K,KAAKtQ,KAAK+P,QAAQL,QAAO,SAACa,GAAD,OAAQA,EAAEpE,MAAM,KAAgB,KAAOvM,KAOxF,OANwB,IAApByQ,EAASvP,OACTrB,GAAOU,mBAAmB,oBAAqB,OAAQP,GAChDyQ,EAASvP,OAAS,GACzBrB,GAAOU,mBAAmB,2BAA4B,OAAQP,GAG3DI,KAAK+P,OAAOM,EAAS,IAIhC,IAAMtK,EAAS/F,KAAK+P,OAAO/D,EAAc5B,WAAWoG,GAAwB3G,UAI5E,OAHK9D,GACDtG,GAAOU,mBAAmB,oBAAqB,YAAaqQ,GAEzDzK,IAhLf,sBAoLI,SAASmK,GACL,IAAIC,EAAAA,EAAAA,IAAYD,GAA2B,CACvC,IAAME,GAAaT,EAAAA,EAAAA,IAA2D3P,KAAK4Q,YAAa,cAChG,IAAK,IAAMhR,KAAQI,KAAKgQ,OAAQ,CAE5B,GAAIE,IAA6BE,EADnBpQ,KAAKgQ,OAAOpQ,IAEtB,OAAOI,KAAKgQ,OAAOpQ,GAG3BH,GAAOU,mBAAmB,oBAAqB,UAAW+P,GAI9D,IAA+C,IAA3CA,EAAyBzH,QAAQ,KAAa,CAC9C,IAAM7I,EAAOsQ,EAAyBzE,OAChC4E,EAAW9K,OAAO+K,KAAKtQ,KAAKgQ,QAAQN,QAAO,SAACa,GAAD,OAAQA,EAAEpE,MAAM,KAAgB,KAAOvM,KAOxF,OANwB,IAApByQ,EAASvP,OACTrB,GAAOU,mBAAmB,oBAAqB,OAAQP,GAChDyQ,EAASvP,OAAS,GACzBrB,GAAOU,mBAAmB,2BAA4B,OAAQP,GAG3DI,KAAKgQ,OAAOK,EAAS,IAIhC,IAAMtK,EAAS/F,KAAKgQ,OAAOjE,GAAiB3B,WAAW8F,GAA0BrG,UAIjF,OAHK9D,GACDtG,GAAOU,mBAAmB,oBAAqB,YAAa+P,GAEzDnK,IAlNf,wBAsNI,SAAW+H,GACP,GAAyB,kBAAdA,EACP,IACIA,EAAW9N,KAAK6Q,YAAY/C,GAC9B,MAAOlL,GACL,IACIkL,EAAW9N,KAAK8Q,SAAiBhD,GACnC,MAAOiD,GACL,MAAMnO,GAKlB,OAAO+M,EAAAA,EAAAA,IAA2D3P,KAAK4Q,YAAa,aAA7EjB,CAA2F7B,KAnO1G,2BAuOI,SAAckD,GAKV,MAJ8B,kBAAnBA,IACPA,EAAgBhR,KAAKiR,SAASD,KAG3BrB,EAAAA,EAAAA,IAAwC3P,KAAK4Q,YAAa,gBAA1DjB,CAA2EqB,KA5O1F,2BAgPI,SAAcpI,EAAkChI,GAC5C,OAAOZ,KAAKkR,UAAU1N,OAAOoF,EAAQhI,KAjP7C,2BAoPI,SAAcgI,EAAkCjF,GAC5C,OAAO3D,KAAKkR,UAAU3N,OAAOqF,EAAQjF,KArP7C,0BAwPI,SAAaA,GACT,OAAO3D,KAAKmR,cAAcnR,KAAK6P,OAAOxD,OAAQ1I,GAAU,MAzPhE,+BA4PI,SAAkBmK,EAAkClN,GACvB,kBAAdkN,IACPA,EAAW9N,KAAK8Q,SAAShD,IAG7B,IAAM5M,GAAQC,EAAAA,EAAAA,IAASP,GAMvB,OAJIkB,EAAAA,EAAAA,IAAQZ,EAAMG,MAAM,EAAG,MAAQrB,KAAKoQ,WAAWtC,IAC/CrO,GAAOU,mBAAP,8CAAkE2N,EAASlO,KAA3E,KAAqF,QAAQkC,EAAAA,EAAAA,IAAQZ,IAGlGlB,KAAKoR,cAActD,EAASzB,OAAQnL,EAAMG,MAAM,MAvQ/D,+BA0QI,SAAkByM,EAAkCnK,GAKhD,MAJyB,kBAAdmK,IACPA,EAAW9N,KAAK8Q,SAAShD,KAGtBhM,EAAAA,EAAAA,KAAQb,EAAAA,EAAAA,IAAO,CAClBjB,KAAKoQ,WAAWtC,GAChB9N,KAAKmR,cAAcrD,EAASzB,OAAQ1I,GAAU,SAjR1D,gCAsRI,SAAmB0N,EAA6CzQ,GAC3B,kBAAtByQ,IACPA,EAAmBrR,KAAK6Q,YAAYQ,IAGxC,IAAMnQ,GAAQC,EAAAA,EAAAA,IAASP,GAMvB,OAJIkB,EAAAA,EAAAA,IAAQZ,EAAMG,MAAM,EAAG,MAAQrB,KAAKoQ,WAAWiB,IAC/C5R,GAAOU,mBAAP,iDAAqEkR,EAAiBzR,KAAtF,KAAgG,QAAQkC,EAAAA,EAAAA,IAAQZ,IAG7GlB,KAAKoR,cAAcC,EAAiBhF,OAAQnL,EAAMG,MAAM,MAjSvE,gCAqSI,SAAmBgQ,EAA6C1N,GAK5D,MAJiC,kBAAtB0N,IACPA,EAAmBrR,KAAK6Q,YAAYQ,KAGjCvP,EAAAA,EAAAA,KAAQb,EAAAA,EAAAA,IAAO,CAClBjB,KAAKoQ,WAAWiB,GAChBrR,KAAKmR,cAAcE,EAAiBhF,OAAQ1I,GAAU,SA5SlE,kCAiTI,SAAqB0N,EAA6CzQ,GAC7B,kBAAtByQ,IACPA,EAAmBrR,KAAK6Q,YAAYQ,IAGxC,IAAInQ,GAAQC,EAAAA,EAAAA,IAASP,GAEjBuO,EAAiB,KACjBlP,EAAU,GACVqR,EAAoB,KACpBC,EAAoB,KACpBC,EAAyB,KAC7B,OAAQtQ,EAAMJ,OAASd,KAAKkR,UAAU3C,gBAClC,KAAK,EACD,IACI,OAAOvO,KAAKkR,UAAU1N,OAAO6N,EAAiB7D,QAAStM,GACzD,MAAO0B,IACT,MAEJ,KAAK,EACD,IAAM6O,GAAW3P,EAAAA,EAAAA,IAAQZ,EAAMG,MAAM,EAAG,IAClCqQ,EAAUzC,GAAcwC,GAC9B,GAAIC,EACAJ,EAAYtR,KAAKkR,UAAU1N,OAAOkO,EAAQrF,OAAQnL,EAAMG,MAAM,IAC9DkQ,EAAYG,EAAQ9R,KACpB4R,EAAiBE,EAAQxC,UACrBwC,EAAQvC,SAAUA,EAASmC,EAAU,IACvB,UAAdC,EACAtR,EAAU,4EAAH,OAAgF+J,KAAKE,UAAUoH,EAAU,KAC3F,UAAdC,IACPtR,EAAU,yEAAH,OAA6EqR,EAAU,UAGlG,IACI,IAAM1O,EAAQ5C,KAAK8Q,SAASW,GAC5BH,EAAYtR,KAAKkR,UAAU1N,OAAOZ,EAAMyJ,OAAQnL,EAAMG,MAAM,IAC5DkQ,EAAY3O,EAAMhD,KAClB4R,EAAiB5O,EAAMiH,SACzB,MAAOjH,KAMrB,OAAOnD,GAAO8B,WAAW,wBAA0BtB,EAASP,EAAAA,GAAAA,OAAAA,eAA8B,CACtFiS,OAAQN,EAAiBxH,SACzBjJ,MAAMkB,EAAAA,EAAAA,IAAQlB,GAAO0Q,UAAAA,EAAWC,UAAAA,EAAWC,eAAAA,EAAgBrC,OAAAA,MA/VvE,kCAoWI,SAAqBkC,EAA6C1N,GAK9D,MAJiC,kBAAtB0N,IACPA,EAAmBrR,KAAK6Q,YAAYQ,KAGjCvP,EAAAA,EAAAA,IAAQ9B,KAAKkR,UAAU3N,OAAO8N,EAAiB7D,QAAS7J,GAAU,OAzWjF,gCA6WI,SAAmBqN,EAA8BrN,GAA0B,WACzC,kBAAnBqN,IACPA,EAAgBhR,KAAKiR,SAASD,IAG9BrN,EAAO7C,OAASkQ,EAAc3E,OAAOvL,QACrCrB,GAAO8B,WAAW,0BAA4ByP,EAAcnH,SAAUnK,EAAAA,GAAAA,OAAAA,oBAAmC,CACrGuE,SAAU,SACV/D,MAAOyD,IAIf,IAAIiO,EAAwC,GACvCZ,EAAc5E,WAAawF,EAAO/Q,KAAKb,KAAK2Q,cAAcK,IAE/D,IAAMa,EAAc,SAACrH,EAAkBtK,GACnC,MAAmB,WAAfsK,EAAM3K,MACEiS,EAAAA,EAAAA,IAAG5R,GACW,UAAfsK,EAAM3K,MACLkS,EAAAA,EAAAA,IAAUjQ,EAAAA,EAAAA,IAAQ5B,KAGX,SAAfsK,EAAM3K,MAAqC,mBAAXK,IAChCA,EAASA,EAAQ,OAAQ,QAGzBsK,EAAM3K,KAAK0C,MAAM,YACjBrC,EAAQoB,EAAAA,GAAAA,KAAepB,GAAOgD,eAIf,YAAfsH,EAAM3K,MAAsB,EAAKqR,UAAU3N,OAAQ,CAAE,WAAa,CAAErD,KACjE8C,EAAAA,EAAAA,KAAWlB,EAAAA,EAAAA,IAAQ5B,GAAQ,MA0BtC,IAvBAyD,EAAOU,SAAQ,SAACnE,EAAOoE,GAEnB,IAAIkG,EAAQwG,EAAc3E,OAAO/H,GAE5BkG,EAAMV,QAOE,MAAT5J,EACA0R,EAAO/Q,KAAK,MACc,UAAnB2J,EAAMtF,UAA2C,UAAnBsF,EAAMtF,SAC3CzF,GAAOU,mBAAmB,gDAAkD,YAAcqK,EAAM5K,KAAOM,GAChG2D,MAAMC,QAAQ5D,GACrB0R,EAAO/Q,KAAKX,EAAM8D,KAAI,SAAC9D,GAAD,OAAW2R,EAAYrH,EAAOtK,OAEpD0R,EAAO/Q,KAAKgR,EAAYrH,EAAOtK,IAblB,MAATA,GACAT,GAAOU,mBAAmB,qDAAuD,YAAcqK,EAAM5K,KAAOM,MAiBjH0R,EAAO9Q,QAAwC,OAA9B8Q,EAAOA,EAAO9Q,OAAS,IAC3C8Q,EAAOI,MAGX,OAAOJ,IA3af,4BA8aI,SAAeZ,EAA8BrN,GAA0B,WACrC,kBAAnBqN,IACPA,EAAgBhR,KAAKiR,SAASD,IAGlC,IAAMY,EAAwB,GAExBK,EAA8B,GAC9BC,EAA4B,GA6BlC,OA3BKlB,EAAc5E,WACfwF,EAAO/Q,KAAKb,KAAK2Q,cAAcK,IAG/BrN,EAAO7C,SAAWkQ,EAAc3E,OAAOvL,QACvCrB,GAAOU,mBAAmB,kCAAmC,SAAUwD,GAG3EqN,EAAc3E,OAAOhI,SAAQ,SAACmG,EAAOlG,GACjC,IAAMpE,EAAQyD,EAAOW,GACrB,GAAIkG,EAAMV,QACN,GAAmB,WAAfU,EAAM3K,KACN+R,EAAO/Q,MAAKiR,EAAAA,EAAAA,IAAG5R,SACZ,GAAmB,UAAfsK,EAAM3K,KACb+R,EAAO/Q,MAAKkR,EAAAA,EAAAA,GAAU7R,QACnB,IAAuB,UAAnBsK,EAAMtF,UAA2C,UAAnBsF,EAAMtF,SAE3C,MAAM,IAAII,MAAM,mBAEhBsM,EAAO/Q,KAAK,EAAKqQ,UAAU3N,OAAO,CAAEiH,EAAM3K,MAAQ,CAAEK,UAGxD+R,EAAUpR,KAAK2J,GACf0H,EAAWrR,KAAKX,MAIjB,CACHU,KAAMZ,KAAKkR,UAAU3N,OAAO0O,EAAYC,GACxCN,OAAQA,KArdpB,4BA0dI,SAAeZ,EAAuCpQ,EAAiBgR,GAKnE,GAJ8B,kBAAnBZ,IACPA,EAAgBhR,KAAKiR,SAASD,IAGpB,MAAVY,IAAmBZ,EAAc5E,UAAW,CAC5C,IAAI+F,EAAYnS,KAAK2Q,cAAcK,IAC9Bb,EAAAA,EAAAA,IAAYyB,EAAO,GAAI,KAAOA,EAAO,GAAGlB,gBAAkByB,GAC3D1S,GAAO8B,WAAW,0BAA2B7B,EAAAA,GAAAA,OAAAA,iBAAgC,CAAEuE,SAAU,YAAamO,SAAUD,EAAWjS,MAAO0R,EAAO,KAE7IA,EAASA,EAAOvQ,MAAM,GAG1B,IAAIyI,EAA4B,GAC5BuI,EAA+B,GAC/BtS,EAA0B,GAE9BiR,EAAc3E,OAAOhI,SAAQ,SAACmG,EAAOlG,GAC7BkG,EAAMV,QACa,WAAfU,EAAM3K,MAAoC,UAAf2K,EAAM3K,MAAuC,UAAnB2K,EAAMtF,UAA2C,UAAnBsF,EAAMtF,UACzF4E,EAAQjJ,KAAKwI,EAAUK,WAAW,CAAE7J,KAAM,UAAWD,KAAM4K,EAAM5K,QACjEG,EAAQc,MAAK,KAEbiJ,EAAQjJ,KAAK2J,GACbzK,EAAQc,MAAK,KAGjBwR,EAAWxR,KAAK2J,GAChBzK,EAAQc,MAAK,OAIrB,IAAIyR,EAA2B,MAAVV,EAAkB5R,KAAKkR,UAAU1N,OAAOsG,GAAS7I,EAAAA,EAAAA,IAAO2Q,IAAU,KACnFW,EAAmBvS,KAAKkR,UAAU1N,OAAO6O,EAAYzR,GAAM,GAE3DmF,EAAkD,GAClDyM,EAAkB,EAAGC,EAAe,EACxCzB,EAAc3E,OAAOhI,SAAQ,SAACmG,EAAOlG,GACjC,GAAIkG,EAAMV,QACN,GAAqB,MAAjBwI,EACAvM,EAAOzB,GAAS,IAAIyK,GAAQ,CAAEC,YAAY,EAAM0D,KAAM,YAEnD,GAAI3S,EAAQuE,GACfyB,EAAOzB,GAAS,IAAIyK,GAAQ,CAAEC,YAAY,EAAM0D,KAAMJ,EAAcG,YAGpE,IACI1M,EAAOzB,GAASgO,EAAcG,KAChC,MAAO7P,GACLmD,EAAOzB,GAAS1B,OAIxB,IACImD,EAAOzB,GAASiO,EAAiBC,KACnC,MAAO5P,GACLmD,EAAOzB,GAAS1B,EAKxB,GAAI4H,EAAM5K,MAA8B,MAAtBmG,EAAOyE,EAAM5K,MAAe,CAC1C,IAAMM,EAAQ6F,EAAOzB,GAGjBpE,aAAiBoF,MACjBC,OAAOC,eAAeO,EAAQyE,EAAM5K,KAAM,CACtC6F,YAAY,EACZC,IAAK,WAAQ,MAAM0J,GAAgB,YAAD,OAAcpF,KAAKE,UAAUM,EAAM5K,OAAUM,MAGnF6F,EAAOyE,EAAM5K,MAAQM,MAMjC,IA7EiG,eA6ExFyF,GACL,IAAMzF,EAAQ6F,EAAOJ,GACjBzF,aAAiBoF,OACjBC,OAAOC,eAAeO,EAAQJ,EAAG,CAC7BF,YAAY,EACZC,IAAK,WAAQ,MAAM0J,GAAgB,SAAD,OAAWzJ,GAAMzF,OALtDyF,EAAI,EAAGA,EAAII,EAAOjF,OAAQ6E,IAAK,EAA/BA,GAUT,OAAOJ,OAAOK,OAAOG,KAjjB7B,8BAsjBI,SAAiB4M,GACb,IAAI7E,EAAW9N,KAAK6Q,YAAY8B,EAAG/R,KAAK8F,UAAU,EAAG,IAAIgK,eAEzD,OAAK5C,EAEE,IAAIe,GAAuB,CAC9B+D,KAAM5S,KAAKkR,UAAU1N,OAAOsK,EAASzB,OAAQ,KAAOsG,EAAG/R,KAAK8F,UAAU,KACtE2K,iBAAkBvD,EAClBlO,KAAMkO,EAASlO,KACfsP,UAAWpB,EAASjE,SACpBd,QAAS/I,KAAKoQ,WAAWtC,GACzB5N,MAAOoB,EAAAA,GAAAA,KAAeqR,EAAGzS,OAAS,OARd,OAzjBhC,sBA0kBI,SAASkN,GACL,IAAIU,EAAW9N,KAAKiR,SAAS7D,EAAIwE,OAAO,IAExC,OAAK9D,GAAYA,EAAS1B,UAAoB,KAOxC,IAAIuC,GAAe,CACrBqC,cAAelD,EACflO,KAAMkO,EAASlO,KACfsP,UAAWpB,EAASjE,SACpBgJ,MAAO7S,KAAK2Q,cAAc7C,GAC1B8E,KAAM5S,KAAK8S,eAAehF,EAAUV,EAAIxM,KAAMwM,EAAIwE,YAzlB9D,wBA6lBI,SAAWhR,GACP,IAAMmS,GAAUjR,EAAAA,EAAAA,IAAQlB,GACpBkN,EAAW9N,KAAK8Q,SAASiC,EAAQrM,UAAU,EAAG,IAAIgK,eAEtD,OAAK5C,EAEE,IAAIgB,GAAiB,CACxB8D,KAAM5S,KAAKkR,UAAU1N,OAAOsK,EAASzB,OAAQ,KAAO0G,EAAQrM,UAAU,KACtEsM,cAAelF,EACflO,KAAMkO,EAASlO,KACfsP,UAAWpB,EAASjE,SACpBd,QAAS/I,KAAKoQ,WAAWtC,KAPL,QAjmBhC,0BAkGI,WACI,OAAOM,KAnGf,wBAsGI,SAAkB6E,GACd,OAAOtQ,EAAAA,EAAAA,IAAWsQ,KAvG1B,wBA0GI,SAAkBnF,GACd,OAAOoF,EAAAA,EAAAA,KAAapB,EAAAA,EAAAA,IAAGhE,EAASjE,UAAW,EAAG,KA3GtD,2BA8GI,SAAqBmH,GACjB,OAAOc,EAAAA,EAAAA,IAAGd,EAAcnH,YA/GhC,yBAynBI,SAAmB3J,GACf,SAAUA,IAASA,EAAMiT,kBA1nBjC,K,2UC/DM1T,GAAS,IAAIC,EAAAA,GCdI,mBDsHvB,SAAe0T,GAAYC,EAA6BC,G,6HACvC,O,SAAMA,E,aAEE,kBAFf1T,EAAAA,EAAAA,OAGFH,GAAOU,mBAAmB,8BAA+B,OAAQP,G,4BAK1D+C,EAAAA,EAAAA,IAAW/C,I,wCASN,OANXyT,GACD5T,GAAO8B,WAAW,sDAAuD7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAC1G6J,UAAW,gB,UAIG8J,EAASD,YAAYxT,G,eAE5B,OAFTqT,EAAAA,EAAAA,OAGFxT,GAAOU,mBAAmB,kDAAmD,OAAQP,G,kBAGlFqT,G,yDAIX,SAAeM,GAAiBF,EAA6BnT,EAAYsT,G,yHACjE3P,MAAMC,QAAQ0P,GAAd,C,eACO,O,SAAMC,QAAQC,IAAIF,EAAUxP,KAAI,SAACwP,EAAWlP,GAC/C,OAAOiP,GACHF,EACExP,MAAMC,QAAQ5D,GAAUA,EAAMoE,GAAQpE,EAAMsT,EAAU5T,MACxD4T,O,yEAKW,YAAnBA,EAAU3T,KAAS,C,eACZ,O,SAAMuT,GAAYC,EAAUnT,G,UAGhB,UAAnBsT,EAAU3T,KAAS,C,gBACZ,O,UAAM0T,GAAiBF,EAAUnT,EAAOsT,EAAU7J,Y,WAGlC,UAAvB6J,EAAUtO,SAAa,C,mBAClBrB,MAAMC,QAAQ5D,GAAd,C,yCACMuT,QAAQE,OAAOlU,GAAOmU,UAAU,0BAA2BlU,EAAAA,GAAAA,OAAAA,iBAAgC,CAC9FuE,SAAU,QACV/D,MAAAA,M,QAGD,O,UAAMuT,QAAQC,IAAIxT,EAAM8D,KAAI,SAAC8C,GAAD,OAAOyM,GAAiBF,EAAUvM,EAAG0M,EAAU/J,mB,iCAG/EvJ,G,4CAGX,SAAe2T,GAAoBC,EAAoBhG,EAA4B8E,G,oJA0C9D,OAxCbmB,EAA2B,GAC3BnB,EAAK9R,SAAWgN,EAASzB,OAAOvL,OAAS,GAAuC,kBAA3B8R,EAAKA,EAAK9R,OAAS,KACxEiT,GAAYC,EAAAA,EAAAA,IAAYpB,EAAKZ,QAIjCvS,GAAOwG,mBAAmB2M,EAAK9R,OAAQgN,EAASzB,OAAOvL,OAAQ,sBAG3DgT,EAASG,OACLF,EAAUvF,KAGVuF,EAAUvF,MAAO0F,EAAAA,EAAAA,IAAkB,CAC/BC,SAAUf,GAAYU,EAASG,OAAQF,EAAUvF,MACjDyF,OAAQH,EAASG,OAAOtR,eACzByR,MAAK,SAAOC,GAAP,OAAgBC,GAAAA,OAAAA,OAAAA,EAAAA,IAAAA,MAAAA,SAAAA,IAAA,wEAChB3R,EAAAA,EAAAA,IAAW0R,EAAMJ,UAAYI,EAAMF,UACnC1U,GAAO8B,WAAW,8CAA+C7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAClG6J,UAAW,mBAHC,kBAOb8K,EAAMF,UAPO,8CAWxBJ,EAAUvF,KAAOsF,EAASG,OAAOtR,aAG9BoR,EAAUvF,OACjBuF,EAAUvF,KAAO4E,GAAYU,EAASS,SAAUR,EAAUvF,O,UASvC0F,EAAAA,EAAAA,IAAkB,CACrCtB,KAAMW,GAAiBO,EAASG,QAAUH,EAASS,SAAU3B,EAAM9E,EAASzB,QAC5E4G,QAASa,EAASU,gBAClBT,WAAYG,EAAAA,EAAAA,IAAkBH,IAAc,K,OAyBhD,GA5BMU,EAAAA,EAAAA,KAOA7T,EAAOkT,EAASY,UAAUC,mBAAmB7G,EAAU2G,EAAS7B,MAChED,EAA2B,CAC/B/R,KAAMA,EACNgU,GAAIH,EAASxB,SAOC,OAHV4B,EAAKJ,EAASV,WAGbe,QAAiBnC,EAAGmC,MAAQxT,EAAAA,GAAAA,KAAeuT,EAAGC,OAAOrS,YACzC,MAAfoS,EAAGE,WAAoBpC,EAAGoC,SAAWzT,EAAAA,GAAAA,KAAeuT,EAAGE,WACxC,MAAfF,EAAGG,WAAoBrC,EAAGqC,SAAW1T,EAAAA,GAAAA,KAAeuT,EAAGG,WACpC,MAAnBH,EAAGI,eAAwBtC,EAAGsC,aAAe3T,EAAAA,GAAAA,KAAeuT,EAAGI,eACpC,MAA3BJ,EAAGK,uBAAgCvC,EAAGuC,qBAAuB5T,EAAAA,GAAAA,KAAeuT,EAAGK,uBACpE,MAAXL,EAAGrG,OAAgBmE,EAAGnE,KAAOqG,EAAGrG,MAErB,MAAXqG,EAAGhV,OAAgB8S,EAAG9S,KAAOgV,EAAGhV,MACf,MAAjBgV,EAAGM,aAAsBxC,EAAGwC,YAAaC,EAAAA,GAAAA,IAAcP,EAAGM,aAG3C,MAAfxC,EAAGoC,UAAoC,MAAhBjH,EAASjB,IAAa,CAQ7C,IAFIwI,EAAY,KACVnU,GAAQC,EAAAA,EAAAA,IAASP,GACd+E,EAAI,EAAGA,EAAIzE,EAAMJ,OAAQ6E,IAC9B0P,GAAa,EACTnU,EAAMyE,KAAM0P,GAAa,IAEjC1C,EAAGoC,SAAWzT,EAAAA,GAAAA,KAAewM,EAASjB,KAAKxF,IAAIgO,G,OAI/CR,EAAG3U,SACGoV,EAAUhU,EAAAA,GAAAA,KAAeuT,EAAG3U,QACrBiG,UAAa2H,EAASb,SAC/BxN,GAAO8B,WAAW,2CAA4C7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAC/F6J,UAAW,kBACXrJ,MAAO6T,EAAU7T,QAGzByS,EAAGzS,MAAQoV,GAGXT,EAAGU,aACH5C,EAAG4C,YAAavB,EAAAA,EAAAA,IAAYa,EAAGU,aAG/BV,EAAGW,kBACH7C,EAAG6C,kBAAoBX,EAAGW,wBAIvBzB,EAAUe,aACVf,EAAUgB,gBACVhB,EAAUiB,gBACVjB,EAAUvF,YACVuF,EAAU7T,aAEV6T,EAAUlU,YACVkU,EAAUoB,kBAEVpB,EAAUkB,oBACVlB,EAAUmB,4BAEVnB,EAAUwB,kBACVxB,EAAUyB,iBAIXC,EAAYlQ,OAAO+K,KAAKyD,GAAWrE,QAAO,SAAC7G,GAAD,OAAmC,MAAnBkL,EAAWlL,OAC7D/H,QACVrB,GAAO8B,WAAP,0BAAsCkU,EAAUzR,KAAI,SAAC0R,GAAD,OAAO1L,KAAKE,UAAUwL,MAAIzN,KAAK,MAASvI,EAAAA,GAAAA,OAAAA,sBAAqC,CAC7H6J,UAAW,YACXwK,UAAW0B,I,kBAIZ9C,G,4CAwBX,SAASgD,GAAgB7B,EAAoBnB,GACzC,IAAMiD,EAAOjD,EAAGiD,KAAKC,KAAKlD,GAC1BA,EAAGiD,KAAO,SAACE,GACP,OAAOF,EAAKE,GAAe1B,MAAK,SAAC2B,GAiC7B,OAhCAA,EAAQhG,OAASgG,EAAQC,KAAKhS,KAAI,SAACoJ,GAC/B,IAAI6I,GAAuBC,EAAAA,EAAAA,IAAS9I,GAChC+I,EAAyB,KAC7B,IACIA,EAASrC,EAASY,UAAU0B,SAAShJ,GACvC,MAAOiJ,IAwBT,OArBIF,IACAF,EAAMrD,KAAOuD,EAAOvD,KACpBqD,EAAMzS,OAAS,SAAC5C,EAAiBgR,GAC7B,OAAOkC,EAASY,UAAU5B,eAAeqD,EAAOnF,cAAepQ,EAAMgR,IAEzEqE,EAAMA,MAAQE,EAAOvW,KACrBqW,EAAMK,eAAiBH,EAAOjH,WAIlC+G,EAAMM,eAAiB,WAAQ,OAAOzC,EAASS,UAC/C0B,EAAMO,SAAW,WACb,OAAO1C,EAASS,SAASiC,SAAST,EAAQU,YAE9CR,EAAMS,eAAiB,WACnB,OAAO5C,EAASS,SAASmC,eAAeX,EAAQY,kBAEpDV,EAAMW,sBAAwB,WAC1B,OAAOnD,QAAQoD,QAAQd,IAGpBE,KAGJF,MAKnB,SAASe,GAAUhD,EAAoBhG,EAA4BiJ,GAC/D,IAAMC,EAAoBlD,EAASG,QAAUH,EAASS,SAEtD,OAAO,WAAkC,2BAAhB3B,EAAgB,yBAAhBA,EAAgB,gB,sIAEjCqE,OAAW5T,EACXuP,EAAK9R,SAAWgN,EAASzB,OAAOvL,OAAS,GAAuC,kBAA3B8R,EAAKA,EAAK9R,OAAS,GAAQ,C,kBAEtD,OADpBiT,GAAYC,EAAAA,EAAAA,IAAYpB,EAAKZ,QACrBiF,SAAY,C,eACX,O,SAAMlD,EAAUkD,S,OAA3BA,EAAAA,EAAAA,K,cAEGlD,EAAUkD,SACjBrE,EAAK/R,KAAKkT,G,UAIoB,MAA9BD,EAASoD,kBAAqB,C,gBAC9B,O,UAAMpD,EAASqD,UAAUF,G,QAIlB,O,UAAMpD,GAAoBC,EAAUhG,EAAU8E,G,QAC1C,OADTD,EAAAA,EAAAA,K,UACeqE,EAAiBI,KAAKzE,EAAIsE,G,eAAzClR,EAAAA,EAAAA,K,UAGE7F,EAAQ4T,EAASY,UAAU2C,qBAAqBvJ,EAAU/H,GAC1DgR,GAA8C,IAA5BjJ,EAASN,QAAQ1M,SACnCZ,EAAQA,EAAM,I,kBAEXA,G,yCAGH,KAAM+E,OAASvF,EAAAA,GAAAA,OAAAA,iBACf,KAAMuT,QAAUa,EAASb,QACzB,KAAML,KAAOA,EACb,KAAM0E,YAAc3E,G,iEA+BpC,SAAS4E,GAAazD,EAAoBhG,EAA4BiJ,GAClE,OAAIjJ,EAASd,SACF8J,GAAUhD,EAAUhG,EAAUiJ,GA1B7C,SAAmBjD,EAAoBhG,GACnC,OAAO,WAAkC,2BAAhB8E,EAAgB,yBAAhBA,EAAgB,gB,gIAChCkB,EAASG,QACVxU,GAAO8B,WAAW,0CAA2C7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAC9F6J,UAAW,oBAKe,MAA9BuK,EAASoD,kBAAqB,C,eAC9B,O,SAAMpD,EAASqD,Y,OAGD,O,SAAMtD,GAAoBC,EAAUhG,EAAU8E,G,OAErD,OAFL4E,EAAAA,EAAAA,K,SAEW1D,EAASG,OAAOwD,gBAAgBD,G,cAA3C7E,EAAAA,EAAAA,KAGNgD,GAAgB7B,EAAUnB,G,kBAEnBA,G,6CAQJ+E,CAAU5D,EAAUhG,GAG/B,SAAS6J,GAAYjI,GACjB,OAAIA,EAAOuD,SAA6B,MAAjBvD,EAAOkC,QAA2C,IAAzBlC,EAAOkC,OAAO9Q,QAItD4O,EAAOuD,SAAW,KAAO,KAAOvD,EAAOkC,OAASlC,EAAOkC,OAAO5N,KAAI,SAAC6O,GACvE,OAAIhP,MAAMC,QAAQ+O,GACPA,EAAM5K,KAAK,KAEf4K,KACR5K,KAAK,KAAM,IARH,I,IAWT2P,GAAAA,WAKF,WAAYC,EAAanI,IAAmB,gBACxCpP,EAAAA,EAAAA,IAAeN,KAAM,MAAO6X,IAC5BvX,EAAAA,EAAAA,IAAeN,KAAM,SAAU0P,GAC/B1P,KAAK8X,WAAa,G,0CAGtB,SAAYC,EAAoBC,GAC5BhY,KAAK8X,WAAWjX,KAAK,CAAEkX,SAAUA,EAAUC,KAAMA,M,4BAGrD,SAAeD,GACX,IAAIE,GAAO,EACXjY,KAAK8X,WAAa9X,KAAK8X,WAAWpI,QAAO,SAACwI,GACtC,SAAID,GAAQC,EAAKH,WAAaA,KAC9BE,GAAO,GACA,Q,gCAIf,WACIjY,KAAK8X,WAAa,K,uBAGtB,WACI,OAAO9X,KAAK8X,WAAW9T,KAAI,SAAC2B,GAAD,OAAOA,EAAEoS,c,2BAGxC,WACI,OAAO/X,KAAK8X,WAAWhX,S,iBAG3B,SAAI8R,GAAgB,WACVuF,EAAgBnY,KAAKmY,gBAc3B,OAbAnY,KAAK8X,WAAa9X,KAAK8X,WAAWpI,QAAO,SAACwI,GAEtC,IAAME,EAAWxF,EAAKvR,QAQtB,OALAgX,YAAW,WACPH,EAAKH,SAASO,MAAM,EAAMF,KAC3B,IAGMF,EAAKF,QAGXG,I,0BAGX,SAAalC,M,qBAIb,SAAQA,GACJ,MAAO,CAAEA,O,EA3DX2B,GA+DAW,GAAAA,SAAAA,I,6BACF,+CACU,QAAS,M,iBAFjBA,CAA0BX,IAa1BY,GAAAA,SAAAA,I,6BAKF,WAAYvF,EAAiBwF,EAA8B3K,EAAyB8D,GAAoC,sBACpH,IAAMlC,EAAsB,CACxBuD,QAASA,GAGTJ,EAAQ4F,EAAkB9H,cAAc7C,GALwE,OAMhH8D,GACIiB,IAAUjB,EAAO,IAAMnS,GAAOU,mBAAmB,iBAAkB,SAAUyR,GACjFlC,EAAOkC,OAASA,EAAOvQ,SAEvBqO,EAAOkC,OAAS,CAAEiB,GAGtB,cAAM8E,GAAYjI,GAASA,IAC3BpP,EAAAA,EAAAA,KAAe,UAAM,UAAW2S,IAChC3S,EAAAA,EAAAA,KAAe,UAAM,YAAamY,IAClCnY,EAAAA,EAAAA,KAAe,UAAM,WAAYwN,GAhBmF,E,2CAoBxH,SAAamI,GAAY,YACrB,2DAAmBA,GAEnBA,EAAMA,MAAQjW,KAAK8N,SAASlO,KAC5BqW,EAAMK,eAAiBtW,KAAK8N,SAASjE,SAErCoM,EAAMzS,OAAS,SAAC5C,EAAiBgR,GAC7B,OAAO,EAAK8C,UAAU5B,eAAe,EAAKhF,SAAUlN,EAAMgR,IAG9D,IACIqE,EAAMrD,KAAO5S,KAAK0U,UAAU5B,eAAe9S,KAAK8N,SAAUmI,EAAMrV,KAAMqV,EAAMrE,QAC9E,MAAOhP,GACLqT,EAAMrD,KAAO,KACbqD,EAAMyC,YAAc9V,K,qBAI5B,SAAQqT,GACJ,IAAMjG,EdtjBR,SAA4BjK,GAE9B,IAAMiK,EAAgE,GAiBtE,OAfoB,SAAd2I,EAAuBC,EAA8BjQ,GACvD,GAAK9E,MAAMC,QAAQ6E,GACnB,IAAK,IAAIE,KAAOF,EAAQ,CACpB,IAAMkQ,EAAYD,EAAKvX,QACvBwX,EAAUhY,KAAKgI,GAEf,IACK8P,EAAYE,EAAWlQ,EAAOE,IACjC,MAAOjG,GACLoN,EAAOnP,KAAK,CAAE+X,KAAMC,EAAWjW,MAAOA,MAIlD+V,CAAY,GAAK5S,GAEViK,EcmiBY8I,CAAkB7C,EAAMrD,MACvC,GAAI5C,EAAOlP,OAAU,MAAMkP,EAAO,GAAGpN,MAErC,IAAMgQ,GAAQqD,EAAMrD,MAAQ,IAAIvR,QAEhC,OADAuR,EAAK/R,KAAKoV,GACHrD,M,EAjDT4F,CAA6BZ,IA0D7BmB,GAAAA,SAAAA,I,6BAIF,WAAY9F,EAAiBwF,GAA4B,4BACrD,cAAM,IAAK,CAAExF,QAASA,KACtB3S,EAAAA,EAAAA,KAAe,UAAM,UAAW2S,IAChC3S,EAAAA,EAAAA,KAAe,UAAM,YAAamY,GAHmB,E,2CAMzD,SAAaxC,GAAY,YACrB,2DAAmBA,GAEnB,IACI,IAAME,EAASnW,KAAK0U,UAAU0B,SAASH,GACvCA,EAAMA,MAAQE,EAAOvW,KACrBqW,EAAMK,eAAiBH,EAAOjH,UAE9B+G,EAAMzS,OAAS,SAAC5C,EAAiBgR,GAC7B,OAAO,EAAK8C,UAAU5B,eAAeqD,EAAOnF,cAAepQ,EAAMgR,IAGrEqE,EAAMrD,KAAOuD,EAAOvD,KACtB,MAAOhQ,S,EAvBXmW,CAA6BnB,IAkCtBoB,GAAb,WA8BI,WAAYC,EAAuBR,EAAsCzB,GAAoC,4BAGzG1W,EAAAA,EAAAA,IAAeN,KAAM,aAAa2P,EAAAA,EAAAA,IAAS,0CAA4B,eAArCA,CAAqD8I,IAE/D,MAApBzB,IACA1W,EAAAA,EAAAA,IAAeN,KAAM,WAAY,OACjCM,EAAAA,EAAAA,IAAeN,KAAM,SAAU,OACxBkZ,GAAAA,EAAAA,SAAgBlC,KACvB1W,EAAAA,EAAAA,IAAeN,KAAM,WAAYgX,EAAiBzC,UAAY,OAC9DjU,EAAAA,EAAAA,IAAeN,KAAM,SAAUgX,IACxBmC,GAAAA,GAAAA,WAAoBnC,KAC3B1W,EAAAA,EAAAA,IAAeN,KAAM,WAAYgX,IACjC1W,EAAAA,EAAAA,IAAeN,KAAM,SAAU,OAE/BP,GAAOU,mBAAmB,6BAA8B,mBAAoB6W,IAGhF1W,EAAAA,EAAAA,IAAeN,KAAM,aAAc,KACnCM,EAAAA,EAAAA,IAAeN,KAAM,cAAe,KACpCM,EAAAA,EAAAA,IAAeN,KAAM,YAAa,KAClCM,EAAAA,EAAAA,IAAeN,KAAM,sBAAuB,KAE5CM,EAAAA,EAAAA,IAAeN,KAAM,UAAW,IAG5B,IAAMoZ,EAAqD,GA+B/D,GA9BI7T,OAAO+K,KAAKtQ,KAAK0U,UAAU3E,QAAQ1L,SAAQ,SAACiS,GACxC,IAAML,EAAQ,EAAKvB,UAAU3E,OAAOuG,IACpChW,EAAAA,EAAAA,IAAe,EAAK+Y,QAAS/C,GAAgB,WAAwB,2BAApB1D,EAAoB,yBAApBA,EAAoB,gBACjE,MAAO,CACHK,QAAS,EAAKA,QACdrB,OAAQ,EAAK8C,UAAU4E,mBAAmBrD,EAAOrD,OAGpDwG,EAAcnD,EAAMrW,QAASwZ,EAAcnD,EAAMrW,MAAQ,IAC9DwZ,EAAcnD,EAAMrW,MAAMiB,KAAKyV,MAGnC/Q,OAAO+K,KAAK8I,GAAe/U,SAAQ,SAACzE,GAChC,IAAMyZ,EAAUD,EAAcxZ,GACP,IAAnByZ,EAAQvY,QACRR,EAAAA,EAAAA,IAAe,EAAK+Y,QAASzZ,EAAM,EAAKyZ,QAAQA,EAAQ,KAExD5Z,GAAOkN,KAAP,kCAAwC/M,EAAxC,aAAmDyZ,EAAQpR,KAAK,MAAhE,UAKZ3H,EAAAA,EAAAA,IAAeN,KAAM,iBAAkB,KACvCM,EAAAA,EAAAA,IAAeN,KAAM,gBAAiB,IAEjB,MAAjBiZ,GACAxZ,GAAOU,mBAAmB,uCAAwC,gBAAiB8Y,IAGvF3Y,EAAAA,EAAAA,IAAeN,KAAM,UAAWiZ,GAC5BjZ,KAAKuU,UACLjU,EAAAA,EAAAA,IAAeN,KAAM,kBAAmBoT,GAAYpT,KAAKuU,SAAU0E,SAEnE,KACI3Y,EAAAA,EAAAA,IAAeN,KAAM,kBAAmByT,QAAQoD,SAAQlU,EAAAA,EAAAA,IAAWsW,KACrE,MAAOrW,GAELnD,GAAO8B,WAAW,2DAA4D7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAC/G6J,UAAW,iBAMvBvJ,KAAKwU,gBAAgB+E,OAAM,SAAClD,OAE5B,IAAMlR,EAAmD,GACnDqU,EAAuD,GAC7DjU,OAAO+K,KAAKtQ,KAAK0U,UAAU5E,WAAWzL,SAAQ,SAAC6K,GAC3C,IAAMpB,EAAW,EAAK4G,UAAU5E,UAAUZ,GAI1C,GAAIsK,EAAiBtK,GACjBzP,GAAOkN,KAAP,kCAAwC3C,KAAKE,UAAUgF,SAD3D,CAIAsK,EAAiBtK,IAAa,EAK1B,IAAMtP,EAAOkO,EAASlO,KACjBuF,EAAY,IAAD,OAAMvF,MAAYuF,EAAY,IAAD,OAAMvF,IAAW,IAC9DuF,EAAY,IAAD,OAAMvF,IAASiB,KAAKqO,GAGA,MAApB,EAAMA,KACjB5O,EAAAA,EAAAA,IAAyB,EAAM4O,EAAWqI,GAAa,EAAMzJ,GAAU,IAM1C,MAA7B,EAAKgC,UAAUZ,KACf5O,EAAAA,EAAAA,IAAe,EAAKwP,UAAWZ,EAAWqI,GAAa,EAAMzJ,GAAU,IAGzC,MAA9B,EAAK2L,WAAWvK,KAChB5O,EAAAA,EAAAA,IAAe,EAAKmZ,WAAYvK,EAAW4H,GAAU,EAAMhJ,GAAU,IAG9B,MAAvC,EAAK+F,oBAAoB3E,KACzB5O,EAAAA,EAAAA,IAAe,EAAKuT,oBAAqB3E,EAvczD,SAAuB4E,EAAoBhG,GACvC,OAAO,WAA4B,2BAAhB8E,EAAgB,yBAAhBA,EAAgB,gBAC/B,OAAOiB,GAAoBC,EAAUhG,EAAU8E,IAqca8G,CAAc,EAAM5L,IAGzC,MAA/B,EAAK6L,YAAYzK,KACjB5O,EAAAA,EAAAA,IAAe,EAAKqZ,YAAazK,EArcjD,SAAuB4E,EAAoBhG,GACvC,IAAMkJ,EAAoBlD,EAASG,QAAUH,EAASS,SACtD,OAAO,WAAkC,2BAAhB3B,EAAgB,yBAAhBA,EAAgB,gB,2HAO1B,OANNoE,GACDvX,GAAO8B,WAAW,wCAAyC7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAC5F6J,UAAW,gB,SAIFsK,GAAoBC,EAAUhG,EAAU8E,G,OAClD,OADDD,EAAAA,EAAAA,K,SACOqE,EAAiB2C,YAAYhH,G,oFA2bUiH,CAAc,EAAM9L,QAIxEvI,OAAO+K,KAAKnL,GAAad,SAAQ,SAACzE,GAE9B,IAAMia,EAAa1U,EAAYvF,GAC/B,KAAIia,EAAW/Y,OAAS,GAAxB,CAGAlB,EAAOA,EAAK8G,UAAU,GAEtB,IAAMwI,EAAY2K,EAAW,GAG7B,IACkC,MAAf,EAAMja,KACjBU,EAAAA,EAAAA,IAAyB,EAAMV,EAAiB,EAAMsP,IAE5D,MAAOmH,IAEmB,MAAxB,EAAKvG,UAAUlQ,KACfU,EAAAA,EAAAA,IAAe,EAAKwP,UAAWlQ,EAAM,EAAKkQ,UAAUZ,IAG3B,MAAzB,EAAKuK,WAAW7Z,KAChBU,EAAAA,EAAAA,IAAe,EAAKmZ,WAAY7Z,EAAM,EAAK6Z,WAAWvK,IAGpB,MAAlC,EAAK2E,oBAAoBjU,KACzBU,EAAAA,EAAAA,IAAe,EAAKuT,oBAAqBjU,EAAM,EAAKiU,oBAAoB3E,IAG9C,MAA1B,EAAKyK,YAAY/Z,KACjBU,EAAAA,EAAAA,IAAe,EAAKqZ,YAAa/Z,EAAM,EAAK+Z,YAAYzK,QAlLxE,uCAmMI,WACI,OAAOlP,KAAKmX,cApMpB,uBAuMI,SAAUF,GAAmB,WA0BzB,OAzBKjX,KAAK8Z,mBAGF9Z,KAAKkX,kBACLlX,KAAK8Z,iBAAmB9Z,KAAKkX,kBAAkBtB,OAAOxB,MAAK,WACvD,OAAO,KAQXpU,KAAK8Z,iBAAmB9Z,KAAKuU,SAASwF,QAAQ/Z,KAAKiT,QAASgE,GAAU7C,MAAK,SAACnP,GAOxE,MANa,OAATA,GACAxF,GAAO8B,WAAW,wBAAyB7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAC5Esa,gBAAiB,EAAK/G,QACtB1J,UAAW,gBAGZ,MAKZvJ,KAAK8Z,mBAjOpB,sBA0OI,SAAS/F,GAA8B,WAC9B/T,KAAKiU,QACNxU,GAAO8B,WAAW,0CAA2C7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAAE6J,UAAW,8BAGnH,IAAMoJ,GAAqCqB,EAAAA,EAAAA,IAAYD,GAAa,IAQpE,MANA,CAAC,OAAQ,MAAM1P,SAAQ,SAASwE,GACN,MAAZ8J,EAAI9J,IACdpJ,GAAO8B,WAAW,mBAAqBsH,EAAKnJ,EAAAA,GAAAA,OAAAA,sBAAqC,CAAE6J,UAAWV,OAGlG8J,EAAGiC,GAAK5U,KAAKwU,gBACNxU,KAAKia,WAAW7F,MAAK,WACxB,OAAO,EAAKH,OAAOwD,gBAAgB9E,QAxP/C,qBA6PI,SAAQqE,GAC6B,kBAAtBA,IACPA,EAAmB,IAAIkD,GAAAA,EAAWlD,EAAkBhX,KAAKuU,WAG7D,IAAMT,EAAW,IAAyC9T,KAAK4Q,YAAc5Q,KAAKiT,QAASjT,KAAK0U,UAAWsC,GAK3G,OAJIhX,KAAKkX,oBACL5W,EAAAA,EAAAA,IAAewT,EAAU,oBAAqB9T,KAAKkX,mBAGhDpD,IAvQf,oBA2QI,SAAOmF,GACH,OAAO,IAAyCjZ,KAAK4Q,YAAcqI,EAAejZ,KAAK0U,UAAW1U,KAAKiU,QAAUjU,KAAKuU,YA5Q9H,oCAmRY,SAAuB4F,GAE3B,OAAIna,KAAKoa,eAAeD,EAAatC,KAC1B7X,KAAKoa,eAAeD,EAAatC,KAEpCsC,IAxRhB,8BA2RY,SAAiBE,GACrB,GAA0B,kBAAfA,EAAyB,CAIhC,GAAkB,UAAdA,EACA,OAAOra,KAAKsa,uBAAuB,IAAI/B,IAI3C,GAAkB,UAAd8B,EACA,OAAOra,KAAKsa,uBAAuB,IAAI1C,GAAa,QAAS,OAIjE,GAAkB,MAAdyC,EACA,OAAOra,KAAKsa,uBAAuB,IAAIvB,GAAqB/Y,KAAKiT,QAASjT,KAAK0U,YAInF,IAAM5G,EAAW9N,KAAK0U,UAAUzD,SAASoJ,GACzC,OAAOra,KAAKsa,uBAAuB,IAAI9B,GAAqBxY,KAAKiT,QAASjT,KAAK0U,UAAW5G,IAI9F,GAAIuM,EAAUzI,QAAUyI,EAAUzI,OAAO9Q,OAAS,EAAG,CAGjD,IACI,IAAM+R,EAAQwH,EAAUzI,OAAO,GAC/B,GAAsB,kBAAXiB,EACP,MAAM,IAAIvN,MAAM,iBAEpB,IAAMwI,EAAW9N,KAAK0U,UAAUzD,SAAS4B,GACzC,OAAO7S,KAAKsa,uBAAuB,IAAI9B,GAAqBxY,KAAKiT,QAASjT,KAAK0U,UAAW5G,EAAUuM,EAAUzI,SAChH,MAAOhP,IAGT,IAAM8M,EAAsB,CACxBuD,QAASjT,KAAKiT,QACdrB,OAAQyI,EAAUzI,QAGtB,OAAO5R,KAAKsa,uBAAuB,IAAI1C,GAAaD,GAAYjI,GAASA,IAG7E,OAAO1P,KAAKsa,uBAAuB,IAAIvB,GAAqB/Y,KAAKiT,QAASjT,KAAK0U,cAzUvF,iCA4UI,SAAoByF,GAChB,GAAqC,IAAjCA,EAAahC,gBAAuB,QAC7BnY,KAAKoa,eAAeD,EAAatC,KAGxC,IAAM0C,EAAOva,KAAKwa,cAAcL,EAAatC,KACzC0C,GAAQJ,EAAazK,SACrB1P,KAAKuU,SAASkG,IAAIN,EAAazK,OAAQ6K,UAChCva,KAAKwa,cAAcL,EAAatC,SApVvD,wBA2VI,SAAWsC,EAA4B/M,EAAU2K,GAAkB,WACzD9B,GAAeC,EAAAA,EAAAA,IAAS9I,GAe9B,OAbA6I,EAAMM,eAAiB,WACdwB,IACLoC,EAAa5D,eAAewB,GAC5B,EAAK2C,oBAAoBP,KAG7BlE,EAAMO,SAAW,WAAQ,OAAO,EAAKjC,SAASiC,SAASpJ,EAAIqJ,YAC3DR,EAAMS,eAAiB,WAAQ,OAAO,EAAKnC,SAASmC,eAAetJ,EAAIuJ,kBACvEV,EAAMW,sBAAwB,WAAQ,OAAO,EAAKrC,SAASqC,sBAAsBxJ,EAAIuJ,kBAGrFwD,EAAaQ,aAAa1E,GAEnBA,IA3Wf,+BA8WY,SAAkBkE,EAA4BpC,EAAoBC,GAAa,WAWnF,GAVKhY,KAAKuU,UACN9U,GAAO8B,WAAW,wDAAyD7B,EAAAA,GAAAA,OAAAA,sBAAqC,CAAE6J,UAAW,SAGjI4Q,EAAaS,YAAY7C,EAAUC,GAGnChY,KAAKoa,eAAeD,EAAatC,KAAOsC,GAGnCna,KAAKwa,cAAcL,EAAatC,KAAM,CACvC,IAAMgD,EAAc,SAACzN,GACjB,IAAI6I,EAAQ,EAAK6E,WAAWX,EAAc/M,EAAK2K,GAG/C,GAAyB,MAArB9B,EAAMyC,YACN,IACI,IAAM9F,EAAOuH,EAAaY,QAAQ9E,GAClC,EAAKsE,KAAL,QAAI,CAAMJ,EAAazK,QAAnB,eAA8BkD,KACpC,MAAOhQ,GACLqT,EAAMyC,YAAc9V,EAAMA,MAKP,MAAvBuX,EAAazK,QACb,EAAK6K,KAAK,QAAStE,GAIE,MAArBA,EAAMyC,aACN,EAAK6B,KAAK,QAAStE,EAAMyC,YAAazC,IAG9CjW,KAAKwa,cAAcL,EAAatC,KAAOgD,EAGZ,MAAvBV,EAAazK,QACb1P,KAAKuU,SAASyG,GAAGb,EAAazK,OAAQmL,MArZtD,yBA0ZI,SAAY5E,EAAoBgF,EAA0CC,GAAkB,WAClFf,EAAena,KAAKmb,iBAAiBlF,GACrCvG,GAASsE,EAAAA,EAAAA,IAAYmG,EAAazK,QAYxC,MAVqC,kBAA1BuL,IAAsC9K,EAAAA,EAAAA,IAAY8K,EAAsB,KAChE,MAAXC,GACAzb,GAAOU,mBAAmB,wCAAyC,UAAW+a,GAE9DxL,EAAQ+G,UAAYwE,IAE9BvL,EAAQ0L,UAAsC,MAAxBH,EAAgCA,EAAsB,EAC5EvL,EAAQwL,QAAuB,MAAXA,EAAmBA,EAAS,UAGvDlb,KAAKuU,SAAS8G,QAAQ3L,GAAQ0E,MAAK,SAAC4B,GACvC,OAAOA,EAAKhS,KAAI,SAACoJ,GAAD,OAAS,EAAK0N,WAAWX,EAAc/M,EAAK,cAzaxE,gBA6aI,SAAG6I,EAA6B8B,GAE5B,OADA/X,KAAKsb,kBAAkBtb,KAAKmb,iBAAiBlF,GAAQ8B,GAAU,GACxD/X,OA/af,kBAkbI,SAAKiW,EAA6B8B,GAE9B,OADA/X,KAAKsb,kBAAkBtb,KAAKmb,iBAAiBlF,GAAQ8B,GAAU,GACxD/X,OApbf,kBAubI,SAAKqa,GACD,IAAKra,KAAKuU,SAAY,OAAO,EADwB,IAGrD,IAAM4F,EAAena,KAAKmb,iBAAiBd,GAHU,mBAAhBzH,EAAgB,iCAAhBA,EAAgB,kBAIrD,IAAM7M,EAAUoU,EAAaoB,IAAI3I,GAAQ,EAKzC,OAFA5S,KAAK0a,oBAAoBP,GAElBpU,IAhcf,2BAmcI,SAAcsU,GAAgC,WAC1C,OAAKra,KAAKuU,SACO,MAAb8F,EACO9U,OAAO+K,KAAKtQ,KAAKoa,gBAAgBhV,QAAO,SAACC,EAAOwD,GACnD,OAAOxD,EAAQ,EAAK+U,eAAevR,GAAKsP,kBACzC,GAEAnY,KAAKmb,iBAAiBd,GAAWlC,gBANX,IApcrC,uBA6cI,SAAUkC,GAAgC,WACtC,IAAKra,KAAKuU,SAAY,MAAO,GAE7B,GAAiB,MAAb8F,EAAmB,kBACnB,IAAMtU,EAA0B,GAChC,IAAK,IAAI8R,KAAO,EAAKuC,eACjB,EAAKA,eAAevC,GAAK2D,YAAYnX,SAAQ,SAAC0T,GAC1ChS,EAAOlF,KAAKkX,MAGpB,SAAOhS,GAPY,qCAUvB,OAAO/F,KAAKmb,iBAAiBd,GAAWmB,cA1dhD,gCA6dI,SAAmBnB,GACf,IAAKra,KAAKuU,SAAY,OAAOvU,KAE7B,GAAiB,MAAbqa,EAAmB,CACnB,IAAK,IAAMxC,KAAO7X,KAAKoa,eAAgB,CACnC,IAAMD,EAAena,KAAKoa,eAAevC,GACzCsC,EAAasB,qBACbzb,KAAK0a,oBAAoBP,GAE7B,OAAOna,KAIX,IAAMma,EAAena,KAAKmb,iBAAiBd,GAI3C,OAHAF,EAAasB,qBACbzb,KAAK0a,oBAAoBP,GAElBna,OA9ef,iBAifI,SAAIqa,EAAiCtC,GACjC,IAAK/X,KAAKuU,SAAY,OAAOvU,KAC7B,IAAMma,EAAena,KAAKmb,iBAAiBd,GAG3C,OAFAF,EAAa5D,eAAewB,GAC5B/X,KAAK0a,oBAAoBP,GAClBna,OAtff,4BAyfI,SAAeqa,EAAiCtC,GAC5C,OAAO/X,KAAKya,IAAIJ,EAAWtC,MA1fnC,iCAuLI,SAA0BT,GACtB,OAAOoE,EAAAA,EAAAA,IAAmBpE,KAxLlC,0BA2LI,SAAoBmB,GAChB,OAAIlJ,GAAUoM,YAAYlD,GACfA,EAEJ,IAAIlJ,GAAUkJ,KA/L7B,uBA+QI,SAAiBvY,GACb,OAAO6O,GAAQ6M,UAAU1b,OAhRjC,KA+fa2b,GAAb,uHAA8B7C,K,yOElnCvB,SAAS8C,EAAoBC,GAClC,OAAOC,EAAAA,EAAAA,GAAqB,UAAWD,GAEzC,IACA,GADoBE,E,SAAAA,GAAuB,UAAW,CAAC,OAAQ,gBAAiB,iBAAkB,kBAAmB,SAAU,iB,WCFzHC,EAAY,CAAC,YAAa,QAAS,YAAa,SAAU,UAAW,oBAAqB,YAAa,WAevGC,EAAuB,CAC3BC,QAAS,eACTC,YAAa,eACbC,UAAW,iBACXC,cAAe,iBACf3Z,MAAO,cAoBH4Z,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,EAAY,CAClC9c,KAAM,UACNmc,KAAM,OACNY,kBAAmB,SAACC,EAAOC,GACzB,IACEC,EACEF,EADFE,WAEF,MAAO,CAACD,EAAOE,KAAMF,EAAO,YAAD,QAAaG,EAAAA,EAAAA,GAAWF,EAAWG,aAAwC,WAAzBH,EAAWxO,WAA0BuO,EAAOK,UAP5GT,EASd,YAGG,IAFJU,EAEI,EAFJA,MACAL,EACI,EADJA,WAEMM,GAAQC,EAAAA,EAAAA,GAAQF,EAAD,kBA9BW,SAAAC,GAChC,OAAOjB,EAAqBiB,IAAUA,EA6BEE,CAA0BR,EAAWM,UAAaN,EAAWM,MACrG,OAAOG,EAAAA,EAAAA,GAAS,GAA6B,SAAzBT,EAAWG,WAAwB,CACrDO,eAAgB,QACU,UAAzBV,EAAWG,WAAyB,CACrCO,eAAgB,OAChB,UAAW,CACTA,eAAgB,cAEQ,WAAzBV,EAAWG,WAA0B,CACtCO,eAAgB,YAChBC,oBAA+B,YAAVL,GAAsBM,EAAAA,EAAAA,IAAMN,EAAO,SAAO/Z,EAC/D,UAAW,CACToa,oBAAqB,YAEG,WAAzBX,EAAWxO,YAAX,QACDqP,SAAU,WACVC,wBAAyB,cACzBC,gBAAiB,cAGjBC,QAAS,EACTC,OAAQ,EACRC,OAAQ,EAERC,aAAc,EACdC,QAAS,EAETC,OAAQ,UACRC,WAAY,OACZC,cAAe,SACfC,cAAe,OAEfC,iBAAkB,OAElB,sBAAuB,CACrBC,YAAa,SArBd,YAwBKC,EAAAA,cAA6B,CACjCX,QAAS,aAmJf,EA/I0BY,EAAAA,YAAiB,SAAcC,EAASC,GAChE,IAAMhC,GAAQiC,EAAAA,EAAAA,GAAc,CAC1BjC,MAAO+B,EACP/e,KAAM,YAINkf,EAQElC,EARFkC,UADF,EASIlC,EAPFQ,MAAAA,OAFF,MAEU,UAFV,IASIR,EANFtO,UAAAA,OAHF,MAGc,IAHd,EAIEyQ,EAKEnC,EALFmC,OACAC,EAIEpC,EAJFoC,QACAC,EAGErC,EAHFqC,kBANF,EASIrC,EAFFK,UAAAA,OAPF,MAOc,SAPd,IASIL,EADFsC,QAAAA,OARF,MAQY,UARZ,EAUMC,GAAQC,EAAAA,EAAAA,GAA8BxC,EAAOV,GAEnD,GAKImD,EAAAA,EAAAA,KAJFC,EADF,EACEA,kBACQC,EAFV,EAEER,OACSS,EAHX,EAGER,QACKS,EAJP,EAIEb,IAEF,EAAwCF,EAAAA,UAAe,GAAvD,eAAOgB,EAAP,KAAqBC,EAArB,KACMC,GAAaC,EAAAA,EAAAA,GAAWjB,EAAKa,GA0B7B3C,GAAaS,EAAAA,EAAAA,GAAS,GAAIX,EAAO,CACrCQ,MAAAA,EACA9O,UAAAA,EACAoR,aAAAA,EACAzC,UAAAA,EACAiC,QAAAA,IAGIY,EAhIkB,SAAAhD,GACxB,IACEgD,EAIEhD,EAJFgD,QACAxR,EAGEwO,EAHFxO,UACAoR,EAEE5C,EAFF4C,aACAzC,EACEH,EADFG,UAEI8C,EAAQ,CACZhD,KAAM,CAAC,OAAD,oBAAqBC,EAAAA,EAAAA,GAAWC,IAA4B,WAAd3O,GAA0B,SAAUoR,GAAgB,iBAE1G,OAAOM,EAAAA,EAAAA,GAAeD,EAAOjE,EAAqBgE,GAsHlCG,CAAkBnD,GAClC,OAAoBoD,EAAAA,EAAAA,KAAK1D,GAAUe,EAAAA,EAAAA,GAAS,CAC1CuB,WAAWqB,EAAAA,EAAAA,GAAKL,EAAQ/C,KAAM+B,GAC9BgB,QAASb,EACT7B,MAAOA,EACP9O,UAAWA,EACXyQ,OAtCiB,SAAA9I,GACjBsJ,EAAkBtJ,IAEgB,IAA9BqJ,EAAkBc,SACpBT,GAAgB,GAGdZ,GACFA,EAAO9I,IA+BT+I,QA3BkB,SAAA/I,GAClBuJ,EAAmBvJ,IAEe,IAA9BqJ,EAAkBc,SACpBT,GAAgB,GAGdX,GACFA,EAAQ/I,IAoBV2I,IAAKgB,EACL9C,WAAYA,EACZoC,QAASA,GACRC","sources":["../node_modules/@ethersproject/abi/src.ts/_version.ts","../node_modules/@ethersproject/abi/src.ts/coders/abstract-coder.ts","../node_modules/@ethersproject/abi/src.ts/coders/address.ts","../node_modules/@ethersproject/abi/src.ts/coders/anonymous.ts","../node_modules/@ethersproject/abi/src.ts/coders/array.ts","../node_modules/@ethersproject/abi/src.ts/coders/boolean.ts","../node_modules/@ethersproject/abi/src.ts/coders/bytes.ts","../node_modules/@ethersproject/abi/src.ts/coders/fixed-bytes.ts","../node_modules/@ethersproject/abi/src.ts/coders/null.ts","../node_modules/@ethersproject/abi/src.ts/coders/number.ts","../node_modules/@ethersproject/abi/src.ts/coders/string.ts","../node_modules/@ethersproject/abi/src.ts/coders/tuple.ts","../node_modules/@ethersproject/abi/src.ts/fragments.ts","../node_modules/@ethersproject/abi/src.ts/abi-coder.ts","../node_modules/@ethersproject/abi/src.ts/interface.ts","../node_modules/@ethersproject/contracts/src.ts/index.ts","../node_modules/@ethersproject/contracts/src.ts/_version.ts","../node_modules/@mui/material/Link/linkClasses.js","../node_modules/@mui/material/Link/Link.js"],"sourcesContent":["export const version = \"abi/5.6.4\";\n","\"use strict\";\n\nimport { arrayify, BytesLike, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nexport interface Result extends ReadonlyArray<any> {\n    readonly [key: string]: any;\n}\n\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n\n    _throwError(message: string, value: any): void {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\nexport class Writer {\n    readonly wordSize: number;\n\n    _data: Array<Uint8Array>;\n    _dataLength: number;\n    _padding: Uint8Array;\n\n    constructor(wordSize?: number) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [ ];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n\n    get data(): string {\n        return hexConcat(this._data);\n    }\n    get length(): number { return this._dataLength; }\n\n    _writeData(data: Uint8Array): number {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this._writeData(concat(writer._data));\n    }\n\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([ bytes, this._padding.slice(paddingOffset) ])\n        }\n        return this._writeData(bytes);\n    }\n\n    _getValue(value: BigNumberish): Uint8Array {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([ this._padding.slice(bytes.length % this.wordSize), bytes ]);\n        }\n        return bytes;\n    }\n\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value: BigNumberish): number {\n        return this._writeData(this._getValue(value));\n    }\n\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value: BigNumberish) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\n\nexport class Reader {\n    readonly wordSize: number;\n    readonly allowLoose: boolean;\n\n    readonly _data: Uint8Array;\n    readonly _coerceFunc: CoerceFunc;\n\n    _offset: number;\n\n    constructor(data: BytesLike, wordSize?: number, coerceFunc?: CoerceFunc, allowLoose?: boolean) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n\n        this._offset = 0;\n    }\n\n    get data(): string { return hexlify(this._data); }\n    get consumed(): number { return this._offset; }\n\n    // The default Coerce function\n    static coerce(name: string, value: any): any {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) { value =  value.toNumber(); }\n        return value;\n    }\n\n    coerce(name: string, value: any): any {\n        if (this._coerceFunc) { return this._coerceFunc(name, value); }\n        return Reader.coerce(name, value);\n    }\n\n    _peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            } else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength)\n    }\n\n    subReader(offset: number): Reader {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    readValue(): BigNumber {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class AddressCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"address\", \"address\", localName, false);\n    }\n\n    defaultValue(): string {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n\n    encode(writer: Writer, value: string): number {\n        try {\n            value = getAddress(value)\n        } catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n\n    decode(reader: Reader): any {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    private coder: Coder;\n\n    constructor(coder: Coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n\n    defaultValue(): any {\n        return this.coder.defaultValue();\n    }\n\n    encode(writer: Writer, value: any): number {\n        return this.coder.encode(writer, value);\n    }\n\n    decode(reader: Reader): any {\n        return this.coder.decode(reader);\n    }\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\n\nexport function pack(writer: Writer, coders: ReadonlyArray<Coder>, values: Array<any> | { [ name: string ]: any }): number {\n    let arrayValues: Array<any> = null;\n\n    if (Array.isArray(values)) {\n       arrayValues = values;\n\n    } else if (values && typeof(values) === \"object\") {\n        let unique: { [ name: string ]: boolean } = { };\n\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            unique[name] = true;\n\n            return values[name];\n        });\n\n    } else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n\n    let updateFuncs: Array<(baseOffset: number) => void> = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset: number) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n\nexport function unpack(reader: Reader, coders: Array<Coder>): Result {\n    let values: any = [];\n\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n\n    coders.forEach((coder) => {\n        let value: any = null;\n\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) { accum[name] = 0; }\n            accum[name]++;\n        }\n        return accum;\n    }, <{ [ name: string ]: number }>{ });\n\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder: Coder, index: number) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) { return; }\n\n        if (name === \"length\") { name = \"_length\"; }\n\n        if (values[name] != null) { return; }\n\n        const value = values[index];\n\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        } else {\n            values[name] = value;\n        }\n    });\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n\n    return Object.freeze(values);\n}\n\n\nexport class ArrayCoder extends Coder {\n    readonly coder: Coder;\n    readonly length: number;\n\n    constructor(coder: Coder, length: number, localName: string) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length: \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n\n        this.coder = coder;\n        this.length = length;\n    }\n\n    defaultValue(): Array<any> {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n\n        const result: Array<any> = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n\n    encode(writer: Writer, value: Array<any>): number {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n\n        let count = this.length;\n\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName? (\" \"+ this.localName): \"\"));\n\n        let coders = [];\n        for (let i = 0; i < value.length; i++) { coders.push(this.coder); }\n\n        return pack(writer, coders, value);\n    }\n\n    decode(reader: Reader): any {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) { coders.push(new AnonymousCoder(this.coder)); }\n\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class BooleanCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n\n    defaultValue(): boolean {\n        return false;\n    }\n\n    encode(writer: Writer, value: boolean): number {\n        return writer.writeValue(value ? 1: 0);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n\n","\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class DynamicBytesCoder extends Coder {\n    constructor(type: string, localName: string) {\n       super(type, type, localName, true);\n    }\n\n    defaultValue(): string {\n        return \"0x\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n\n    decode(reader: Reader): any {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\n\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName: string) {\n        super(\"bytes\", localName);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n\n\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    readonly size: number;\n\n    constructor(size: number, localName: string) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n\n    defaultValue(): string {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n\n    encode(writer: Writer, value: BytesLike): number {\n        let data = arrayify(value);\n        if (data.length !== this.size) { this._throwError(\"incorrect data length\", value); }\n        return writer.writeBytes(data);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NullCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"null\", \"\", localName, false);\n    }\n\n    defaultValue(): null {\n        return null;\n    }\n\n    encode(writer: Writer, value: any): number {\n        if (value != null) { this._throwError(\"not null\", value); }\n        return writer.writeBytes([ ]);\n    }\n\n    decode(reader: Reader): any {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n","\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NumberCoder extends Coder {\n    readonly size: number;\n    readonly signed: boolean;\n\n    constructor(size: number, signed: boolean, localName: string) {\n        const name = ((signed ? \"int\": \"uint\") + (size * 8));\n        super(name, name, localName, false);\n\n        this.size = size;\n        this.signed = signed;\n    }\n\n    defaultValue(): number {\n        return 0;\n    }\n\n    encode(writer: Writer, value: BigNumberish): number {\n        let v = BigNumber.from(value);\n\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n\n        return writer.writeValue(v);\n    }\n\n    decode(reader: Reader): any {\n        let value = reader.readValue().mask(this.size * 8);\n\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n\n        return reader.coerce(this.name, value);\n    }\n}\n\n","\"use strict\";\n\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Reader, Writer } from \"./abstract-coder\";\nimport { DynamicBytesCoder } from \"./bytes\";\n\nexport class StringCoder extends DynamicBytesCoder {\n\n    constructor(localName: string) {\n        super(\"string\", localName);\n    }\n\n    defaultValue(): string {\n        return \"\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n\n    decode(reader: Reader): any {\n        return toUtf8String(super.decode(reader));\n    }\n}\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\n\nexport class TupleCoder extends Coder {\n    readonly coders: Array<Coder>;\n\n    constructor(coders: Array<Coder>, localName: string) {\n        let dynamic = false;\n        const types: Array<string> = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) { dynamic = true; }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n\n    defaultValue(): any {\n        const values: any = [ ];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) { accum[name] = 0; }\n                accum[name]++;\n            }\n            return accum;\n        }, <{ [ name: string ]: number }>{ });\n\n        // Add named values\n        this.coders.forEach((coder: Coder, index: number) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) { return; }\n\n            if (name === \"length\") { name = \"_length\"; }\n\n            if (values[name] != null) { return; }\n\n            values[name] = values[index];\n        });\n\n        return Object.freeze(values);\n    }\n\n    encode(writer: Writer, value: Array<any> | { [ name: string ]: any }): number {\n        return pack(writer, this.coders, value);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport interface JsonFragmentType {\n    readonly name?: string;\n    readonly indexed?: boolean;\n    readonly type?: string;\n    readonly internalType?: any; // @TODO: in v6 reduce type\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\nexport interface JsonFragment {\n    readonly name?: string;\n    readonly type?: string;\n\n    readonly anonymous?: boolean;\n\n    readonly payable?: boolean;\n    readonly constant?: boolean;\n    readonly stateMutability?: string;\n\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    readonly gas?: string;\n};\n\nconst _constructorGuard = { };\n\n// AST Node parser state\ntype ParseState = {\n    allowArray?: boolean,\n    allowName?: boolean,\n    allowParams?: boolean,\n    allowType?: boolean,\n    readArray?: boolean,\n};\n\n// AST Node\ntype ParseNode = {\n    parent?: any,\n    type?: string,\n    name?: string,\n    state?: ParseState,\n    indexed?: boolean,\n    components?: Array<ParseNode>\n};\n\nlet ModifiersBytes: { [ name: string ]: boolean } = { calldata: true, memory: true, storage: true };\nlet ModifiersNest: { [ name: string ]: boolean } = { calldata: true, memory: true };\nfunction checkModifier(type: string, name: string): boolean {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) { return true; }\n    } else if (type === \"address\") {\n        if (name === \"payable\") { return true; }\n    } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) { return true; }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param: string, allowIndexed: boolean): ParseNode {\n\n    let originalParam = param;\n    function throwError(i: number) {\n        logger.throwArgumentError(`unexpected character at position ${ i }`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n\n    function newNode(parent: ParseNode): ParseNode {\n        let node: ParseNode = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) { node.indexed = false; }\n        return node\n    }\n\n    let parent: ParseNode = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                } else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [ newNode(node) ];\n                node = node.components[0];\n                break;\n\n            case \")\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let child = node;\n                node = node.parent;\n                if (!node) { throwError(i); }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n\n            case \",\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let sibling: ParseNode = newNode(node.parent);\n                 //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n\n            // Hit a space...\n            case \" \":\n\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) { throwError(i); }\n                            if (node.indexed) { throwError(i); }\n                            node.indexed = true;\n                            node.name = \"\";\n                        } else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        } else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n\n                break;\n\n            case \"[\":\n                if (!node.state.allowArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n\n            case \"]\":\n                if (!node.state.readArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                } else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                } else if (node.state.readArray) {\n                    node.type += c;\n                } else {\n                    throwError(i);\n               }\n        }\n    }\n\n    if (node.parent) { logger.throwArgumentError(\"unexpected eof\", \"param\", param); }\n\n    delete parent.state;\n\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) { throwError(originalParam.length - 7); }\n        if (node.indexed) { throwError(originalParam.length - 7); }\n        node.indexed = true;\n        node.name = \"\";\n    } else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n\n    parent.type = verifyType(parent.type);\n\n    return parent;\n}\n\nfunction populate(object: any, params: any) {\n    for (let key in params) { defineReadOnly(object, key, params[key]); }\n}\n\nexport const FormatTypes: { [ name: string ]: string } = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n\n    // JSON-format a la Solidity\n    json: \"json\"\n});\n\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nexport class ParamType {\n\n    // The local name of the parameter (of null if unbound)\n    readonly name: string;\n\n    // The fully qualified type (e.g. \"address\", \"tuple(address)\", \"uint256[3][]\"\n    readonly type: string;\n\n    // The base type (e.g. \"address\", \"tuple\", \"array\")\n    readonly baseType: string;\n\n    // Indexable Paramters ONLY (otherwise null)\n    readonly indexed: boolean;\n\n    // Tuples ONLY: (otherwise null)\n    //  - sub-components\n    readonly components: Array<ParamType>;\n\n    // Arrays ONLY: (otherwise null)\n    //  - length of the array (-1 for dynamic length)\n    //  - child type\n    readonly arrayLength: number;\n    readonly arrayChildren: ParamType;\n\n    readonly _isParamType: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) { logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new ParamType()\"\n        }); }\n        populate(this, params);\n\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        } else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\": this.type)\n            });\n        }\n\n        this._isParamType = true;\n\n        Object.freeze(this);\n    }\n\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            let result: any = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = \"\";\n\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\": String(this.arrayLength)) + \"]\";\n        } else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map(\n                    (comp) => comp.format(format)\n                ).join((format === FormatTypes.full) ? \", \": \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) { result += \" indexed\"; }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    static from(value: string | JsonFragmentType | ParamType, allowIndexed?: boolean): ParamType {\n        if (typeof(value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragmentType | ParamType): ParamType {\n        if (ParamType.isParamType(value)) { return value; }\n\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null: !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject): null)\n        });\n    }\n\n    static fromString(value: string, allowIndexed?: boolean): ParamType {\n        function ParamTypify(node: ParseNode): ParamType {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n\n    static isParamType(value: any): value is ParamType {\n        return !!(value != null && value._isParamType);\n    }\n};\n\nfunction parseParams(value: string, allowIndex: boolean): Array<ParamType> {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\n\ntype TypeCheck<T> = { -readonly [ K in keyof T ]: T[K] };\n\ninterface _Fragment {\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: ReadonlyArray<ParamType>;\n}\n\nexport abstract class Fragment {\n\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: Array<ParamType>;\n\n    readonly _isFragment: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n\n        this._isFragment = true;\n\n        Object.freeze(this);\n    }\n\n    abstract format(format?: string): string;\n\n    static from(value: Fragment | JsonFragment | string): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        if (typeof(value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n\n        return Fragment.fromObject(value);\n    }\n\n    static fromObject(value: Fragment | JsonFragment): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n\n    static fromString(value: string): Fragment {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n\n        if (value.split(\" \")[0] === \"event\") {\n           return EventFragment.fromString(value.substring(5).trim());\n        } else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        } else if (value.split(\" \")[0] === \"error\") {\n           return ErrorFragment.fromString(value.substring(5).trim());\n        }\n\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n\n    static isFragment(value: any): value is Fragment {\n        return !!(value && value._isFragment);\n    }\n}\n\ninterface _EventFragment extends _Fragment {\n    readonly anonymous: boolean;\n}\n\nexport class EventFragment extends Fragment {\n    readonly anonymous: boolean;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: EventFragment | JsonFragment | string): EventFragment {\n        if (typeof(value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragment | EventFragment): EventFragment {\n        if (EventFragment.isEventFragment(value)) { return value; }\n\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_EventFragment> = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n\n        return new EventFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): EventFragment {\n\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch(modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n\n    static isEventFragment(value: any): value is EventFragment {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\n\nfunction parseGas(value: string, params: any): string {\n    params.gas = null;\n\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n\n    return value;\n}\n\nfunction parseModifiers(value: string, params: any): void {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\n\ntype StateInputValue = {\n    constant?: boolean;\n    payable?: boolean;\n    stateMutability?: string;\n    type?: string;\n};\n\ntype StateOutputValue = {\n    constant: boolean;\n    payable: boolean;\n    stateMutability: string;\n};\n\nfunction verifyState(value: StateInputValue): StateOutputValue {\n    let result: any = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n    } else if (value.payable != null) {\n        result.payable = !!value.payable;\n\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n\n        result.constant = !!value.constant;\n\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        } else {\n            result.stateMutability = (result.payable ? \"payable\": \"nonpayable\");\n        }\n\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n\n    } else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\": \"payable\");\n\n    } else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    return result;\n}\n\ninterface _ConstructorFragment extends _Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n}\n\nexport class ConstructorFragment extends Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n\n        let result = \"constructor(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n\n        return result.trim();\n    }\n\n    static from(value: ConstructorFragment | JsonFragment | string): ConstructorFragment {\n        if (typeof(value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ConstructorFragment | JsonFragment): ConstructorFragment {\n        if (ConstructorFragment.isConstructorFragment(value)) { return value; }\n\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n\n        const params: TypeCheck<_ConstructorFragment> = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): ConstructorFragment {\n        let params: any = { type: \"constructor\" };\n\n        value = parseGas(value, params);\n\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n\n        params.inputs = parseParams(parens[2].trim(), false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        return ConstructorFragment.fromObject(params);\n    }\n\n    static isConstructorFragment(value: any): value is ConstructorFragment {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\n\ninterface _FunctionFragment extends _ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n}\n\nexport class FunctionFragment extends ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            } else if (this.constant) {\n                result += \"view \";\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map(\n                    (output) => output.format(format)\n                ).join(\", \") + \") \";\n            }\n\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: FunctionFragment | JsonFragment | string): FunctionFragment {\n        if (typeof(value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n\n    static fromObject(value: FunctionFragment | JsonFragment): FunctionFragment {\n        if (FunctionFragment.isFunctionFragment(value)) { return value; }\n\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n\n        const params: TypeCheck<_FunctionFragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject): [ ]),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new FunctionFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): FunctionFragment {\n        let params: any = { type: \"function\" };\n        value = parseGas(value, params);\n\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        // We have outputs\n        if (comps.length > 1) {\n           let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        } else {\n            params.outputs = [ ];\n        }\n\n        return FunctionFragment.fromObject(params);\n    }\n\n    static isFunctionFragment(value: any): value is FunctionFragment {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n\n//export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment: ErrorFragment): ErrorFragment {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${ sig } error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\n\nexport class ErrorFragment extends Fragment {\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        return result.trim();\n    }\n\n    static from(value: ErrorFragment | JsonFragment | string): ErrorFragment {\n        if (typeof(value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ErrorFragment | JsonFragment): ErrorFragment {\n        if (ErrorFragment.isErrorFragment(value)) { return value; }\n\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_Fragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): [])\n        };\n\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n\n    static fromString(value: string): ErrorFragment {\n        let params: any = { type: \"error\" };\n\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n\n    static isErrorFragment(value: any): value is ErrorFragment {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\n\nfunction verifyType(type: string): string {\n\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    } else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n\n    // @TODO: more verification\n\n    return type;\n}\n\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value: string): string {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${ value }\"`, \"value\", value);\n    }\n    return value;\n}\n\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value: string): Array<any> {\n    value = value.trim();\n\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        } else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            } else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) { result.push(accum); }\n\n    return result;\n}\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\n\nimport { ParamType } from \"./fragments\";\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport class AbiCoder {\n    readonly coerceFunc: CoerceFunc;\n\n    constructor(coerceFunc?: CoerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n\n    _getCoder(param: ParamType): Coder {\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n\n    _getWordSize(): number { return 32; }\n\n    _getReader(data: Uint8Array, allowLoose?: boolean): Reader {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n\n    _getWriter(): Writer {\n        return new Writer(this._getWordSize());\n    }\n\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\n\nexport const defaultAbiCoder: AbiCoder = new AbiCoder();\n\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let message = \"\";\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${ JSON.stringify(errorArgs[0]) }`;\n                    } else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${ errorArgs[0] }`;\n                    }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\n                value = (value ? \"0x01\": \"0x00\");\n            }\n\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = eventFragment.inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n","\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n    type?: number;\n    accessList?: AccessListish;\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n\n    type?: number;\n    accessList?: AccessList;\n\n    maxFeePerGas?: BigNumber;\n    maxPriorityFeePerGas?: BigNumber;\n\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"value\",\n                value\n            }));\n        }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    if (ro.type != null) { tx.type = ro.type; }\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Compute the intrinsic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n    }\n\n    if (ro.ccipReadEnabled) {\n        tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    delete overrides.type;\n    delete overrides.accessList;\n\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations?: number) => {\n        return wait(confirmations).then((receipt: ContractReceipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event: Event = (<Event>deepCopy(log));\n                let parsed: LogDescription = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e){ }\n\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n\n                // Useful operations\n                event.removeListener = () => { return contract.provider; }\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                }\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                }\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                }\n\n                return event;\n            });\n\n            return receipt;\n        });\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tx.wait so the receipt has extra properties\n        addContractWait(contract, tx);\n\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class BaseContract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listeners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\n                uniqueNames[`%${ name }`].push(signature);\n            }\n\n            if ((<Contract>this)[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n\n            const signature = signatures[0];\n\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if ((<Contract>this)[name] == null) {\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n                }\n            } catch (e) { }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class Contract extends BaseContract {\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n        // Add the modified wait that wraps events\n        addContractWait(contract, tx);\n\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n","export const version = \"contracts/5.6.2\";\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getLinkUtilityClass(slot) {\n  return generateUtilityClass('MuiLink', slot);\n}\nconst linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);\nexport default linkClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport { alpha, getPath } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nimport linkClasses, { getLinkUtilityClass } from './linkClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\n\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    component,\n    focusVisible,\n    underline\n  } = ownerState;\n  const slots = {\n    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, getLinkUtilityClass, classes);\n};\n\nconst LinkRoot = styled(Typography, {\n  name: 'MuiLink',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const color = getPath(theme, `palette.${transformDeprecatedColors(ownerState.color)}`) || ownerState.color;\n  return _extends({}, ownerState.underline === 'none' && {\n    textDecoration: 'none'\n  }, ownerState.underline === 'hover' && {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  }, ownerState.underline === 'always' && {\n    textDecoration: 'underline',\n    textDecorationColor: color !== 'inherit' ? alpha(color, 0.4) : undefined,\n    '&:hover': {\n      textDecorationColor: 'inherit'\n    }\n  }, ownerState.component === 'button' && {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    MozAppearance: 'none',\n    // Reset\n    WebkitAppearance: 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    [`&.${linkClasses.focusVisible}`]: {\n      outline: 'auto'\n    }\n  });\n});\nconst Link = /*#__PURE__*/React.forwardRef(function Link(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiLink'\n  });\n\n  const {\n    className,\n    color = 'primary',\n    component = 'a',\n    onBlur,\n    onFocus,\n    TypographyClasses,\n    underline = 'always',\n    variant = 'inherit'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n\n  const handleBlur = event => {\n    handleBlurVisible(event);\n\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const handleFocus = event => {\n    handleFocusVisible(event);\n\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    focusVisible,\n    underline,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(LinkRoot, _extends({\n    className: clsx(classes.root, className),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    ownerState: ownerState,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .any,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   * @default 'always'\n   */\n  underline: PropTypes.oneOf(['always', 'hover', 'none']),\n\n  /**\n   * Applies the theme typography styles.\n   * @default 'inherit'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string])\n} : void 0;\nexport default Link;"],"names":["version","logger","Logger","Coder","name","type","localName","dynamic","this","message","value","throwArgumentError","Writer","wordSize","defineReadOnly","_data","_dataLength","_padding","Uint8Array","hexConcat","data","push","length","writer","_writeData","concat","bytes","arrayify","paddingOffset","slice","BigNumber","throwError","offset","_getValue","Reader","coerceFunc","allowLoose","_offset","hexlify","_coerceFunc","coerce","loose","alignedLength","Math","ceil","_peekBytes","readBytes","match","parseInt","toNumber","AddressCoder","getAddress","error","_throwError","writeValue","reader","hexZeroPad","readValue","toHexString","AnonymousCoder","coder","undefined","defaultValue","encode","decode","pack","coders","values","arrayValues","Array","isArray","unique","map","argument","staticWriter","dynamicWriter","updateFuncs","forEach","index","dynamicOffset","updateFunc","writeUpdatableValue","baseOffset","func","appendWriter","unpack","baseReader","subReader","offsetReader","code","baseType","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","get","i","freeze","ArrayCoder","defaultChild","result","count","checkArgumentCount","BooleanCoder","isZero","DynamicBytesCoder","writeBytes","BytesCoder","FixedBytesCoder","size","String","substring","NullCoder","NumberCoder","signed","v","maxUintValue","MaxUint256","bounds","mask","gt","lt","add","One","mul","NegativeOne","Zero","toTwos","fromTwos","StringCoder","toUtf8Bytes","toUtf8String","TupleCoder","types","join","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","indexOf","populate","object","params","key","FormatTypes","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructorGuard","operation","arrayLength","arrayChildren","fromObject","components","_isParamType","format","indexed","comp","JSON","parse","stringify","allowIndexed","fromString","isParamType","verifyType","node","param","originalParam","newNode","parent","state","allowType","replace","c","allowParams","child","allowName","allowArray","sibling","readArray","parseParamType","parseParams","allowIndex","trim","depth","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","split","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","console","log","verifyState","isConstructorFragment","parens","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","isErrorFragment","regexIdentifier","paramTypeBytes","paramTypeNumber","defaultAbiCoder","_getCoder","component","_getWordSize","from","_getWriter","_getReader","LogDescription","Description","TransactionDescription","ErrorDescription","Indexed","_isIndexed","BuiltinErrors","signature","reason","wrapAccessError","property","wrap","Interface","fragments","abi","filter","getStatic","bucket","deploy","functions","events","errors","j","nameOrSignatureOrSighash","isHexString","getSighash","matching","keys","f","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","constructor","getFunction","getError","_","eventFragment","getEvent","_abiCoder","_encodeParams","_decodeParams","functionFragment","errorArgs","errorName","errorSignature","selector","builtin","method","topics","encodeTopic","id","keccak256","pop","dataTypes","dataValues","topicHash","expected","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","tx","args","topic","decodeEventLog","hexData","errorFragment","address","hexDataSlice","_isInterface","resolveName","resolver","nameOrPromise","resolveAddresses","paramType","Promise","all","reject","makeError","populateTransaction","contract","overrides","shallowCopy","signer","resolveProperties","override","then","check","__awaiter","provider","resolvedAddress","resolved","interface","encodeFunctionData","to","ro","nonce","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","accessList","accessListify","intrinsic","roValue","customData","ccipReadEnabled","leftovers","l","addContractWait","wait","bind","confirmations","receipt","logs","event","deepCopy","parsed","parseLog","e","eventSignature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildCall","collapseSimple","signerOrProvider","blockTag","deployTransaction","_deployed","call","decodeFunctionResult","transaction","buildDefault","txRequest","sendTransaction","buildSend","getEventTag","RunningEvent","tag","_listeners","listener","once","done","item","listenerCount","argsCopy","setTimeout","apply","ErrorRunningEvent","FragmentRunningEvent","contractInterface","decodeError","checkErrors","path","childPath","checkResultErrors","WildcardRunningEvent","BaseContract","addressOrName","Signer","Provider","uniqueFilters","filters","encodeFilterTopics","catch","uniqueSignatures","callStatic","buildPopulate","estimateGas","buildEstimate","signatures","_deployedPromise","getCode","contractAddress","deployed","VoidSigner","runningEvent","_runningEvents","eventName","_normalizeRunningEvent","emit","_wrappedEmits","off","_checkRunningEvents","prepareEvent","addListener","wrappedEmit","_wrapEvent","getEmit","on","fromBlockOrBlockhash","toBlock","_getRunningEvent","fromBlock","getLogs","_addEventListener","run","listeners","removeAllListeners","getContractAddress","isInterface","isIndexed","Contract","getLinkUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","colorTransformations","primary","textPrimary","secondary","textSecondary","LinkRoot","styled","Typography","overridesResolver","props","styles","ownerState","root","capitalize","underline","button","theme","color","getPath","transformDeprecatedColors","_extends","textDecoration","textDecorationColor","alpha","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","MozAppearance","WebkitAppearance","borderStyle","linkClasses","React","inProps","ref","useThemeProps","className","onBlur","onFocus","TypographyClasses","variant","other","_objectWithoutPropertiesLoose","useIsFocusVisible","isFocusVisibleRef","handleBlurVisible","handleFocusVisible","focusVisibleRef","focusVisible","setFocusVisible","handlerRef","useForkRef","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","current"],"sourceRoot":""}